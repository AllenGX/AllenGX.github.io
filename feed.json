{
    "version": "https://jsonfeed.org/version/1",
    "title": "鑫酱",
    "subtitle": "笔记本",
    "icon": "https://allengx.gitee.io/images/favicon.ico",
    "description": "整天摸鱼，却妄想拯救世界的技术宅",
    "home_page_url": "https://allengx.gitee.io",
    "items": [
        {
            "id": "https://allengx.gitee.io/computer-science/study/python/Python-watchdog/",
            "url": "https://allengx.gitee.io/computer-science/study/python/Python-watchdog/",
            "title": "基于 watchdog 实现自动化更新",
            "date_published": "2020-10-17T07:36:15.000Z",
            "content_html": "<p>watchdog<br />\n--- python</p>\n<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"基于-watchdog-实现自动化更新\"><a class=\"anchor\" href=\"#基于-watchdog-实现自动化更新\">#</a> 基于 watchdog 实现自动化更新</h1>\n<h2 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景：</h2>\n<p>每次修改 Python 后为了不重启服务器进行调试，需要手动执行一个指令来指定需要热更的文件，有时候会比较麻烦。为此写了一个自动识别文件修改的工具，可以实时监听文件的修改并自动执行热更操作。</p>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理：</h2>\n<ol>\n<li>基于 watchdog 监听某个文件下的文件</li>\n<li>发现文件修改后触发相应的 Event。</li>\n<li>根据 Event 内容生成热更指令，写入热更文件。</li>\n<li>热更程序定时读取文件，执行热更指令，并清空文件。</li>\n</ol>\n<h2 id=\"核心代码\"><a class=\"anchor\" href=\"#核心代码\">#</a> 核心代码：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># DATE: 2020/10/16 Fri</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> watchdog<span class=\"token punctuation\">.</span>observers <span class=\"token keyword\">import</span> Observer</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> watchdog<span class=\"token punctuation\">.</span>events <span class=\"token keyword\">import</span> LoggingEventHandler</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventHandler</span><span class=\"token punctuation\">(</span>LoggingEventHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">on_modified</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>event<span class=\"token punctuation\">.</span>src_path<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    event_handler <span class=\"token operator\">=</span> EventHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    observer <span class=\"token operator\">=</span> Observer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    observer<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span>event_handler<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span> recursive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    observer<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        observer<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    observer<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># DATE: 2020/10/16 Fri</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> enum</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> watchdog<span class=\"token punctuation\">.</span>observers <span class=\"token keyword\">import</span> Observer</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">from</span> watchdog<span class=\"token punctuation\">.</span>events <span class=\"token keyword\">import</span> FileSystemEventHandler</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">(</span>enum<span class=\"token punctuation\">.</span>IntEnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tUPDATE <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterPath</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_paths <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"listen_path\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> _path <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_paths<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> path<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterFile</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_files <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"listen_file_ext\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t_<span class=\"token punctuation\">,</span> ext <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> ext <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_files<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CmdConverter</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>root_path <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"converter_root\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_replaces <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"replace_char\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_cmd_format <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd_format\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event_type<span class=\"token punctuation\">:</span> EventType<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> path<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>root_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>root_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> _replace <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_replaces<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>_replace<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> event_type <span class=\"token operator\">==</span> EventType<span class=\"token punctuation\">.</span>UPDATE<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_cmd_format<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>write_path <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"update_path\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">write_to_file</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>write_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\tf<span class=\"token punctuation\">.</span>writelines<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoUpdateHandler</span><span class=\"token punctuation\">(</span>FileSystemEventHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_filters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>FilterPath<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FilterFile<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_converter <span class=\"token operator\">=</span> CmdConverter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_writer <span class=\"token operator\">=</span> FileWriter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">on_modified</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> _filter <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_filters<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> _filter<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>src_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\tcmd <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_converter<span class=\"token punctuation\">(</span>EventType<span class=\"token punctuation\">.</span>UPDATE<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>src_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_writer<span class=\"token punctuation\">.</span>write_to_file<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'cmd:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cmd<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">WatchDog</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tjson_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\tvalid_init <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> cls<span class=\"token punctuation\">.</span>valid_init<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./config.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t\tcls<span class=\"token punctuation\">.</span>json_info <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\tcls<span class=\"token punctuation\">.</span>valid_init <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t<span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_json_info</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> cls<span class=\"token punctuation\">.</span>valid_init<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\tcls<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>json_info<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">listen_change</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\tobserver <span class=\"token operator\">=</span> Observer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\tobserver<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span>AutoUpdateHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span>cls<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"root_path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> recursive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\tobserver<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t\ttime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\tobserver<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\tobserver<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\tWatchDog<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\tWatchDog<span class=\"token punctuation\">.</span>listen_change<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>部分路径参数抽离到了  <code>config.json</code>  文件内：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"root_path\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/root\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"listen_path\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"/root/xxxx\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 需要监听的文件目录，有些文件可以忽略修改，在这里进行定制</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"listen_file_ext\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\".py\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 监听文件后缀</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"update_path\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"需要写入的 update 文件，该文件会被热更程序定时读取\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">\"converter_root\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"用于转换更新指令的路径 例如监听路径是 /root/ 修改文件是 /root/code/Python/test.py 而热更指令可能是 update Python.test.py, 所以这里应该填 /root/code/ 用于进行路径转换\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"cmd_format\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"&#123;0&#125; &#123;1&#125;\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 热更指令，例如：update Python.test.py</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"replace_char\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"\\\\\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考内容：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvcmFraGFyZ29zaC93YXRjaGRvZw==\">watchdog github 源码</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/python/Python-C-extension/",
            "url": "https://allengx.gitee.io/computer-science/study/python/Python-C-extension/",
            "title": "编写Python的C扩展",
            "date_published": "2020-10-10T10:00:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"编写python的c扩展\"><a class=\"anchor\" href=\"#编写python的c扩展\">#</a> 编写 Python 的 C 扩展</h1>\n<h2 id=\"构建编译基础环境\"><a class=\"anchor\" href=\"#构建编译基础环境\">#</a> 构建编译基础环境</h2>\n<ul>\n<li>启动 visual studio installer</li>\n<li>安装相关插件和依赖库</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201009163830574.png\" alt=\"image-20201009163830574\" /></p>\n<h2 id=\"编写c扩展代码\"><a class=\"anchor\" href=\"#编写c扩展代码\">#</a> 编写 C 扩展代码</h2>\n<p>简单的 C 扩展大致结构图：</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201009182911183.png\" alt=\"image-20201009182911183\" /></p>\n<ul>\n<li>定义函数： PyMethodDef</li>\n<li>定义模块： PyModuleDef</li>\n<li>定义初始化模块函数：PyInit_module</li>\n</ul>\n<h3 id=\"定义函数\"><a class=\"anchor\" href=\"#定义函数\">#</a> 定义函数</h3>\n<ul>\n<li>\n<p>函数名： <code>模块名_函数名</code></p>\n</li>\n<li>\n<p>参数类型  <code>ml_flags</code>  ：</p>\n<ul>\n<li><strong>METH_VARARGS</strong> ：只包含元组参数  <code>def func(self, *args)</code></li>\n<li><strong>METH_VARARGS | METH_KEYWORDS</strong> ：包含元组及字典参数  <code>def func(self, *args, **kwargs)</code></li>\n<li><strong>METH_FASTCALL</strong> ：固定个数的元组参数。顾名思义，采用快速调用效率较高。  <code>def func(self, arg1, arg2, argN)</code></li>\n<li><strong>METH_FASTCALL | METH_KEYWORDS</strong> ：固定个数元组参数 + 字典参数。 <code>def func(self, arg1, arg2, argN, **kwargs)</code></li>\n<li><strong>METH_NOARGS</strong> ：无参函数。 <code>def func(self)</code></li>\n<li><strong>METH_O</strong> ：单个参数。 <code>def func(self, arg1)</code></li>\n<li><strong>METH_CLASS</strong> ：类函数。 <code>def func(cls)</code></li>\n<li><strong>METH_STATIC</strong> ：静态函数。 <code>def func()</code></li>\n</ul>\n</li>\n<li>\n<p>逻辑代码</p>\n<ul>\n<li>\n<p>参数解析（PyArg_Parse）：</p>\n<ul>\n<li>\n<p><strong>PyArg_ParseTuple</strong> ：解析位置参数。</p>\n<ul>\n<li><code>PyArg_ParseTuple(PyObject* args, const char* format, ...)</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">PyArg_ParseTuple</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span><span class=\"token string\">\"iis\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Python call:func(i:int, j:int, s:str)</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>PyArg_VaParse</strong>：用于解析可变数量参数，通过  <code>var_list</code>  承载。</p>\n<ul>\n<li><code>PyArg_VaParse(PyObject* args, const char* format, va_list  vargs)</code> 。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3Byb2dyYW1taW5nLmNvbS90dXRvcmlhbC9jL2xlc3NvbjE3Lmh0bWw=\">相关使用案例</span></li>\n</ul>\n</li>\n<li>\n<p><strong>PyArg_ParseTupleAndKeywords</strong>：解析位置和关键字参数。</p>\n<ul>\n<li><code>PyArg_ParseTupleAndKeywords(PyObject* args, PyObject* kw, const char* format, char* keywords[], ...)</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>foo <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bar <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>baz <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>keywords<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">PyArg_ParseTupleAndKeywords</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">,</span><span class=\"token string\">\"ss|sss\"</span><span class=\"token punctuation\">,</span> keywords<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>foo<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bar<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>baz<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// Python call:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// func() // Fails, require a and b</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// func('a') // fails, requires b</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// func('a', 'b')</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// func('a', 'b', foo='foo', bar='bar', baz='baz) </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// func('a', 'b','foo', 'bar', 'baz')</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// func(a='a', b='b', foo='foo', bar='bar', baz='baz')</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>PyArg_VaParseTupleAndKeywords</strong> ：解析可变数量参数和关键字参数。</p>\n<ul>\n<li><code>PyArg_VaParseTupleAndKeywords(PyObject* args, PyObject* kw, const char* format, char* keywords[], va_list  vargs)</code></li>\n</ul>\n</li>\n<li>\n<p><strong>PyArg_ValidateKeywordArguments</strong> ：解析关键字参数，关键字必须为字符串</p>\n<ul>\n<li><code>PyArg_ValidateKeywordArguments(PyObject* kw)</code></li>\n</ul>\n</li>\n<li>\n<p><strong>PyArg_UnpackTuple</strong> ：解析特定长度范围的元组。</p>\n<ul>\n<li><code>PyArg_UnpackTuple(PyObject* args, const char* name, Py_ssize_t* min, Py_ssize_t* max, ...) </code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>返回值 ——  <code>Py_BuildValue</code>  ：</p>\n<ul>\n<li><code>PyObject *Py_BuildValue(const char *format, ...)</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>                        None</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>                  <span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iii\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">789</span><span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">789</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>              <span class=\"token string\">'hello'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>              b<span class=\"token string\">'hello'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ss\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>          <span class=\"token string\">'hell'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>          b<span class=\"token string\">'hell'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"()\"</span><span class=\"token punctuation\">)</span>                      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(i)\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>                <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(ii)\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span>          <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(i,i)\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span>         <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[i,i]\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span>         <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;s:i,s:i&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'abc'</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'def'</span><span class=\"token operator\">:</span> <span class=\"token number\">456</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"((ii)(ii)) (ii)\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>format</code>  格式：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>s</code></td>\n<td>const char *</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td><code>s*</code></td>\n<td>Py_buffer</td>\n<td>生成的 C 字符串可能包含嵌入的 NULL 字节</td>\n</tr>\n<tr>\n<td><code>s#</code></td>\n<td>const char *，int</td>\n<td>拆解出两个对象，一个 str，一个 len</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>const char *</td>\n<td>字符串或者 None</td>\n</tr>\n<tr>\n<td><code>z*</code></td>\n<td>Py_buffer</td>\n<td>生成的 C 字符串可能包含嵌入的 NULL 字节或者 None</td>\n</tr>\n<tr>\n<td><code>z#</code></td>\n<td>const char *，int</td>\n<td>拆解出两个对象，一个 str 或者 None，一个 len</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>const char *</td>\n<td>只读字节对象</td>\n</tr>\n<tr>\n<td><code>S</code></td>\n<td>PyBytesObject *</td>\n<td>python 的 bytes 对象</td>\n</tr>\n<tr>\n<td><code>Y</code></td>\n<td>PyByteArrayObject *</td>\n<td>Python 的 bytearray 对象</td>\n</tr>\n<tr>\n<td><code>b</code></td>\n<td>int</td>\n<td>无符号整数</td>\n</tr>\n<tr>\n<td><code>B</code></td>\n<td>int</td>\n<td>无符号整数且不进行溢出检查</td>\n</tr>\n<tr>\n<td><code>h</code></td>\n<td>int</td>\n<td>短整型</td>\n</tr>\n<tr>\n<td><code>H</code></td>\n<td>int</td>\n<td>不进行溢出检查的短整型</td>\n</tr>\n<tr>\n<td><code>i</code></td>\n<td>int</td>\n<td>正常整数</td>\n</tr>\n<tr>\n<td><code>l</code></td>\n<td>long int</td>\n<td>C 的长整形</td>\n</tr>\n<tr>\n<td><code>c</code></td>\n<td>char</td>\n<td>字符</td>\n</tr>\n<tr>\n<td><code>d</code></td>\n<td>double</td>\n<td>双精度浮点</td>\n</tr>\n<tr>\n<td><code>f</code></td>\n<td>float</td>\n<td>单精度浮点</td>\n</tr>\n<tr>\n<td><code>p</code></td>\n<td>bool</td>\n<td>bool 类型本质上还是 int</td>\n</tr>\n<tr>\n<td><code>D</code></td>\n<td>Py_complex *</td>\n<td>复数</td>\n</tr>\n<tr>\n<td><code>(...)</code></td>\n<td>tuple</td>\n<td>序列</td>\n</tr>\n<tr>\n<td><code>[...]</code></td>\n<td>list</td>\n<td>列表</td>\n</tr>\n<tr>\n<td><code>&#123;...&#125;</code></td>\n<td>dict</td>\n<td>字典</td>\n</tr>\n<tr>\n<td><code>O</code></td>\n<td>PyObject*</td>\n<td>Python 对象，不修改其引用计数</td>\n</tr>\n<tr>\n<td><code>O&amp;</code></td>\n<td>convert+void*</td>\n<td>将 Python 对象转为 C。 <code>C-obj = converter(py-obj, O&amp;);</code></td>\n</tr>\n<tr>\n<td><code>\\|</code></td>\n<td></td>\n<td>表示后续参数是可选的 i|s :  <code>一个整数，一个字符串。字符串可选</code></td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td></td>\n<td>表示后续参数仅是关键字</td>\n</tr>\n<tr>\n<td><code>:</code></td>\n<td></td>\n<td>格式单位列表到此结束；在错误消息中使用冒号后的字符串作为函数名</td>\n</tr>\n<tr>\n<td><code>;</code></td>\n<td></td>\n<td>格式单位列表到此结束；分号后的字符串用作错误消息。 <code>:</code>  和 <code>;</code>  相互排斥。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"exmaple\"><a class=\"anchor\" href=\"#exmaple\">#</a> exmaple：</h4>\n<h5 id=\"定义python的c扩展\"><a class=\"anchor\" href=\"#定义python的c扩展\">#</a> 定义 Python 的 C 扩展</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>ccore<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Python.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> PyObject<span class=\"token operator\">*</span> <span class=\"token function\">ccore_calc</span><span class=\"token punctuation\">(</span>PyObject<span class=\"token operator\">*</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyMethodDef</span> module_methods<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>PyCFunction<span class=\"token punctuation\">)</span>ccore_calc<span class=\"token punctuation\">,</span> METH_NOARGS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"这是一个简单测测试\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyModuleDef</span> modulemethod <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  PyModuleDef_HEAD_INIT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token string\">\"ccore\"</span><span class=\"token punctuation\">,</span>           <span class=\"token comment\">/* name of module */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token string\">\"A sample module\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* Doc string (may be NULL) */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">/* Size of per-interpreter state or -1 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  module_methods       <span class=\"token comment\">/* Method table */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>PyMODINIT_FUNC <span class=\"token function\">PyInit_ccore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">PyModule_Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>modulemethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>setup<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> distutils<span class=\"token punctuation\">.</span>core <span class=\"token keyword\">import</span> setup</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> distutils<span class=\"token punctuation\">.</span>extension <span class=\"token keyword\">import</span> Extension</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>setup<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Py_ccore'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      version<span class=\"token operator\">=</span><span class=\"token string\">'1.0'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      ext_modules<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>Extension<span class=\"token punctuation\">(</span><span class=\"token string\">'ccore'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ccore.c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"构建指令\"><a class=\"anchor\" href=\"#构建指令\">#</a> 构建指令</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python setup.py <span class=\"token function\">install</span></pre></td></tr></table></figure><h5 id=\"调用python的c扩展\"><a class=\"anchor\" href=\"#调用python的c扩展\">#</a> 调用 Python 的 C 扩展</h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ccore</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ccore<span class=\"token punctuation\">.</span>calc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Out<span class=\"token punctuation\">:</span><span class=\"token number\">100</span></pre></td></tr></table></figure><h3 id=\"定义-pymethoddef\"><a class=\"anchor\" href=\"#定义-pymethoddef\">#</a> 定义 PyMethodDef</h3>\n<ul>\n<li>C 层的定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyMethodDef</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ml_name<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   PyCFunction ml_meth<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">int</span> ml_flags<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ml_doc<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>ml_name</code></td>\n<td style=\"text-align:left\">const char *</td>\n<td style=\"text-align:left\">函数名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ml_meth</code></td>\n<td style=\"text-align:left\">PyCFunction</td>\n<td style=\"text-align:left\">函数指针</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ml_flags</code></td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">参数类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ml_doc</code></td>\n<td style=\"text-align:left\">const char *</td>\n<td style=\"text-align:left\">函数说明</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"c-层的使用\"><a class=\"anchor\" href=\"#c-层的使用\">#</a> C 层的使用：</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyMethodDef</span> module_methods<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>PyCFunction<span class=\"token punctuation\">)</span>ccore_calc<span class=\"token punctuation\">,</span> METH_NOARGS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"func.__doc__\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    # <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>等价于定义了一个如下结构的函数，不包含实现和返回值</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"func.__doc__\"\"\"</span>\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h3 id=\"定义-pymoduledef\"><a class=\"anchor\" href=\"#定义-pymoduledef\">#</a> 定义 PyModuleDef</h3>\n<ul>\n<li>C 层的定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyModuleDef</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyModuleDef_HEAD_INIT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   \t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>m_name<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>m_doc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   \tPy_ssize_t m_size<span class=\"token punctuation\">;</span> <span class=\"token comment\">//。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   \tPyMethodDef <span class=\"token operator\">*</span> m_methods<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>m_base</code></td>\n<td style=\"text-align:left\">PyModuleDef_Base</td>\n<td style=\"text-align:left\">始终将此成员初始化为 <code>PyModuleDef_HEAD_INIT</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>m_name</code></td>\n<td style=\"text-align:left\">const char *</td>\n<td style=\"text-align:left\">模块名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>m_doc</code></td>\n<td style=\"text-align:left\">const char *</td>\n<td style=\"text-align:left\">模块说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>m_size</code></td>\n<td style=\"text-align:left\">Py_ssize_t</td>\n<td style=\"text-align:left\">设置存储模块， -1 表示全局状态，不支持子解释器。<br />更多详细信息，请参见<a href=\"https://www.python.org/dev/peps/pep-3121\"><strong> PEP 3121</strong></a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>m_methods</code></td>\n<td style=\"text-align:left\">PyMethodDef *</td>\n<td style=\"text-align:left\">函数列表指针</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"c-层的使用-2\"><a class=\"anchor\" href=\"#c-层的使用-2\">#</a> C 层的使用：</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyModuleDef</span> modulemethod <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  PyModuleDef_HEAD_INIT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token string\">\"ccore\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token string\">\"A sample module\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>     </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  module_methods       </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>等价于定义了一个如下结构的模块</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>ccore<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"A sample module\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"func.__doc__\"\"\"</span>\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h3 id=\"定义初始化模块函数\"><a class=\"anchor\" href=\"#定义初始化模块函数\">#</a> 定义初始化模块函数</h3>\n<p>如下代码定义模块的创建</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PyMODINIT_FUNC <span class=\"token function\">PyInit_ccore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// PyInit_模块名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">PyModule_Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>modulemethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// modulemethod is PyModuleDef obj</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考资料：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9jLWFwaS9zdHJ1Y3R1cmVzLmh0bWw/aGlnaGxpZ2h0PW1ldGhfI01FVEhfTk9BUkdT\">Python 官方手册</span></p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/task-list/plan-table/",
            "url": "https://allengx.gitee.io/computer-science/task-list/plan-table/",
            "title": "计划表",
            "date_published": "2020-10-08T07:10:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>个人计划，希望能够顺利完成 /(ㄒ o ㄒ)/ <s>咕咕咕</s></p>\n</div>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> 阅读《python 源码剖析》</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\" /><label for=\"cbx_1\"> 阅读《微服务架构与实践》</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\"> python「工匠」</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\" /><label for=\"cbx_3\"> go-mrico 代码研读</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\" /><label for=\"cbx_4\"> 了解 Python 热更新机制</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_5\"> 掌握 Python 的 C 扩展编写</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\" /><label for=\"cbx_6\"> 完成基于 Pyside2 的导表工具</label></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "任务清单"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/python/Python2-Source-Code/",
            "url": "https://allengx.gitee.io/computer-science/study/python/Python2-Source-Code/",
            "title": "python2源码剖析",
            "date_published": "2020-10-08T06:49:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"python源码阅读\"><a class=\"anchor\" href=\"#python源码阅读\">#</a> python 源码阅读</h1>\n<h2 id=\"数据类型分析\"><a class=\"anchor\" href=\"#数据类型分析\">#</a> 数据类型分析</h2>\n<h3 id=\"pyintobjectpython中的int类型\"><a class=\"anchor\" href=\"#pyintobjectpython中的int类型\">#</a> PyIntObject——python 中的 int 类型</h3>\n<ul>\n<li>python 计算两个整数 ()\n<ul>\n<li>出现溢出后会转换成 long 类型（无限大整数）。</li>\n</ul>\n</li>\n<li>python 整数缓存\n<ul>\n<li><code>[-5~256]</code>  的整数。</li>\n<li>提供多个缓存块，每个能够存放 <code>(100/8)</code>  数量的 int 类型。</li>\n<li>控制这些块的结构是一个单向链表（指向每个块中第一个违背使用的内存块）。</li>\n<li>申请新的缓存块采用头插法。</li>\n<li>空闲地址指针 (free_list) 会串起所有缓存块的地址空间 (单链表)。</li>\n<li>对象释放后会以头插的形式再次加入到 (free_list)。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>隐患：py2.5 之前的版本（之后的不清楚），malloc 出来的缓存块没有一个回收机制，即：创建足够多的对象（malloc 足够多的缓存块）会导致另一种意义上的内存被榨干。</p>\n</blockquote>\n<h3 id=\"pystringobjectpython中的string类型\"><a class=\"anchor\" href=\"#pystringobjectpython中的string类型\">#</a> PyStringObject——python 中的 string 类型</h3>\n<ul>\n<li>字符串的 hash\n<ul>\n<li>初始为 -1。</li>\n<li>字符串 hash 采用的算法不够理想，性能消耗较大，会对每个字符进行  <code>乘</code>  操作。</li>\n</ul>\n</li>\n<li>字符串的特性\n<ul>\n<li>长度不能超过  <code>(2**32)/2</code> ，大概是 21 亿多位，2GB 左右大小。超过则不会创建。</li>\n</ul>\n</li>\n<li>intern 内存共享\n<ul>\n<li>针对相同字符串，<s>不重复创建</s>（其实还是会创建，再销毁），它们共享同一块数据。</li>\n<li>只会生效在  <code>PyStringObject</code>  对象，其子类不会生效。</li>\n<li>创建新对象时会判断是否已经存在，如果已经存在了，会删除原来创建的对象，然后修改其指针指向。</li>\n</ul>\n</li>\n<li>字符缓冲区\n<ul>\n<li>针对单个字符进行缓存，功能类似整数缓存，长度为 (2**8)——256 个字符。</li>\n<li>初始阶段为空，每次创键新的字符，且不再缓存区内时，进行 intern 操作后，加入进去。</li>\n<li><code>+</code>  操作在 string 中执行效率非常低下（string 对象本身是不可变长类型），推荐使用 <code>join</code>  来一次处理多个。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"pylistobjectpython中的list类型\"><a class=\"anchor\" href=\"#pylistobjectpython中的list类型\">#</a> PyListObject——python 中的 list 类型</h3>\n<ul>\n<li>形如 c++ 的 vector，本质还是一个数组，分配空间时，多分配一部分，用于动态扩充。</li>\n<li>管理 list 的指针同样也有一块缓存区，可存储数量是 80 个。如果已经全部占用，则会通过 <code>GC_NEW</code>  的方式创建新的。</li>\n<li>容量调整。在容量不在限制范围内（1/2 容量～容量上限之间）。会进行（扩容 / 缩容）操作，调整方法为： <code>newsize/8 + (newsize &lt;9 ? 3:6) + newsize</code></li>\n<li>负值索引的秘诀就在，获取下标的时候针对负数执行  <code>+size</code>  操作</li>\n<li>insert 对于 list 来说性能消耗要比 append 高，因为需要后移 insert 之后的元素。</li>\n<li>对象销毁后会尝试加入缓存区，如果缓冲区满了则释放掉。但是对象管理的内存会被归还。</li>\n<li>销毁后放回缓冲区的对象会替换原来正在被使用的缓存对象，但是这并不影响。因为被剔除的对象正在被其他对象使用，所以不会被释放。只是不被缓存区管理了。</li>\n</ul>\n<h3 id=\"pydictobjectpython中的dict类型\"><a class=\"anchor\" href=\"#pydictobjectpython中的dict类型\">#</a> PyDictObject——python 中的 dict 类型</h3>\n<ul>\n<li>数据结构是 hashtable，采用开放定址法进行冲突解决（二次探测）。</li>\n<li>伪删除，字典 key 和 value 被删除时，会暂时保留 key，并且赋值为 dummy，保证能够继续通过探测链找到后续节点。但是也可以对处于 dummy 的 key 进行赋值。相当于占着坑位。</li>\n<li>dict 的 entry 的三种状态\n<ul>\n<li>active（key，val 都不为 null）</li>\n<li>dummy（key 为 dummy，val 为 null）</li>\n<li>unused（key，val 都是 null）</li>\n</ul>\n</li>\n<li>hashtable 的最初大小为 <code>8</code> ，dict 对象的创建同样使用了缓冲池，方式等同于 List。缓存 80 个。</li>\n<li>hashtable 的映射函数是直接用某个对象的 hash 值和 dict 的大小做 <code>与</code> 操作保证结果小于等于 dict 大小。</li>\n<li>判断 key 是否存在需要判断 key 的地址是否相同，不相同再去判断 值的 hash 是否相同，相同再去进行对应的比较。</li>\n<li>hash 匹配失败后的再次 hash 策略：\n<ul>\n<li>上一个 entry 的 hash 与上容器大小为  <code>i</code></li>\n<li>第一个 entry 的 hash 为  <code>k</code></li>\n<li>冲突次数  <code>s</code></li>\n<li>dict 容器大小为  <code>m</code></li>\n<li>下一个地址公式： <code>（i * 4 + i + k / （4 * s * 常量） + 1） &amp; m</code></li>\n</ul>\n</li>\n<li>变更容量操作：\n<ul>\n<li>装载率： <code>active和dummy的数量 / 总容量</code></li>\n<li>当执行插入操作时，有 Unused 或者 Dummy 对象被填充，并且插入后装载率≥2/3 会进行扩容。</li>\n<li>变容方式 当前  <code>active的节点数*(active的节点数 &gt; 50000 ? 2 : 4)</code> ，如果大于 50000 变容为原来 active 节点的 2 倍。否则变容为 4 倍。</li>\n<li>上面的规则只是期望的变容值，实际结果还需要再次计算，计算方式为 8 的指数增长≥期望变容值。例如期望变容 20，那么最终扩容值会是  <code>8*2*2 = 32</code></li>\n<li>判断变容后和之前容量是否为 8，是则不需要变容。否则，分配新内存，把原来的 active 数据插入到新的内存中。释放原有内存。</li>\n<li>触发缩容的情况：在 active 节点较少，dummy 节点较多，进行插入操作，使得变容条件成立时，触发缩容。python2.7 可能不生效，3.7 可以。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"python的编译细节\"><a class=\"anchor\" href=\"#python的编译细节\">#</a> python 的编译细节</h2>\n<h3 id=\"pyc文件\"><a class=\"anchor\" href=\"#pyc文件\">#</a> pyc 文件</h3>\n<ul>\n<li>运行时的 python 中，字节码会被存储在 PyCodeObject 中。如果一个代码块被其他模块引用（import），python 会首先去寻找对应的 pyc 文件或者 dll 文件，如果没有则会把字节码内容编译到 pyc 内，再 import，pyc 文件。本质上 pyc 文件是 python 运行时对 PyCodeObject 的一个承载。</li>\n<li>pyc 文件保存的内容都是以二进制的形式。记录内容：\n<ul>\n<li>magic number 用于版本控制</li>\n<li>time 时间戳</li>\n<li>PyCodeObject 对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"pyframeobject对象\"><a class=\"anchor\" href=\"#pyframeobject对象\">#</a> PyFrameObject 对象</h3>\n<ul>\n<li>运行时的 python 内部对象。可以理解为 python 中一段 code block 所生成的对象。</li>\n<li>维护了当前 code block 的全部内容：\n<ul>\n<li>loacl: 本地变量。</li>\n<li>global: 全局变量。</li>\n<li>builtin: 内建变量。</li>\n<li>f_back: 用于返回上一层的指针。</li>\n</ul>\n</li>\n<li>维护 PyFrameObject 的「栈」空间:\n<ul>\n<li>f_valuestack: 指向栈的顶部。</li>\n<li>f_stacktop: 指向当前栈顶。</li>\n<li>f_localsplus: 栈起始空间（栈顶等于栈起始空间 + extras）</li>\n<li>extras: 一些指针等额外的空间。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"python控制流\"><a class=\"anchor\" href=\"#python控制流\">#</a> python 控制流</h2>\n<ul>\n<li>\n<p><code>if</code>  控制流 ——compare 操作</p>\n<ul>\n<li>if 控制流的跳转操作只能向前。</li>\n<li>原理：通过  <code>JUMP_IF_FALSE</code>  和  <code>JUMP_IF_TRUE</code>  和  <code>JUMP_FORWARD</code>  在不同代码片段实现跳转。</li>\n<li>if 控制流通常涉及到比较操作。python 的比较分为  <code>quick_compare</code>  和  <code>slow_compare</code> ，两者速度相差甚远\n<ul>\n<li>快比较适用于两个都是整数类型</li>\n<li>其他情况下会执行慢比较</li>\n</ul>\n</li>\n<li>常见的比较类型：\n<ul>\n<li><code>&lt;</code></li>\n<li><code>&gt;</code></li>\n<li><code>==( is)</code></li>\n<li><code>!=</code></li>\n<li><code>&gt;=</code></li>\n<li><code>&lt;=</code></li>\n<li><code>in</code></li>\n</ul>\n</li>\n<li>慢比较时，如果两个对象类型相同，且不是自定义对象，那么 python 会使用  <code>tp_richcompare</code>  比较器进行比较，如果没有定义  <code>tp_richcompare</code>  或者不满足前面的条件，则会使用用户自定义的  <code>tp_compare</code>  进行比较。如果上述两个比较器均未实现，python 还会尝试调用  <code>do_richcmp</code>  进行最后的垂死挣扎，这也是慢比较低下的原因。</li>\n<li>goto 指令：\n<ul>\n<li>JUMP_FORWARD：跳转到  <code>if else</code>  语句的最终结尾</li>\n<li>JUMP_IF_FALSE：跳转到对应 false 的逻辑处</li>\n<li>JUMP_IF_TRUE：跳转到对应 true 的逻辑处</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>for</code>  控制流</p>\n<ul>\n<li>for 控制流的跳转操作可以向前也可以回退。</li>\n<li>原理：for 语句会把全部对象顺序压入栈中，并把对象的迭代器设置为栈顶，然后通过 SET_TOP 跳转到栈顶，根据迭代器的 tp_iternext 找到对应的元素，进行迭代。</li>\n<li>goto 指令：\n<ul>\n<li>JUMP_ABSOLUTE：回到 FOR_ITER 指令位置，重新开始迭代下一个对象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>switch case</code>  控制流</p>\n<ul>\n<li>没有了</li>\n</ul>\n</li>\n<li>\n<p><code>while</code>  控制流</p>\n<ul>\n<li>while 和 for 控制流类似。</li>\n</ul>\n</li>\n<li>\n<p><code>exception</code>  控制流</p>\n<ul>\n<li>异常控制流主要是处理 python 程序在执行过程中如何抛出和捕获异常的控制流。</li>\n<li>原理：程序执行过程中会构建一个调用栈，当执行到某个函数触发了异常，程序将通过  <code>PyEval_ExalFrameEx</code>  函数进行处理，如果没有检测到 except 时， 函数的状态会从  <code>WHY_NOT</code>  转变为  <code>WHY_EXCEPTION</code> ，并返回 NULL，同时调整栈指针指向上一层。</li>\n<li>异常控制流程图：</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200927160601568.png\" alt=\"image-20200927160601568\" /></p>\n<ul>\n<li><code>PyEval_ExalFrameEx</code>  函数伪代码：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PyObject<span class=\"token operator\">*</span> <span class=\"token function\">PyEval_EvalFrameEx</span><span class=\"token punctuation\">(</span>PyFrameObject <span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 非正常执行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>why <span class=\"token operator\">!=</span> WHY_NOT <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token operator\">-></span>f_iblock <span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            PyTryBlock <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token function\">PyFrame_BlockPop</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 有 finally 或者 except 语句</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>b_type <span class=\"token operator\">==</span> SETUP_FINALLY <span class=\"token operator\">||</span> b<span class=\"token operator\">-></span>b_type <span class=\"token operator\">==</span> SETUP_EXCEPT <span class=\"token operator\">&amp;&amp;</span> why <span class=\"token operator\">==</span> WHY_EXCEPTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                 <span class=\"token comment\">// 出现异常，先把异常信息取出来，如果后续没有 except，需要保留现场信息并返回给上一级。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>why <span class=\"token operator\">==</span> WHY_EXCEPTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    PyObject <span class=\"token operator\">*</span>exc<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>val<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token function\">PyErr_Fetch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>exc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token function\">PUSH</span><span class=\"token punctuation\">(</span>tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token function\">PUSH</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token function\">PUSH</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 设置为正常运转，并调用 except 或 finally</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">//except 执行后会继续在当前栈帧运行（异常被解决）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 无 except 的情况下，finally 执行后会展开到上一层（异常未被解决）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                why <span class=\"token operator\">=</span> WHY_NOT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">JUMPTO</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>b_handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>why <span class=\"token operator\">!=</span> WHY_NOT<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 不存在异常处理，展开堆栈，抛给上一层</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>why <span class=\"token operator\">!=</span> WHY_RETURN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        retval <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 通知前一栈帧有异常</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>    </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token comment\">// 设置活动栈帧为当前栈帧的上一个，完成栈帧回退</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   tstate<span class=\"token operator\">-></span>frame <span class=\"token operator\">=</span> f<span class=\"token operator\">-></span>f_back<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token keyword\">return</span> retval</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 示例 h () -> g () ->f () -> 1/0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    g<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>h<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200927145147290.png\" alt=\"image-20200927145147290\" /></p>\n<ul>\n<li><code>try catch</code>  控制流</li>\n</ul>\n<h2 id=\"python函数机制\"><a class=\"anchor\" href=\"#python函数机制\">#</a> python 函数机制</h2>\n<h3 id=\"pyfunctionobject\"><a class=\"anchor\" href=\"#pyfunctionobject\">#</a> PyFunctionObject</h3>\n<p>PyFunctionObject 对象创建后，随之而来的会创建 PyFrameObject（栈帧） 对象，并为其开辟一块内存空间用于存放函数内用到的各种变量。PyCodeObject 对象则是 PyFunctionObject 对象的静态形式，不保留函数运行时的上下文，只存储基本的信息，而 PyFunctionObject 对象则在程序运行时产生。基本结构如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_code<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 对应函数编译后的 PyCodeObject 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_globals<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 函数运行时 global 名字空间</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_defaults<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 默认参数（tuple 或 NULL）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_closure<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// NULL or tuple of cell objects, 用于实现 closure（闭包）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_doc<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 函数文档</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_name<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 函数名称，函数的 __name__属性</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_dict<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 函数的 __dict__ 属性</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_weakreflist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_module<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 函数的 __module__, 可以是任何对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> PyFunctionObject<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>快速通道：python 为函数的执行提供了一个快速通道，常规的函数  <code>def func(arg1,arg2)</code>  可以通过快速通道执行，而 pythonic 形式的函数  <code>def func(*args,**kwargs)</code>  则无法通过快速通道执行。\n<ul>\n<li>一般位置参数：（√）</li>\n<li>其他：（×）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数参数实现\"><a class=\"anchor\" href=\"#函数参数实现\">#</a> 函数参数实现</h3>\n<h4 id=\"参数类别\"><a class=\"anchor\" href=\"#参数类别\">#</a> 参数类别</h4>\n<ul>\n<li>位置参数：\n<ul>\n<li>一般位置参数： <code>def func(arg1,arg2)</code></li>\n<li>默认位置参数： <code>def func(arg1=1,arg2=2)</code></li>\n</ul>\n</li>\n<li>键参数： <code>func(arg1=1,arg2=2)</code></li>\n<li>扩展位置参数： <code>func(*args)</code></li>\n<li>扩展键参数： <code>func(**kwargs)</code></li>\n</ul>\n<h4 id=\"参数数量\"><a class=\"anchor\" href=\"#参数数量\">#</a> 参数数量</h4>\n<ul>\n<li>CALL_FUNCTION：通过 2 个字节标识参数数量，高字节表示键参数数量，低字节表示位置参数数量。所以函数最多可以有 256 个位置参数和 256 个键参数。值得注意，该问题在 python3.7 之后已经没有了。唯一限制数量的因素：\n<ul>\n<li><code>list</code> ， <code>tuple</code>  和  <code>dict</code>  仅受限于  <code>sys.maxsize</code></li>\n<li><code>*args</code>  和  <code>**kwargs</code>  仅受限于  <code>sys.maxint</code></li>\n<li><code>*args</code>  和  <code>**kwargs</code>   都只占用一个参数数量，在编译时会被处理成  <code>PyListObject</code>  和  <code>PyDictObject</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"参数位置\"><a class=\"anchor\" href=\"#参数位置\">#</a> 参数位置</h4>\n<p>函数参数和运行时栈的空间，在逻辑上是分离的，参数会被存放在  <code>f_localsplus</code>  中。而 PyFrameObject 则保存了  <code>f_localsplus</code>  的栈顶指针。</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200928174020983.png\" alt=\"image-20200928174020983\" /></p>\n<h4 id=\"扩展参数\"><a class=\"anchor\" href=\"#扩展参数\">#</a> 扩展参数</h4>\n<p>扩展参数申明后，会提供一个标记，用于函数读取参数时区分是否需要处理扩展参数：</p>\n<ul>\n<li>扩展位置参数：CO_VARARGS</li>\n<li>扩展键参数：CO_VARKEYWORDS</li>\n</ul>\n<h3 id=\"函数内变量\"><a class=\"anchor\" href=\"#函数内变量\">#</a> 函数内变量</h3>\n<p>函数内的变量和函数参数类似，都是存放在  <code>f_localsplus</code>   中运行时栈前面的一段内存空间中</p>\n<h3 id=\"嵌套-闭包-装饰器\"><a class=\"anchor\" href=\"#嵌套-闭包-装饰器\">#</a> 嵌套、闭包、装饰器</h3>\n<h4 id=\"嵌套函数\"><a class=\"anchor\" href=\"#嵌套函数\">#</a> 嵌套函数</h4>\n<ul>\n<li>co_cellvars：通常是一个 tuple，保存嵌套作用域中使用到的变量名集合，存放在  <code>f_localsplus</code>   的  <code>内嵌对象</code>  中。</li>\n<li>co_freevars：通常是一个 tuple，保存了使用外层作用域的变量名集合，存放在  <code>f_localsplus</code>   的  <code>外引对象</code>  中。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">in</span></pre></td></tr></table></figure><p>该嵌套函数中  <code>out</code>  函数中的  <code>co_cellvars</code>  内会保存  <code>i</code>  变量，同理  <code>in</code>  函数中的  <code>co_freevars</code>  内也会保存  <code>i</code>  变量。</p>\n<h4 id=\"闭包closure\"><a class=\"anchor\" href=\"#闭包closure\">#</a> 闭包（closure）</h4>\n<p>当内层函数使用外层函数的变量的这种形式被称之为闭包，闭包的实现原理大致可以理解为：</p>\n<ul>\n<li>外层函数在执行过程中，会把自身运行栈中的变量以  <code>ob_ref</code>  的形式绑定到  <code>co_cellvars</code>  的 tuple 当中。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200928212157054.png\" alt=\"image-20200928212157054\" /></li>\n<li>在需要向内层传递时，首先会创建一个内层函数的对象，存储在局部变量上 inner_func，并把  <code>co_cellvars</code>  的 tuple 链接到  inner_func 对象的 tuple 上。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200928212220150.png\" alt=\"image-20200928212220150\" /></p>\n<ul>\n<li>最终，在 inner_func 对象内，解开传递进来的  <code>co_cellvars</code>  的 tuple 并重新绑定到自己的  <code>co_freevars</code>  的 tuple 中，便完成了整个闭包的参数传递过程</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200928213023716.png\" alt=\"image-20200928213023716\" /></p>\n<h4 id=\"装饰器decorator\"><a class=\"anchor\" href=\"#装饰器decorator\">#</a> 装饰器（decorator）</h4>\n<p>装饰器本质上就是闭包的一个包装方式，原理和 closure 类似。</p>\n<h2 id=\"python类机制\"><a class=\"anchor\" href=\"#python类机制\">#</a> python 类机制</h2>\n<ul>\n<li>\n<p>Python 中，任何对象都有一个  <code>type</code> ，可以通过  <code>__class__</code>  属性获得，任何一个  <code>instance</code>  对象的  <code>type</code>  都是一个  <code>class</code>  对象。任何一个  <code>class</code>  对象的 type 都是一个 metaclass 对象。大多数情况下  <code>metaclass</code>  对象通常是 <code>&lt;type 'type'&gt;</code> 。</p>\n</li>\n<li>\n<p>Python 中，任何 class 对象都直接或间接与  <code>&lt;type 'object'&gt;</code>  存在  <code>is-kind-of</code> （基类与子类） 关系，包括 <code>&lt;type 'type'&gt;</code> 。</p>\n</li>\n</ul>\n<h3 id=\"从-type-对象到-class-对象\"><a class=\"anchor\" href=\"#从-type-对象到-class-对象\">#</a> 从 type 对象到 class 对象</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInt</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__add__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>__add__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201005115151224.png\" alt=\"image-20201005115151224\" /></p>\n<h4 id=\"可调用性callable\"><a class=\"anchor\" href=\"#可调用性callable\">#</a> 可调用性（callable)</h4>\n<p>只要一个对象实现了  <code>__call__</code>  操作，本质是是 Python 内部的 PyTypeObject 中的  <code>tp_call</code>  不为空，那就其就是一个可调用对象</p>\n<h4 id=\"step1-处理基类class__base__和-type-信息\"><a class=\"anchor\" href=\"#step1-处理基类class__base__和-type-信息\">#</a> Step.1 处理基类 ( <code>class.__base__</code> ) 和 Type 信息</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>PyTypObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>dict <span class=\"token operator\">*</span>bases<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PyTypeObject <span class=\"token operator\">*</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Py_ssize_t i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//「1」：尝试获得 type 的 tp_base 中的指定基类。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    base <span class=\"token operator\">=</span> type <span class=\"token operator\">-></span>tp_base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> type <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>PyBaseObject_Type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        base <span class=\"token operator\">=</span> type<span class=\"token operator\">-></span>tp_base <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>PyBaseObject_Type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//「2」：没有初始化基类的话，初始化基类</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">&amp;&amp;</span> base<span class=\"token operator\">-></span>tp_dict <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//「3」：设置 type 信息</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">-></span>ob_type <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> base <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        type<span class=\"token operator\">-></span>ob_type <span class=\"token operator\">=</span> base<span class=\"token operator\">-></span>ob_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>部分内置函数的 tp_base 信息，NULL 的话则默认为  <code>&lt;type 'object'&gt;(PyBaseObject_Type)</code></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>class 对象</th>\n<th>基类信息</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PyType_Type</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>PyInt_Type</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>PyBool_Type</td>\n<td>&amp;PyInt_Type</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"step2-处理基类列表class-__bases__\"><a class=\"anchor\" href=\"#step2-处理基类列表class-__bases__\">#</a> Step.2 处理基类列表 ( <code>class .__bases__</code> )</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>PyTypObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token comment\">//「4」： 处理基类列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    bases <span class=\"token operator\">=</span> type<span class=\"token operator\">-></span>tp_bases<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bases <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            bases <span class=\"token operator\">=</span> <span class=\"token function\">PyTuple_New</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            bases <span class=\"token operator\">=</span> <span class=\"token function\">PyTuple_Pack</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        type<span class=\"token operator\">-></span>tp_bases <span class=\"token operator\">=</span> bases<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"step3-填充-tp_dictclass-__dict__\"><a class=\"anchor\" href=\"#step3-填充-tp_dictclass-__dict__\">#</a> Step.3 填充 tp_dict ( <code>class .__dict__</code> )</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>PyTypObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token comment\">//「5」： 设定 tp_dict</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dict <span class=\"token operator\">=</span> type<span class=\"token operator\">-></span>tp_dict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dict <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        dict <span class=\"token operator\">=</span> <span class=\"token function\">PyDict_New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        type<span class=\"token operator\">-></span>tp_dict <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//「6」： 将与 type 相关的 descriptor 加入到 tp_dict 中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">add_operation</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">-></span>tp_methods <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">add_methods</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> type<span class=\"token operator\">-></span>tp_methods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">-></span>tp_members <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">add_members</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> type<span class=\"token operator\">-></span>tp_members<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">-></span>tp_getset <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">add_getset</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> type<span class=\"token operator\">-></span>tp_getset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"step4-对-slot-排序并关联到-descriptor\"><a class=\"anchor\" href=\"#step4-对-slot-排序并关联到-descriptor\">#</a> Step.4 对 slot 排序并关联到 descriptor</h4>\n<ul>\n<li>\n<p>每个  <code>descriptor</code>  对应与一个  <code>slot</code> 。一个  <code>slot</code>  对应一个  <code>func</code> 。而每个函数又通过函数名和  <code>descriptor</code>  指针被关联在  <code>PyTypeObject</code>  对象中的  <code>tp_dict</code>  内。</p>\n</li>\n<li>\n<p>如果出现一个函数名对应多个  <code>slot</code>  的情况下时。 <code>slot</code>  排序可以解决最终调用哪个的问题。排序规则则是根据  <code>offset</code>  大小来决定的，  <code>offset</code>  小的优先级更高。 例如两个同名函数，一个在  <code>PyHeadObject</code>  的  <code>PyNumberMethods</code>  结构中，另一个则在  <code>PyMappingMethods</code>  中，那么  <code>PyNumberMethods</code>  中的将被调用。</p>\n</li>\n<li>\n<p>调用函数时，会先在  <code>PyTypeObject</code>  的  <code>tp_dict</code>  内进行查找，根据函数名找到对应的  <code>descriptor</code>  ，并调用  <code>descriptor</code>  的  <code>wrapperdescr_call</code>  调用  <code>slot</code>   所关联的  <code>func</code></p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201005144210081.png\" alt=\"image-20201005144210081\" /></p>\n<blockquote>\n<p>slot 结构</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">slotdef</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相对于 PyHeadObject 的偏移量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>function<span class=\"token punctuation\">;</span> <span class=\"token comment\">//slot 的 function</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    wrapperfunc wrapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>doc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>name_strobj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>descriptor  结构</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyWrapperDescrObject</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyObject_HEAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PyTypeObject <span class=\"token operator\">*</span>d_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>d_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">slotdef</span> <span class=\"token operator\">*</span>d_base<span class=\"token punctuation\">;</span> <span class=\"token comment\">//slot 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>d_wrapped<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关联的函数指针</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>PyHeadTypeObject 结构</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyHeadObject</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyTypeObject ht_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PyNumberMethods as_number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PyMappingMethods as_mapping<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PySequenceMethods as_sequence<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PyBufferProcs as_buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>ht_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ht_slots<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"step5-确定mro列表\"><a class=\"anchor\" href=\"#step5-确定mro列表\">#</a> Step.5 确定 mro 列表</h3>\n<p>mro 的 C3 超类线性化算法：<br />\n算法思想：</p>\n<ul>\n<li>对象父类的集合  <code>「L(自己)」</code>  可以视作 <code>「自己」</code>  + 每个 <code>「L(父类)」</code>  +  <code>「父类集合」</code></li>\n<li>在存在多个父类合并的情况下，优先提取出第一个集合中的第一个元素与其他集合进行比对，如果其同时出现在其他集合的 <code>非第一的位置</code> 则跳至下一个集合重复上述操作。否则则把该元素添加至父类列表，并从其余所有集合中移除，完成后再次从第一个集合提取第一个元素重复上述内容。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(16).png\" alt=\"773d44c1b5451bd76a106d69574a2fdf.png\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>L<span class=\"token punctuation\">(</span>O<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>L<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>L<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>L<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>L<span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>L<span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">]</span>      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>L<span class=\"token punctuation\">(</span>K2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K2<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>L<span class=\"token punctuation\">(</span>K3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K3<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token operator\">+</span>L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>K3<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>K2<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K2<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K3<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">,</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">,</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span>       </pre></td></tr><tr><td data-num=\"42\"></td><td><pre> L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">,</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"step6-继承基类操作\"><a class=\"anchor\" href=\"#step6-继承基类操作\">#</a> Step.6 继承基类操作</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>PyTypObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//「7」： 拷贝基类操作到子类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    bases <span class=\"token operator\">=</span> type<span class=\"token operator\">-></span>tp_mro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token function\">PyTuple_GET_SIZE</span><span class=\"token punctuation\">(</span>bases<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        PyObject <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span><span class=\"token function\">PyTuple_GET_ITEM</span><span class=\"token punctuation\">(</span>bases<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">inherit_slots</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PyTypeObject <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拷贝</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"step7-填充子类列表class__subclasses__\"><a class=\"anchor\" href=\"#step7-填充子类列表class__subclasses__\">#</a> Step.7 填充子类列表（ <code>class.__subclasses__()</code> ）</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>PyTypObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//「8」： 填充子类列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    bases <span class=\"token operator\">=</span> type<span class=\"token operator\">-></span>tp_mro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token function\">PyTuple_GET_SIZE</span><span class=\"token punctuation\">(</span>bases<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        PyObject <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span><span class=\"token function\">PyTuple_GET_ITEM</span><span class=\"token punctuation\">(</span>bases<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">add_subclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PyTypeObject <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 填充</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"自定义-class\"><a class=\"anchor\" href=\"#自定义-class\">#</a> 自定义 class</h3>\n<ul>\n<li>\n<p>创建 class 对象</p>\n<ul>\n<li>获取动态元信息 ——class 的动态属性（属性，函数）</li>\n<li>获取静态元信息 ——class 的类型，空间大小（通过查看  <code>_metaclass__</code>  属性来获取静态元信息，默认情况下是获取  <code>&lt;type 'type'&gt;</code>  的静态元信息）<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201005153723438.png\" alt=\"image-20201005153723438\" /></li>\n<li>用户自定义 class 对象和内置 class 对象的区别在于：\n<ul>\n<li>用户自定义对象的内存排列是<strong>连续</strong>的</li>\n<li>内置 class 对象的内存排列是<strong>分散</strong>的<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201005154812793.png\" alt=\"image-20201005154812793\" /></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>创建 class 对象的 instance</p>\n<ul>\n<li><code>instance = class.__new__(class, args, kwds)</code></li>\n<li><code>class.__init__(instance, args, kwds)</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"descriptor介绍\"><a class=\"anchor\" href=\"#descriptor介绍\">#</a> descriptor 介绍</h4>\n<p><code>descriptor</code>  像是一个连接属性名称和属性值的一个接口。提供一套访问属性的方法。外部通过  <code>descriptor</code>  来对属性进行访问。</p>\n<ul>\n<li>实现了  <code>__get__</code> 、 <code>__set__</code> 、 <code>__delete__</code>  函数的 obj 被称之为  <code>descriptor</code></li>\n<li><code>descriptor</code>  影响着  <code>class</code>  和  <code>instance</code>  对于属性的获取规则\n<ul>\n<li>有  <code>__get__</code>  和  <code>__set__</code>  的被称为  <code>data descriptor</code></li>\n<li>有  <code>__get__</code>  无  <code>__set__</code>  的被称为  <code>no data descriptor</code></li>\n</ul>\n</li>\n<li>属性选择的规则：\n<ul>\n<li>先  <code>instance</code>  的属性，后  <code>class</code>  的属性。</li>\n<li>如果  <code>instance</code>  和  <code>class</code>  中有同名属性，且  <code>class</code>  的属性是  <code>data descriptor</code>  ，那么会选择使用  <code>class</code>  的属性。</li>\n<li>当获取到的属性是一个  <code>descriptor</code>  的时候，如果其存在于  <code>class</code>   的  <code>tp_dict</code>  中会调用其  <code>__get__</code>  函数获取对应的属性值，如果其存在于  <code>instance</code>  的  <code>tp_dict</code>  中则不会调用其  <code>__get__</code>  属性。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"bound-method-和-unbound-method\"><a class=\"anchor\" href=\"#bound-method-和-unbound-method\">#</a> Bound Method 和 Unbound Method</h4>\n<p>两者的本质区别是一个函数的调用是否有默认参数 self。如果有，则在每次函数调用过程中，虚拟机会自动执行一次函数绑定，把 instance 和 self 进行关联。否则，需要程序自己手动传参。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 自动绑定</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>A<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 手动传参</span></pre></td></tr></table></figure><blockquote>\n<p>减少函数绑定的次数可以提高程序的执行效率</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>func <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>test <span class=\"token comment\">#绑定 1 次</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    a<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#绑定 1000 次</span></pre></td></tr></table></figure><h2 id=\"python运行环境初始化\"><a class=\"anchor\" href=\"#python运行环境初始化\">#</a> python 运行环境初始化</h2>\n<h3 id=\"初始化线程环境\"><a class=\"anchor\" href=\"#初始化线程环境\">#</a> 初始化线程环境</h3>\n<ul>\n<li>初始化 python 多进程</li>\n<li>初始化 python 多线程</li>\n</ul>\n<h4 id=\"进程结构\"><a class=\"anchor\" href=\"#进程结构\">#</a> 进程结构：</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 进程对象结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyInterpreterState</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_is</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_ts</span> <span class=\"token operator\">*</span>tstate_head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟线程集合</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>modules<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PyObject <span class=\"token operator\">*</span> sysdict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>builtins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"线程结构\"><a class=\"anchor\" href=\"#线程结构\">#</a> 线程结构：</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 线程对象结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PythreadState</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_ts</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PyInterpreterState <span class=\"token operator\">*</span>interp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_frame</span> <span class=\"token operator\">*</span>frame<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟函数调用栈</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> recursion_depth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>dict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">long</span> thread_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201007145711667.png\" alt=\"image-20201007145711667\" title=\"Python 运行时整体环境\" /></p>\n<h3 id=\"加载系统module\"><a class=\"anchor\" href=\"#加载系统module\">#</a> 加载系统 module</h3>\n<h4 id=\"创建__builtin__-module\"><a class=\"anchor\" href=\"#创建__builtin__-module\">#</a> 创建 <code>__builtin__</code>  module</h4>\n<p>一个进程内的全部线程共享一个  <code>&lt;module __builtin__&gt;</code></p>\n<ul>\n<li>创建 module 对象</li>\n<li>设置 module 对象</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201007151250252.png\" alt=\"image-20201007151250252\" title=\"初始化完成的 __builtin__ module\" /></p>\n<h4 id=\"创建-sys-module\"><a class=\"anchor\" href=\"#创建-sys-module\">#</a> 创建 sys module</h4>\n<ul>\n<li>创建 sys module 并备份</li>\n<li>设置 moduel 搜索路径</li>\n<li>创建  <code>__main__</code>  module</li>\n<li>设置 site-specific 的 module 搜索路径（第三方库）\n<ul>\n<li>核心实现在 <span class=\"exturl\" data-url=\"aHR0cDovL3NpdGUucHk=\">site.py</span> 中：\n<ul>\n<li>site 会将 site-packages 加入到 sys.path</li>\n<li>把 site-packages 下的所有 .pth 文件加入到 sys.path 中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201007154617538.png\" alt=\"image-20201007154617538\" title=\"完成初始化后的环境\" /></p>\n<blockquote>\n<p>extensions 用于缓存模块，再次加载的时候可以提高效率。</p>\n</blockquote>\n<h3 id=\"激活虚拟机\"><a class=\"anchor\" href=\"#激活虚拟机\">#</a> 激活虚拟机</h3>\n<h4 id=\"交互式运行方式\"><a class=\"anchor\" href=\"#交互式运行方式\">#</a> 交互式运行方式</h4>\n<ul>\n<li>把用户输入构造成 python 的 AST 语法树</li>\n<li>执行 run_mode 运行语法树</li>\n</ul>\n<h4 id=\"脚本文件运行方式\"><a class=\"anchor\" href=\"#脚本文件运行方式\">#</a> 脚本文件运行方式</h4>\n<ul>\n<li>编译脚本文件</li>\n<li>执行 run_mode 运行编译后的脚本文件</li>\n</ul>\n<h4 id=\"启动虚拟机\"><a class=\"anchor\" href=\"#启动虚拟机\">#</a> 启动虚拟机</h4>\n<ul>\n<li>run_mode 内会启动 Python 字节码虚拟机。之后循环往复的执行字节码。</li>\n</ul>\n<h4 id=\"名字空间\"><a class=\"anchor\" href=\"#名字空间\">#</a> 名字空间</h4>\n<ul>\n<li>local、global、bulitin 的设置。</li>\n<li>交互环境下 local 名字空间内不会有  <code>__file__</code>  属性</li>\n<li>Python 所有的线程都共享同样的 builtin 名字空间</li>\n</ul>\n<h2 id=\"python模块动态加载机制\"><a class=\"anchor\" href=\"#python模块动态加载机制\">#</a> python 模块动态加载机制</h2>\n<h3 id=\"import-机制\"><a class=\"anchor\" href=\"#import-机制\">#</a> import 机制</h3>\n<ul>\n<li><code>import module/package</code>  ： <code> import</code>   操作会先在全局模块池（ <code> sys.module</code>  ）中搜索  <code> module</code>   或  <code> package</code>  。如果以及存在，则直接加入当前  <code> module</code>    的  <code> local</code>   名字空间，否则就添加到  <code> sys.module</code>   和  <code> local</code>   。</li>\n<li><code> import package.module</code>  ：和  <code>import module/package</code>   类似，不过会额外把  <code> package</code>   加入到  <code> sys.module</code>   中。但不会加入  <code> local</code>   名字空间。</li>\n<li><code> import package.module as xx</code>  ：和  <code> import package.module</code>   类似。这里会对  <code> package.module</code>   在  <code> local</code>   名字空间做一个映射，实际的  <code> sys.module</code>   中引入的还是  <code> package.module</code>  。但是在  <code> local</code>   中其表示为  <code> xx</code>  。</li>\n<li><code> from package.module import xx</code>  ：和  <code> import package.module as xx</code>  类似。会在  <code> sys.module</code>   引入  <code> package</code>   和  <code> package.module</code>  ，同时在  <code> local</code>   引入  <code> xx</code>  。</li>\n<li>嵌套的  <code> import</code>   ：一个模块 import 另一个模块的情况下。每个模块的 import 都会影响  <code> sys.module</code>   和自身的  <code> local</code>   名字空间。但不会影响其他模块的  <code> local</code>  。</li>\n</ul>\n<h3 id=\"模块销毁与重载\"><a class=\"anchor\" href=\"#模块销毁与重载\">#</a> 模块销毁与重载</h3>\n<h4 id=\"销毁\"><a class=\"anchor\" href=\"#销毁\">#</a> 销毁</h4>\n<p>Python 提供了  <code> del module/package</code>   操作用于销毁模块。但是销毁的只是当前  <code> local</code>   名字空间内的， <code> sys.module</code>   中依旧保存了其缓存。所以单纯的  <code> del module</code>  ，再  <code> import module</code>   并不能实现热更新。</p>\n<h4 id=\"重载\"><a class=\"anchor\" href=\"#重载\">#</a> 重载</h4>\n<p>Python 提供了  <code> reload module</code>   操作用于重载模块。   <code>reload</code>   操作可以更新   <code>sys.module</code>   中的模块信息，把一些新增和修改的内容加入到  <code>module</code>   中，但是对于需要删除的内容，则无能为力，依旧会缓存在  <code>module</code>   内。</p>\n<h3 id=\"import-实现机制\"><a class=\"anchor\" href=\"#import-实现机制\">#</a> import 实现机制</h3>\n<p>import 的实现核心是依靠其   <code>builtin</code>   模块内的   <code>__import__</code>   操作。即：  <code>builtin__import__</code>   函数。</p>\n<ul>\n<li>调用  <code>builtin__import__</code>   函数，解析传递进来的参数。</li>\n<li>上锁。避免不同线程同时操作一个    <code>module  </code>  。</li>\n<li>解析    <code>module/package  </code>  树状结构。\n<ul>\n<li>Python 的所有搜索操作（   <code>import xxx/from xxx import xxx  </code> ）都是基于某一个   <code>package  </code>  来的。换句话说，所有查找的根目录（ <code>__main__</code> ) 都是一致的。即：某个   <code>package  </code>  的路径。</li>\n<li>Python 的搜索操作是不能搜索根目录之上的模块，例如：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 如果是基于 Package——A，那么可以访问到所有模块。根路径:/A = __main__.path</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 如果是基于 Package——B，那么无法访问 C 模块和 A 模块下的内容。根路径:/A/B = __main__.path</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 如果是基于 Package——C，那么无法访问 B 模块和 A 模块下的内容。根路径:/A/C = __main__.path</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>A</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span>——__init__<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span>——B</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——__init__<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——test1<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——test2<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span>——C</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——__init__<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——test3<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——test4<span class=\"token punctuation\">.</span>py</pre></td></tr></table></figure><ul>\n<li>加载 <code>module/package</code>\n<ul>\n<li>\n<p>先在  <code>sys.module</code>  中搜索是否依旧有加载过该模块留下的缓存了。</p>\n</li>\n<li>\n<p>尝试加载  <code>source module</code> 。如果没有则对  <code>.py</code>  文件进行编译，生成所需的  <code>PyCodeObject</code> 。</p>\n</li>\n<li>\n<p>如果需要加载内建 module。则会先去内建 module 备份列表中确认是否以及加载过了。再执行加载操作。</p>\n</li>\n<li>\n<p>加载 C 扩展的 module。</p>\n<ul>\n<li>window：dll 文件</li>\n<li>linux：so 文件</li>\n<li>不论哪种平台，都需要遵循 Python 执行的一套导入规则，格式大致如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 申明一个 PyMethodObject 对象所需的参数信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> PyMethodDef test_methods<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> Hello<span class=\"token punctuation\">,</span> METH_VARARGS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"say hello\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 对应下方图片内红框内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 告知 Python 初始化模块：模块名 模块信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>EXPORT <span class=\"token keyword\">int</span> <span class=\"token function\">initest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">Py_InitModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> test_methods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>细心的同学可以发现，这和内建模块的导入规则几乎一致</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201007210412440.png\" alt=\"image-20201007210412440\" title=\"完成初始化后的环境\" /></p>\n<ul>\n<li><code>from xxx import m,n</code> ：该操作会判断 xxx 模块中是否存在 m 和 n，而判断的依据就是通过  <code>__all__</code>  来实现的。如果没有申明  <code>__all__</code>  ，那么则会使用 Python 默认的  <code>PyObject_GetAttrString</code>  函数来获取模块下的所有内容。否则，则会以 <code>__all__</code>  列表里的内容为准。</li>\n</ul>\n<h3 id=\"legb-规则\"><a class=\"anchor\" href=\"#legb-规则\">#</a> LEGB 规则</h3>\n<blockquote>\n<p>Local -&gt; Enclosed -&gt; Global -&gt; Built-in</p>\n</blockquote>\n<ul>\n<li><code>Local </code>  ：可能是在一个函数或者类方法内部。</li>\n<li><code>Enclosed </code>  ： 可能是嵌套函数内，比如说 一个函数包裹在另一个函数内部。</li>\n<li><code>Global </code>   ：代表的是执行脚本自身的最高层次。</li>\n<li><code>Built-in </code>   ：是 Python 为自身保留的特殊名称。</li>\n</ul>\n<h3 id=\"最内嵌作用域-规则\"><a class=\"anchor\" href=\"#最内嵌作用域-规则\">#</a> 最内嵌作用域 规则</h3>\n<p>由一个赋值语句引进的名字在这个赋值语句所在的作用域里是可见（起作用）的，而且在其内部嵌套的每个作用域里也可见。</p>\n<blockquote>\n<p>除非它被嵌套于内部的，引进同样名字的另一条赋值语句所遮蔽 / 覆盖。</p>\n</blockquote>\n<ul>\n<li>eg：</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>module2<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">50</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>module1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> module2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\"># module1 申明的 a 在 module2 中是可见的</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>module2<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#执行过程中 module2 里的 a 覆盖了 global 作用域中 module1 里的 a</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Out<span class=\"token punctuation\">:</span><span class=\"token number\">50</span></pre></td></tr></table></figure><h2 id=\"python多线程机制\"><a class=\"anchor\" href=\"#python多线程机制\">#</a> python 多线程机制</h2>\n<h3 id=\"gil全局解释器锁和线程调度\"><a class=\"anchor\" href=\"#gil全局解释器锁和线程调度\">#</a> GIL (全局解释器锁) 和线程调度</h3>\n<p>在 Python 多线程中，不同线程之间会访问一些共享的资源，例如对象的引用计数和对象的释放。如果同时有两个线程修改一个对象的引用计数，导致对象被释放，那么可能会出现对象释放多次的问题。这时  <code>GIL</code>  就应运而生了。</p>\n<ul>\n<li><code>GIL</code>  ：本质上是一个解释器，只有当线程拥有该解释器的访问权限时，才能够执行指令。 <code>GIL</code>  间接的把多处理器的多线程模型转变为了单处理器的多线程模型。虽然其看上去对于锁的粒度较大，但在实际使用中效果却意外的好用。</li>\n<li>线程调度：\n<ul>\n<li>中断机制：Python 的中断机制和操作系统类似，都是模拟 <code>时钟中断</code> 。会根据执行的指令数目来控制线程中断，在 Python 2.5 中，默认执行 100 条指令后，会触发线程的中断，切换到其他线程。</li>\n<li>唤醒机制：对于需要唤醒哪个线程，Python 层面没有过多的干涉，而是把该任务交给了操作系统。</li>\n<li>Python 提供的两个多线程工具：\n<ul>\n<li>thread：C 实现的 builtin module。</li>\n<li>threading：Python 实现的标准库 module。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"python线程的创建\"><a class=\"anchor\" href=\"#python线程的创建\">#</a> Python 线程的创建</h3>\n<p>Python 虚拟机默认情况下是不支持多线程的，即：用户如果没有手动调用  <code>thread.start_new_thread</code>  接口，Python 则不会创建多线程相关的对象，也不会触发线程调度。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> PyObject<span class=\"token operator\">*</span> <span class=\"token function\">thread_PyThread_start_new_thread</span><span class=\"token punctuation\">(</span>PyObject <span class=\"token operator\">*</span>self<span class=\"token punctuation\">,</span> PyObject <span class=\"token operator\">*</span>fargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>keyw <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">bootstate</span> <span class=\"token operator\">*</span>boot<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">long</span> ident<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">PyArg_UnpackTuple</span><span class=\"token punctuation\">(</span>fargs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"start_new_thread\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>func<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>keyw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 「1」: 创建 bootstate 结构</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    boot <span class=\"token operator\">=</span> <span class=\"token function\">PyMem_NEW</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">bootstate</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    boot<span class=\"token operator\">-></span>interp <span class=\"token operator\">=</span> <span class=\"token function\">PyThreadState_GET</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>interp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    boot<span class=\"token operator\">-></span>func <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    boot<span class=\"token operator\">-></span>args <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    boot<span class=\"token operator\">-></span>keyw <span class=\"token operator\">=</span> keyw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 「2」: 初始化多线程环境</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">PyEval_InitThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 「3」: 创建子线程</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ident <span class=\"token operator\">=</span> <span class=\"token function\">PyThread_start_new_thread</span><span class=\"token punctuation\">(</span>t_bootstrap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> boot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">PyInt_FromLong</span><span class=\"token punctuation\">(</span>ident<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建线程主要分为三个步骤：</p>\n<ul>\n<li>创建并初始化 bootstate 结构 boot，boot 中保存了线程的过程和过程的参数。</li>\n<li>初始化 Python 的多线程环境。</li>\n<li>以 boot 为参数，创建操作系统的原生线程。</li>\n</ul>\n<h4 id=\"建立多线程环境\"><a class=\"anchor\" href=\"#建立多线程环境\">#</a> 建立多线程环境</h4>\n<ul>\n<li>创建 GIL，以下是 GIL 的结构</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">NRMUTEX</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    LONG owned<span class=\"token punctuation\">;</span> <span class=\"token comment\">//GIL 是否可获得，或是被占用 -1: 可用 0: 被占用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD thread_id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程 id</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    HANDLE hevent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 操作系统的 Event 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>线程每次需要执行前，必须获取 GIL，通过  <code>PyThread_acquire_lock</code>  函数。  <code>PyThread_acquire_lock</code>   有两种工作方式：\n<ul>\n<li>当无法获得 GIL 时，挂起自身。</li>\n<li>无法获得 GIL 时，不挂起。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"子线程的创建步骤\"><a class=\"anchor\" href=\"#子线程的创建步骤\">#</a> 子线程的创建步骤</h5>\n<ol>\n<li>创建 bootstate 结构。</li>\n<li>初始化多线程环境（主线程获得 GIL 控制权）。</li>\n<li>创建子线程，同时挂起主线程，子线程开始完成 bootstrap 线程过程。<strong>这里的主线程挂起，子线程执行线程过程的操作不在 Python 中断的范畴，而是利用了操作系统本身的中断机制。所以子线程不需要获取 GIL 的控制权</strong>。</li>\n<li>完成之后获得 thread_id，并设置 Semaphore，返回 thread_id ，挂起自身，并唤醒主线程。</li>\n<li>主线程获得子线程的 thread_id，并开始和子线程争夺 GIL 的控制权（通过 <code>时钟中断</code> ）。<strong>此时，主线程和子线程的中断才完全依赖 GIL 的控制权控制。</strong></li>\n<li>当子线程获得 GIL 控制权，主线程请求 GIL 被占用时，主线程挂起自身，子线程开始执行，当子线程执行完全部内容后，将被释放。到此，子线程的生命周期就已经结束。</li>\n</ol>\n<blockquote>\n<p>在子线程没有完全的创建完毕前（第 4 步没有执行完毕），中断机制不受 GIL 控制。</p>\n<p>线程自身的挂起状态，不是在归还 GIL 控制权后发生，而是在请求 GIL 无果后发生。</p>\n</blockquote>\n<h5 id=\"线程状态保护机制\"><a class=\"anchor\" href=\"#线程状态保护机制\">#</a> 线程状态保护机制</h5>\n<p>为了能够快速访问线程的状态，获取每个线程的信息，Python 为线程状态链表单独实现了一套锁机制，并且线程状态链表的访问不受 GIL 控制。</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201008133920825.png\" alt=\"image-20201008133920825\" title=\"线程状态对象链表\" /></p>\n<h3 id=\"python线程调度\"><a class=\"anchor\" href=\"#python线程调度\">#</a> Python 线程调度</h3>\n<h4 id=\"标准调度\"><a class=\"anchor\" href=\"#标准调度\">#</a> 标准调度</h4>\n<p>通过字节码计数来触发中断，默认情况下线程每执行 100 条字节码指令，就会触发一次中断。但在 Python 程序中，某些指令的执行不会计算字节码执行次数。</p>\n<h4 id=\"阻塞调度\"><a class=\"anchor\" href=\"#阻塞调度\">#</a> 阻塞调度</h4>\n<p>阻塞调度和标准调度有所不同，标准调度的中断触发是被动的，而阻塞调度的中断触发则是主动的，即：线程主动归还 GIL 的控制权。且诸塞调度完成后不会把字节码指令数重置成 100。</p>\n<p>此外相比于标准调度在切换线程时的连续性，阻塞调度在主动归还 GIL 到下次某个线程获得 GIL 的中间段，是会有一个空窗期的，这段时间内，线程将脱离 GIL 的控制，不过好在这段时间内，没有涉及到 Python 的 C API 调用，所以是线程安全的。</p>\n<h3 id=\"python子线程的销毁\"><a class=\"anchor\" href=\"#python子线程的销毁\">#</a> Python 子线程的销毁</h3>\n<p>线程的销毁会释放其占用的 GIL 以及一些线程资源和维护的线程状态链表对象。</p>\n<p>此外，主线程的销毁同时也会销毁 Python 的运行时环境，而子线程则不会。</p>\n<h3 id=\"python线程的用户级互斥与同步\"><a class=\"anchor\" href=\"#python线程的用户级互斥与同步\">#</a> Python 线程的用户级互斥与同步</h3>\n<h4 id=\"lock-对象\"><a class=\"anchor\" href=\"#lock-对象\">#</a> Lock 对象</h4>\n<p>Python 的 Lock 分为系统级的 Lock——GIL 和 用户级 Lock。</p>\n<p>当线程被唤醒时，首先会获得系统级的 Lock (GIL) 的控制权，之后会尝试获取用户级 lock，如果用户级 lock 被占用，则线程会归还系统级控制权，避免死锁。</p>\n<h4 id=\"高级线程库threading\"><a class=\"anchor\" href=\"#高级线程库threading\">#</a> 高级线程库 ——threading</h4>\n<h4 id=\"threading-module-概述\"><a class=\"anchor\" href=\"#threading-module-概述\">#</a> Threading Module 概述</h4>\n<p>threading module 维护了两个 dict 和一个 lock：</p>\n<ul>\n<li>准备创建的线程字典： <code>_limbo[thread] = thread</code></li>\n<li>已经创建的线程字典： <code>_active[thread_id] = thread</code></li>\n<li>访问线程状态链表的锁： <code>_active_limbo_lock</code></li>\n</ul>\n<h4 id=\"threading-的线程同步工具\"><a class=\"anchor\" href=\"#threading-的线程同步工具\">#</a> Threading 的线程同步工具</h4>\n<ul>\n<li>\n<p><code>RLock</code> ：正常的 lock 一个 acquire 对应于 一个 release，如果同时执行两个 acquire 而不 release，则会出现死锁。RLock 则提供了可用多次 acquire 后再多次 release 操作的机制。不必每次借钱之前都得把上次欠的还清，可以先借多次，再还多次。</p>\n</li>\n<li>\n<p><code>Condition</code> ：本质上时一个  <code>Lock</code>  对象，默认情况下是  <code>RLock</code> ，提供了  <code>wait</code>  和  <code>notify</code>  操作，可用在别的线程中主动唤醒其他线程。</p>\n<ul>\n<li><code>ConditionA.wait</code> ：A 线程调用时，释放  <code>ConditonA</code>  中的  <code>Lock</code>  并挂起线程 A。</li>\n<li><code>ConditionA.notify</code> ：其他线程调用时，获得  <code>ConditonA</code>  中的  <code>Lock</code>  并唤醒线程 A。</li>\n</ul>\n</li>\n<li>\n<p><code>Semaphore</code> ：类似信号量，实现机制也是基于  <code>Lock</code> ，内部维护一个  <code>Conidtion</code>  对象，但与 Lock 的互斥不同，其可以支持多个线程获得资源。资源池的概念。</p>\n</li>\n<li>\n<p><code>Event</code> ：和 Semaphore 类型，提供  <code>set</code>  和  <code>wait</code>  语义。</p>\n</li>\n</ul>\n<h2 id=\"python的垃圾回收gc\"><a class=\"anchor\" href=\"#python的垃圾回收gc\">#</a> python 的垃圾回收 GC</h2>\n<h3 id=\"block\"><a class=\"anchor\" href=\"#block\">#</a> block</h3>\n<ul>\n<li>用于存放对象的最小单位。</li>\n<li>针对不同 size 的数据进行分类存储的块。数据大小为 8 的整数倍，最大为 256 字节。</li>\n<li>如果内存大小≤256，则 python 会通过 PyObject_Malloc 去分配。如果 &gt; 256 字节，则会使用 malloc 来分配内存。</li>\n<li>size 有 32 种（0~31）之后的版本扩充到了 63（512 字节）。</li>\n<li>给对象分配的空间一般会超过原本大小，向上取 8 的整数倍。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(68).png\" alt=\"c87bfa632b2c7e3254911863fbe36e55.png\" /></p>\n<h3 id=\"pool\"><a class=\"anchor\" href=\"#pool\">#</a> pool</h3>\n<ul>\n<li>\n<p>同一个 pool 中的 block 大小必须统一。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(69).png\" alt=\"7b94ea10747352b5100ca504cdf76571.png\" /></p>\n</li>\n<li>\n<p>pool 的大小一般为 4kb。</p>\n</li>\n<li>\n<p>管理 block 的指针分为四种：</p>\n<ul>\n<li>bp 指针：指向当前使用 block。</li>\n<li>free 指针：指向下一个可用 block，free 是一个链表，每个节点内的值为 Null 或者是下一个空闲的 block 地址。</li>\n<li>next 指针：指向 free 的下一个空闲 block，一般是在当 free 内的值为 Null 的情况下，系统申请新空闲 block 后，给 free 作定位用的。</li>\n<li>maxnext 指针：指向 block 的最后一个 block 的首地址。用于判断 block 是否已经全部分配完毕。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(70).png\" alt=\"ba149b720cee23ad2d08f6d95bb29524.png\" /></li>\n</ul>\n</li>\n<li>\n<p>pool 的结构是由一个 pool_header 和一堆 block 组成的数组。它们是一个整体。</p>\n</li>\n<li>\n<p>pool 的状态：</p>\n<ul>\n<li>used 状态。pool 中即存在被使用的 block，也存在未被使用的 block。</li>\n<li>full 状态。pool 中所有 block 都在被使用。</li>\n<li>empty 状态。pool 中所有 block 都未被使用。</li>\n</ul>\n</li>\n<li>\n<p>usedpools。所有正在被使用的 pool 的双向链表头。本身是一个 pool_header * 组成的数组，通过一点取巧的方式把每个指针和其前面 2 个位置的指针一起视为一个 pool_header 对象从而构成一个空的双向链表。</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154449909.png\" alt=\"image-20200919154449909\" /></p>\n<h3 id=\"arena\"><a class=\"anchor\" href=\"#arena\">#</a> arena</h3>\n<ul>\n<li>\n<p>多个 pool 的管理者，每个 arena 的 pool 可以存在多个不同的 <code>size class index</code> 。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154538226.png\" alt=\"image-20200919154538226\" /></p>\n</li>\n<li>\n<p>一个 arena 的大小为 256k，可容纳 64 个 pool。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154553555.png\" alt=\"image-20200919154553555\" /></p>\n</li>\n<li>\n<p>arena 的结构是由一个 arena_object 指针和一堆 pool 组成的数组构成。不像 pool 一样，arena 的指针和内存是分离的。</p>\n</li>\n<li>\n<p>arena 有两种状态</p>\n<ul>\n<li>未使用状态：arena_object 指针没有指向对应的 pool 组成的数组块。</li>\n<li>使用状态：arena_object 指针已经指向对应的 pool 组成的数组块。</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154614444.png\" alt=\"image-20200919154614444\" /><br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154634438.png\" alt=\"image-20200919154634438\" /></p>\n<h3 id=\"arenas\"><a class=\"anchor\" href=\"#arenas\">#</a> arenas</h3>\n<ul>\n<li>管理多个 arena 的对象指针的数组。</li>\n<li>把 arena 分为两种状态：\n<ul>\n<li>未使用状态：通过 arenas 的 unused_arena_objects 指针作为表头的单向链表所连接</li>\n<li>使用状态：通过 arenas 的 used_arena_objects 指针作为表头的双向链表所连接</li>\n</ul>\n</li>\n<li>多个 arenas 通过名为 nextarena 和 prevatrena 的指针所联系在一起。</li>\n<li>初始化时创建的 arena 的数量为 16 个。之后如果未使用的 arena 不足时，会进行二倍的扩容。</li>\n<li>扩容操作只会创建 arena 的指针，只有在 arena 将要被使用时，才会去分配一个 256k 的大小。</li>\n<li>当前管理的 arena 的总数是由一个 int 类型的变量控制。每次扩容左移一位。当发生溢出（超过 2**32 或者分配的空间不足一个 arenas 的大小）时停止扩容操作。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154653554.png\" alt=\"image-20200919154653554\" /></li>\n</ul>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL3drbGtlbi5tZS9wb3N0cy8yMDE1LzA4LzI5L3B5dGhvbi1zb3VyY2UtbWVtb3J5LTEuaHRtbA==\">http://wklken.me/posts/2015/08/29/python-source-memory-1.html</span></p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL3drbGtlbi5tZS9wb3N0cy8yMDE1LzA4LzI5L3B5dGhvbi1zb3VyY2UtbWVtb3J5LTIuaHRtbA==\">http://wklken.me/posts/2015/08/29/python-source-memory-2.html</span></p>\n<h3 id=\"垃圾回收gc\"><a class=\"anchor\" href=\"#垃圾回收gc\">#</a> 垃圾回收（GC）</h3>\n<h4 id=\"1-标记清除marksweep\"><a class=\"anchor\" href=\"#1-标记清除marksweep\">#</a> 1、标记清除（Mark——Sweep）</h4>\n<ul>\n<li>寻找根对象集合\n<ul>\n<li>采用双向链表存储所有 container 对象</li>\n<li>为此每个 container 对象头部都存在一个 PyGC_Head 的数据块（在 PyObject_Head 之前）</li>\n</ul>\n</li>\n<li>寻找可达对象和不可达对象</li>\n<li>广度探测</li>\n<li>对于非 container 对象不进行检查\n<ul>\n<li>一个对象如果不能存储其他对象的引用则被视为非 container 对象</li>\n</ul>\n</li>\n<li>对于可达对象进行保留，不可达对象进行回收。</li>\n</ul>\n<h4 id=\"2-分代的垃圾收集python的解决办法\"><a class=\"anchor\" href=\"#2-分代的垃圾收集python的解决办法\">#</a> 2、分代的垃圾收集 ——python 的解决办法</h4>\n<ul>\n<li>\n<p>核心思想：</p>\n<ul>\n<li>根据内存的创建时间划分为不同的「代」</li>\n<li>时间越「长」的对象其被回收的概率就「小」。</li>\n<li>经过多次垃圾回收「存活」下来的对象则会被分配到回收周期更「长」的代中。</li>\n<li>每个「代」在 python 中对应的是一个「链表」，python 总共把代分为三个。</li>\n<li>第「0」个代的链表长度超过 700 时会触发垃圾回收（第一、二代都是 10）。python 还会借此机会清理其他的代。</li>\n<li>python 对代的清理是通过把第 2 代到第 0 代的三个链表（也可能不足三个）进行 merge。最终链接到第 2 代的链表后，一口气执行垃圾回收，打上回收标记。</li>\n<li>打上不可回收标记。通过有效引用计数，把计数不为「0」的对象打上不可回收标记。</li>\n<li>把不可回收对象单独存放在一个集合内。并把这些对象中所引用的对象（并且这些引用对象打上了可回收标记），也加入这个集合（双向链表）。</li>\n<li>对于定义了「 <code>__del__</code> 」的对象（finalizer 对象）需要单独用一个 PyListObject 来存放，在删除 finalizer 对象的时候先扣除该对象所引用的对象的引用计数，并清理引用列表，待到引用计数为 0 时再进行垃圾回收，保证回收对象已经不被任何对象引用。</li>\n<li>三种存储回收对象的链表：\n<ul>\n<li>reachable：保存每次需要回收的所有对象。</li>\n<li>unreachable：保存双向引用的回收对象。</li>\n<li>uncollectable：保存带有「 <code>__del__</code> 」函数的双向引用对象。</li>\n</ul>\n</li>\n<li>正常情况下的对象会在计数为 0 的时候就被销毁，所以存在于 <code>root object</code>  的对象都是双向引用或者被系统引用的对象。后者一般不会被回收。</li>\n</ul>\n</li>\n<li>\n<p>有效引用计数（解决垃圾回收时环引用）：</p>\n<ul>\n<li>遍历所有需要回收的对象（在 root object 集合中）。根据对象类型，判断每个对象内的引用 是否也是需要回收的对象，如果是，则对他的引用计数「副本」进行「 <code>--</code> 」操作，最终引用计数副本为「0」的对象将被视为可能需要回收。</li>\n</ul>\n</li>\n<li>\n<p>注意事项：</p>\n<ul>\n<li>python 在回收垃圾的时候没办法保证顺序，尽量避免在「 <code>__del__</code> 」中引用其他对象。</li>\n<li>python2.7 和 python3.+ 对于执行垃圾回收时，在「 <code>__del__</code> 」中引用其他对象这一操作所给出的解决方案有所不同。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python",
                "Python",
                "源码"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/linux/Shell-Grammar/",
            "url": "https://allengx.gitee.io/computer-science/study/linux/Shell-Grammar/",
            "title": "shell基本语法及linux基础",
            "date_published": "2020-10-02T09:46:50.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"linux学习笔记\"><a class=\"anchor\" href=\"#linux学习笔记\">#</a> Linux 学习笔记</h1>\n<h2 id=\"linux目录结构\"><a class=\"anchor\" href=\"#linux目录结构\">#</a> Linux 目录结构</h2>\n<ul>\n<li><code>/bin</code> ： binary，存放二进制文件，普通命令</li>\n<li><code>/sbin</code> ：system binary，存放系统二进制文件，需要系统权限</li>\n<li><code>/user/bin</code> ：用户安装的应用程序</li>\n<li><code>/user/sbin</code> ：超管安装的应用程序</li>\n</ul>\n<h2 id=\"linux-基本指令\"><a class=\"anchor\" href=\"#linux-基本指令\">#</a> Linux 基本指令</h2>\n<ul>\n<li><code>pwd</code> ：查看路径</li>\n<li><code>ls</code> ：查看目录下文件</li>\n<li><code>clear</code> ：清屏</li>\n<li><code>rm filename</code> ：删除文件  <code>-d</code>  可以删除文件夹</li>\n<li><code>mv file/dir dir</code> ：移动 [文件 / 文件夹] 到某个目录下</li>\n<li><code>cp file/dir file/dir</code> ：复制 <code>文件/文件夹</code> 到 <code>目录下/文件内</code> ，复制文件夹需要加 <code>-r</code></li>\n<li><code>id</code> ：查看用户信息</li>\n<li><code>find dir -name filename</code> ： 搜索文件</li>\n<li><code>locate filename</code> ： 搜索文件 (比 find 更快但可能更新不及时)</li>\n<li><code>cat filename</code> ： 查看 / 创建文件</li>\n<li><code>more filename</code> ： 按分页查看文件</li>\n<li><code>vim fimename</code> ： 编辑文件</li>\n<li><code>cd path</code> ： 进入某个文件，如果不加 path 默认回到 <code>~/</code>  目录</li>\n<li><code>cd -</code> ： 返回刚才的目录</li>\n<li><code>'command'</code> ： 被 <code>'</code>  号修饰的字符串则不会被执行</li>\n<li><code>scp [可选参数] file_source file_target</code> ： 远程拷贝文件</li>\n<li><code>watch [可选参数] command</code> ： 每隔一段时间执行一次指令</li>\n<li><code>echo string</code> ： 输出（用于简单的输出）</li>\n<li><code>/dev/null</code> ：  位桶，一般用来承上启下，在写入操作不必要但必须执行的时候可以用位桶写入一个不需要自己关注的地方</li>\n<li><code>cut</code> ： 对内容进行裁剪</li>\n<li><code>join</code> ： 合并文件内容，每一条记录都有一个 key，相同 key 可共享（合并后会成为一条记录）</li>\n<li><code>sort</code> ： 排序，可根据键 / 值 / 数据类型等对行内容进行排序（排序并不稳定）</li>\n<li><code>fmt</code> ： 格式化排版，部分 Linux 可能没有</li>\n<li><code>wc</code> ： 统计行数、字数、字节数</li>\n<li><code>touch</code> ： 创建文件或修改文件时间属性</li>\n<li><code>mkdir</code> ： 创建文件夹</li>\n<li><code>head / tail -n 行数</code> ： 显示开头和结尾的内容</li>\n<li><code>which 指令</code> ： 显示指令的绝对路径</li>\n<li><code>/dev/tty</code> ： 读取此文件会定位到一个终端窗口，可用于读入人工输入</li>\n<li><code>.profile</code> ： 每次登录 shell 都会读取的文件，该文件位于 <code>/etc/profile</code></li>\n<li><code>ln file/dir linkname</code> ：给 <code>文件/文件夹</code> 创建软连接</li>\n<li><code>tr</code> ： 字符转换 / 删除操作</li>\n<li><code>env</code> ： 查看环境变量</li>\n<li>`command`：  被 ` 修饰的内容会默认当作指令执行。等效于 $(command)—— 更推荐这么用。这样执行相当于在一个新的子 shell 执行命令</li>\n</ul>\n<h2 id=\"shell指令\"><a class=\"anchor\" href=\"#shell指令\">#</a> shell 指令</h2>\n<ul>\n<li><code>set name val</code> ： 设置变量</li>\n<li><code>unset varname</code> ： 删除某个变量</li>\n<li><code>bash -vx xx.sh</code> ： 调试的方式执行脚本</li>\n<li><code>#! /bin/sh -</code> ： 作为文件开头等效于  <code>#!/bin/bash</code></li>\n<li><code>program &amp;</code> ： 指令后加入 &amp; 可以让指令变成非阻塞式，不需要等到指令执行完便可以做后续操作</li>\n<li><code>$variablename</code> ： 用来获取变量值</li>\n<li><code>programe1 | programe2</code> ： 把左边的内容以右边的格式输出</li>\n<li><code>$&#123;int&#125;</code> ： 在 shell 函数中作为函数参数</li>\n<li><code>command1 &amp;&amp; command2 </code> ： 1 成功执行了才执行 2（成功是 0，失败是！0）</li>\n<li><code>command1 || command2</code> ： 1 执行失败了了才执行 2</li>\n<li><code>&lt;&lt;-EOF 内容 EOF</code> ： 有点类似 python 的 &quot;&quot;&quot;xxxxxx&quot;&quot;&quot;，可以把多行内容打包。 <code>-</code>  可以避免结束的 EOF 前出现空格会报错的问题。 <code>EOF</code>  也可以替换成其他内容，只要保持首尾一致即可。</li>\n<li><code>. xx.sh 或者 source xxx.sh</code> ： 在当前 shell 执行脚本</li>\n<li><code>./xxx.sh 或者 bash xxx.sh</code> ： 在一个新 shell 窗口执行，与上者的区别在于，新窗口执行的操作不会对原窗口产生影响。</li>\n<li><code>&amp;</code> ： 让程序在后台执行</li>\n<li><code>(command1;command2)</code> ： 在子 shell 中执行不影响当前 shell 环境，功能类似  <code>bash xxx.sh</code></li>\n<li><code>read -p string var</code> ： 键盘输入的值赋给 var 变量  <code>-p string</code>  可以在输入前给用户提示</li>\n<li><code>export</code> ： 被 <code>export</code>  修饰的变量会变成环境变量，作用所有 shell 和子 shell</li>\n</ul>\n<h2 id=\"login-shell-nologin-shell\"><a class=\"anchor\" href=\"#login-shell-nologin-shell\">#</a> login shell &amp;&amp; nologin shell</h2>\n<h3 id=\"login-shell\"><a class=\"anchor\" href=\"#login-shell\">#</a> login shell:</h3>\n<blockquote>\n<p>su - username</p>\n</blockquote>\n<h4 id=\"登陆时会执行下面的四个文件\"><a class=\"anchor\" href=\"#登陆时会执行下面的四个文件\">#</a> 登陆时会执行下面的四个文件</h4>\n<p><code>/etc/profile</code> 、  <code>/etc/brashrc</code> 、  <code>~/.bash_profile</code> 、  <code>~/.bashrc</code></p>\n<h3 id=\"nologin-shell\"><a class=\"anchor\" href=\"#nologin-shell\">#</a> nologin shell:</h3>\n<blockquote>\n<p>su username</p>\n</blockquote>\n<h4 id=\"登陆时会执行下面的两个文件\"><a class=\"anchor\" href=\"#登陆时会执行下面的两个文件\">#</a> 登陆时会执行下面的两个文件</h4>\n<p><code>/etc/brashrc</code> 、  <code>~/.bashrc</code></p>\n<hr />\n<h4 id=\"系统级登陆时执行\"><a class=\"anchor\" href=\"#系统级登陆时执行\">#</a> 系统级 (登陆时执行):</h4>\n<blockquote>\n<p>/etc/profile</p>\n</blockquote>\n<blockquote>\n<p>/etc/brashrc</p>\n</blockquote>\n<h4 id=\"用户级强两个登陆时执行后两个登出时执行\"><a class=\"anchor\" href=\"#用户级强两个登陆时执行后两个登出时执行\">#</a> 用户级 (强两个登陆时执行，后两个登出时执行):</h4>\n<blockquote>\n<p>~/.bash_profile</p>\n</blockquote>\n<blockquote>\n<p>~/.bashrc</p>\n</blockquote>\n<h4 id=\"用户级登出\"><a class=\"anchor\" href=\"#用户级登出\">#</a> 用户级登出</h4>\n<blockquote>\n<p>~/.bash_logout</p>\n</blockquote>\n<blockquote>\n<p>~/.bash_history</p>\n</blockquote>\n<h2 id=\"history\"><a class=\"anchor\" href=\"#history\">#</a> history &amp; ！</h2>\n<ul>\n<li><code>history</code> ： 查看历史命令</li>\n<li><code>!数字</code> ： 执行某条历史命令</li>\n<li><code>!字符串</code> ： 执行最近执行过的一条命令，必须和字符串匹配才行</li>\n<li><code>!$</code> ： 获取上一个命令的最后一个参数</li>\n<li><code>!!</code> ： 执行上一个命令</li>\n</ul>\n<h2 id=\"别名-alias\"><a class=\"anchor\" href=\"#别名-alias\">#</a> 别名 alias</h2>\n<ul>\n<li><code>alias</code> ： 查看当前 shell 命令别名</li>\n<li><code>unalias 别名</code> ： 取消别名 或者在命令前加个 <code>\\</code>  例如： <code>alias ls='ls --color=auto'</code>  在执行 ls 的时候默认执行  <code>ls --color=auto</code>  取消别名可以  <code>unalias ls</code>  后执行  <code>ls</code>  或者  <code>\\ls</code></li>\n<li><code>alias xxx='xxxx'</code> ： 定义临时别名</li>\n<li>想要定义永久别名就在  <code>~/.bashrc</code>  里面加上 添加别名的语句 例如： <code>alias ls='ls --color=auto'</code></li>\n</ul>\n<h2 id=\"linux-快捷键\"><a class=\"anchor\" href=\"#linux-快捷键\">#</a> Linux 快捷键</h2>\n<ul>\n<li><code>ctrl+l</code> ： 清屏</li>\n<li><code>ctrl+v</code> ： 块选择，编辑文本很好用</li>\n<li><code>ctrl+r</code> ： 查找历史命令</li>\n<li><code>ctrl+d</code> ： 退出 linux</li>\n<li><code>ctrl+a</code> ： 光标移动到指令最前面</li>\n<li><code>ctrl+e</code> ： 光标移动到指令最后面</li>\n<li><code>ctrl+u</code> ： 删除光标前的内容</li>\n<li><code>ctrl+k</code> ： 删除光标后的内容</li>\n<li><code>ctrl+y</code> ： 撤销上一步操作</li>\n<li><code>ctrl+s</code> ： 锁屏，即看不到指令的输入和结果</li>\n<li><code>ctrl+q</code> ： 解锁，锁屏的反向操作</li>\n<li><code>ctrl+z</code> ： 暂停进程，一般用于 vim 编辑文件时暂停去做其他事务，之后通过 <code>fg</code>  切回暂停的进程</li>\n</ul>\n<h2 id=\"输入输出重定向\"><a class=\"anchor\" href=\"#输入输出重定向\">#</a> 输入输出重定向</h2>\n<ul>\n<li><code>&lt; filename</code> ： 从文件读入数据输入到 &lt; 左边</li>\n<li><code>&gt; filename</code> ： 把结果输出重定向到文件内</li>\n<li><code>&gt;&gt; filename</code> ： 把结果输出重定向到文件结尾，结果一般是整数表示是否执行成功</li>\n<li><code>&lt;&lt; filename</code> ： 把结果输入重定向到文件结尾，结果一般是整数表示是否执行成功</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>设备</th>\n<th>设备名</th>\n<th>文件描述符</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>键盘</td>\n<td>/dev/stdin</td>\n<td>0</td>\n<td>标准输入</td>\n</tr>\n<tr>\n<td>显示器</td>\n<td>/dev/stdout</td>\n<td>1</td>\n<td>标准输出</td>\n</tr>\n<tr>\n<td>显示器</td>\n<td>/dev/stderr</td>\n<td>2</td>\n<td>标准错误输出</td>\n</tr>\n</tbody>\n</table>\n<p>常规用法：</p>\n<ul>\n<li><code>cat xxx.txt 1&gt;xxx1.txt</code> ： 把 xxx.txt 的标准输出重定向到 xxx1.txt 中</li>\n<li><code>cat &lt; xxx.txt </code> ： 把某文件内容作为 cat 输入</li>\n<li><code>cat &gt; xxx.txt &lt; xxx1.txt </code> ： 把 xxx1.txt 内容作为 cat 的输入，并把 cat 的输出作为 xxx.txt 的输入</li>\n<li><code>&amp;&gt;</code> ： 混合输出，把上述的 1，2 两种输出内容一起输出</li>\n</ul>\n<h2 id=\"管道-t管道\"><a class=\"anchor\" href=\"#管道-t管道\">#</a> 管道 &amp;&amp; T 管道</h2>\n<ul>\n<li><code>cat xxx.txt |grep a |grep b</code> ： 管道过滤</li>\n<li><code>cat xxx.txt |grep a |tee xxx1.txt |grep b</code> ： 可以把 <code>grep a</code>  的过滤结果输出到  <code>xxx1.txt</code>  在执行后面的过滤</li>\n<li><code>cat xxx.txt |grep a |tee -a xxx1.txt |grep b</code> ：<br />\n <code>-a</code>  表示追加写入到  <code>xxx1.txt</code></li>\n</ul>\n<h3 id=\"匿名管道\"><a class=\"anchor\" href=\"#匿名管道\">#</a> 匿名管道 |</h3>\n<p>特征：</p>\n<ol>\n<li>单向通讯</li>\n<li>只支持父子进程通信，不支持跨进程</li>\n</ol>\n<h3 id=\"命名管道\"><a class=\"anchor\" href=\"#命名管道\">#</a> 命名管道</h3>\n<p>特征：</p>\n<ol>\n<li>可以跨进程通信</li>\n<li>可以作为文件访问</li>\n<li>先进先出原则</li>\n</ol>\n<ul>\n<li><code>mkfifo name</code> ： 创建命名管道</li>\n</ul>\n<h2 id=\"echo-颜色输出\"><a class=\"anchor\" href=\"#echo-颜色输出\">#</a> echo 颜色输出</h2>\n<ul>\n<li><code>echo -e &quot;\\e[1;31m content \\e[0m&quot;</code> ： 输出一段红色内容，其中 <code>\\e[1;xxm</code>  表示设置颜色 <code>\\e[0m</code>  表示重置为原本颜色</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>前景</th>\n<th>背 景</th>\n<th>颜色</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>30</td>\n<td>40</td>\n<td>黑色</td>\n</tr>\n<tr>\n<td>31</td>\n<td>41</td>\n<td>红色</td>\n</tr>\n<tr>\n<td>32</td>\n<td>42</td>\n<td>绿色</td>\n</tr>\n<tr>\n<td>33</td>\n<td>43</td>\n<td>黄色</td>\n</tr>\n<tr>\n<td>34</td>\n<td>44</td>\n<td>蓝色</td>\n</tr>\n<tr>\n<td>35</td>\n<td>45</td>\n<td>紫红</td>\n</tr>\n<tr>\n<td>36</td>\n<td>46</td>\n<td>青蓝</td>\n</tr>\n<tr>\n<td>37</td>\n<td>47</td>\n<td>白色</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>文字颜色是 30-37m，背景颜色是 40-47m</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>OFF</td>\n</tr>\n<tr>\n<td>1</td>\n<td>高亮显示</td>\n</tr>\n<tr>\n<td>4</td>\n<td>underline</td>\n</tr>\n<tr>\n<td>5</td>\n<td>闪烁</td>\n</tr>\n<tr>\n<td>7</td>\n<td>反 白显示</td>\n</tr>\n<tr>\n<td>8</td>\n<td>不可见</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"if-条件语句\"><a class=\"anchor\" href=\"#if-条件语句\">#</a> if 条件语句</h2>\n<p>基本结构 ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin class-name\">:</span>   <span class=\"token comment\">#什么都不做可以用:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> xxx.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"cat success\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"cat fail\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><blockquote>\n<p>注意  <code>[]</code>  符号中间要有空格</p>\n</blockquote>\n<h2 id=\"预定义变量\"><a class=\"anchor\" href=\"#预定义变量\">#</a> 预定义变量</h2>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>含义</th>\n<th>格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$0</td>\n<td>脚本名</td>\n<td>带路径的脚本名。想得到脚本名，可以在执行时用 <code>basename</code>  修饰，如果只需要路径可以用 <code>dirname</code>  修饰</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>所有参数</td>\n<td>&quot;$1 $2 $3 ...&quot;</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>当前进程 PID</td>\n<td>数字</td>\n</tr>\n<tr>\n<td>$！</td>\n<td>上一个后台进程 PID</td>\n<td>数字</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>参数个数</td>\n<td>数字</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>所有参数</td>\n<td>&quot;$1&quot; &quot;$2&quot; ...</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"位置变量\"><a class=\"anchor\" href=\"#位置变量\">#</a> 位置变量</h3>\n<ul>\n<li><code>$1 $2 $3 $4 $5 $6 $7...</code></li>\n</ul>\n<h2 id=\"整数运算\"><a class=\"anchor\" href=\"#整数运算\">#</a> 整数运算</h2>\n<ul>\n<li><code>expr int + int</code> ： 计算两个整数  <code>+</code>   <code>-</code>   <code>\\*</code>   <code>/</code>   <code>%</code></li>\n<li><code>$((int + int))</code> ： 计算两个整数  <code>+</code>   <code>-</code>   <code>*</code>   <code>/</code>   <code>%</code></li>\n<li><code>$[int + int]</code> ： 计算两个整数  <code>+</code>   <code>-</code>   <code>*</code>   <code>/</code>   <code>%</code></li>\n<li><code>let varname=int+int</code> ： 计算两个整数  <code>+</code>   <code>-</code>   <code>*</code>   <code>/</code>   <code>%</code></li>\n</ul>\n<h2 id=\"小数运算\"><a class=\"anchor\" href=\"#小数运算\">#</a> 小数运算</h2>\n<ul>\n<li><code>&quot;float+float&quot;|bc</code></li>\n<li><code>awk 'BEGIN&#123;print float/float&#125;'</code></li>\n<li><code>&quot;float+float&quot;|python</code></li>\n</ul>\n<h2 id=\"和变量内容的删除\"><a class=\"anchor\" href=\"#和变量内容的删除\">#</a> ${} 和变量内容的删除</h2>\n<h4 id=\"替换\"><a class=\"anchor\" href=\"#替换\">#</a> 替换</h4>\n<blockquote>\n<p>以下操作，不会修改变量</p>\n</blockquote>\n<ul>\n<li><code>$&#123;varname&#125;</code> ： 用来获取变量值</li>\n<li><code>$&#123;#varname&#125;</code> ： 得到变量长度</li>\n<li><code>$&#123;varname#content&#125;</code> ： 从前往后，删除变量值中第一个匹配到 <code>content</code>  的内容。例如 <code>$&#123;www.bilibili.com#www.&#125;</code>  结果是 <code>bilibili.com</code> 。content 也可以是正则</li>\n<li><code>$&#123;varname##content&#125;</code> ： 与上面类似。从前往后，删除变量值中第一个到最后一个匹配到  <code>content</code>  的内容。贪婪匹配</li>\n<li><code>$&#123;varname%content&#125;</code> ： 从后往前删，和 <code>#</code> 功能类似</li>\n<li><code>$&#123;varname%%content&#125;</code> ： 从后往前删，和 <code>##</code> 功能类似</li>\n<li><code>$&#123;varname:m:n&#125;</code> ： 对变量切片。从第 m 个开始往后切 n 个</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token string\">\"0123456789\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$&#123;a<span class=\"token operator\">:</span>5&#125;</span> 结果：56789</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$&#123;a<span class=\"token operator\">:</span>5<span class=\"token operator\">:</span>2&#125;</span> 结果：56</pre></td></tr></table></figure><blockquote>\n<p>以下操作，会修改变量</p>\n</blockquote>\n<ul>\n<li><code>$&#123;varname/s1/s2&#125;</code> ： 把变量中的 s1 替换为 s2，只替换一个，从前往后匹配</li>\n<li><code>$&#123;varname//s1/s2&#125;</code> ： 把变量中的 s1 替换为 s2，替换全部匹配结果，从前往后匹配</li>\n</ul>\n<h4 id=\"替代默认值\"><a class=\"anchor\" href=\"#替代默认值\">#</a> 替代（默认值）</h4>\n<blockquote>\n<p>以下操作，不会修改变量</p>\n</blockquote>\n<ul>\n<li><code>$&#123;varname-s1&#125;</code> ： 如果变量没有定义，默认用 s1 替代。执行完后变量依旧未定义，空值不会被替代</li>\n<li><code>$&#123;varname:-s1&#125;</code> ： 和 <code>-</code>  类似，但空值也会被替代</li>\n<li><code>$&#123;varname+s1&#125;</code> ： 如果变量存在，返回 s1 作为值</li>\n<li><code>$&#123;varname:+s1&#125;</code> ： 如果变量非空，返回 s1 作为值</li>\n<li><code>$&#123;varname?s1&#125;</code> ： 如果变量不存在，返回 s1 作为值</li>\n<li><code>$&#123;varname:?s1&#125;</code> ： 如果变量为空或不存在，返回 s1 作为值</li>\n</ul>\n<blockquote>\n<p>以下操作，会修改变量</p>\n</blockquote>\n<ul>\n<li><code>$&#123;varname=s1&#125;</code> ： 如果变量不存在，返回 s1 作为值，且给变量赋值</li>\n<li><code>$&#123;varname:=s1&#125;</code> ： 如果变量为空或不存在，返回 s1 作为值，且给变量赋值</li>\n</ul>\n<h2 id=\"条件测试test\"><a class=\"anchor\" href=\"#条件测试test\">#</a> 条件测试 ——test</h2>\n<ul>\n<li>可以用  <code>man test</code>  查看条件判断语法。</li>\n</ul>\n<h2 id=\"正则匹配语法\"><a class=\"anchor\" href=\"#正则匹配语法\">#</a> 正则匹配语法</h2>\n<ul>\n<li><code>[[ &quot;$number&quot;=~^[0-9]+$ ]]</code> ：需要使用 <code>[[]]</code>  并且用 <code>=~</code>  来进行比较</li>\n</ul>\n<h2 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h2>\n<blockquote>\n<p>通常情况下 循环读入的内容会以字段分隔符进行拆分 ——IFS。在程序中自定义 IFS 变量可以修改拆分。例如：以回车拆分: IFS=$'\\n' 或者通过以下代码实现</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> line <span class=\"token comment\"># read 默认就是读行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># do something</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;</span> xxx.txt <span class=\"token comment\">#输入重定向到文件</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># while</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$#</span> -ne <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>  <span class=\"token comment\">#参数数量不为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">let</span> <span class=\"token assign-left variable\">sum</span><span class=\"token operator\">+=</span><span class=\"token variable\">$1</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin class-name\">shift</span>   <span class=\"token comment\"># 参数全部左移一个 shift number 默认是 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token builtin class-name\">break</span>   <span class=\"token comment\"># 跳出循环</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>--------------------------</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># for 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"hello world\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&amp;</span> <span class=\"token comment\">#&#123;&#125;&amp; 表示放到后台执行 </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">wait</span> <span class=\"token comment\"># 等待全部后台执行完成后执行后续内容</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"finish ...\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>--------------</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># for 2</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> xxx.txt<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token builtin class-name\">continue</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>--------------</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># for 3</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">seq</span> -w $num<span class=\"token variable\">`</span></span>  <span class=\"token comment\"># seq -w 等位补齐</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--------------</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># for 4 不加 in xxx 默认就是全部参数（$@）</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">for</span> i</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>---------------------------</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># until 与 while 相反，条件不成立则进行循环</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">until</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token builtin class-name\">break</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function-name function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">return</span> val  <span class=\"token comment\">#return 返回的是一个状态码，只能是 0-255</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-name function\">f</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token builtin class-name\">local</span> <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token comment\"># local 修饰的变量只在函数内生效</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> val</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>f<span class=\"token variable\">`</span></span>  <span class=\"token comment\">#可以通过 echo 和赋值的形式来返回结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>func <span class=\"token comment\">#调用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>func arg1 arg2 <span class=\"token punctuation\">..</span><span class=\"token comment\"># 传递参数，接受参数可以用  $1 $2...</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># $? 也可以获取到函数的返回值</span></pre></td></tr></table></figure><h2 id=\"操作符\"><a class=\"anchor\" href=\"#操作符\">#</a> 操作符</h2>\n<ul>\n<li><code>()</code> ： 子 shell 执行</li>\n<li><code>(())</code> ： 数值比较</li>\n<li><code>$()</code> ： 命令替换</li>\n<li><code>$(())</code> ： 整数运算</li>\n<li><code>&#123;&#125;</code> ： 集合</li>\n<li><code>$&#123;&#125;</code> ： 变量替换</li>\n<li><code>[]</code> ： 条件测试</li>\n<li><code>[[]]</code> ： 条件测试支持 =~ 正则</li>\n<li><code>$[]</code> ： 整数运算</li>\n</ul>\n<h2 id=\"打开和关闭一个文件\"><a class=\"anchor\" href=\"#打开和关闭一个文件\">#</a> 打开和关闭一个文件</h2>\n<ul>\n<li><code>exec 6&lt;&gt; file</code> ： 打开文件（当文件句柄未被释放时，文件删除后句柄会保留）</li>\n<li><code>exec 6&lt;&amp;-</code> ： 关闭文件</li>\n<li><code>ls -l /proc/$$/fd</code> ： 查看句柄，$$ 表示当前进程 pid</li>\n</ul>\n<h2 id=\"并发\"><a class=\"anchor\" href=\"#并发\">#</a> 并发</h2>\n<ul>\n<li><code>&#123;command&#125;&amp;</code> ： 并发执行指令</li>\n</ul>\n<h4 id=\"如何控制并发命名管道使用\"><a class=\"anchor\" href=\"#如何控制并发命名管道使用\">#</a> 如何控制并发 —— 命名管道使用</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>thread_num<span class=\"token operator\">=</span><span class=\"token number\">5</span> <span class=\"token comment\">#指定并发数为 5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tmp_fifo<span class=\"token operator\">=</span><span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>$$<span class=\"token punctuation\">.</span>tmp_fifo   <span class=\"token comment\">#给管道一个唯一名字</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">exec</span> <span class=\"token number\">22</span><span class=\"token operator\">&lt;></span> <span class=\"token string\">\"$tmp_fifo\"</span> <span class=\"token comment\">#给一个不会被占用的句柄打开它 ——22</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>rm <span class=\"token string\">\"$tmp_fifo\"</span> <span class=\"token comment\">#删掉文件，但是句柄还是存在，可以用来读写</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> `seq $thread_num`</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>do</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    echo <span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token number\">22</span>   <span class=\"token comment\">#往句柄里面写 5 个回车</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>done</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token number\">.255</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>do</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    read <span class=\"token operator\">-</span>u <span class=\"token number\">22</span>  <span class=\"token comment\">#读 22 句柄内的一个内容，如果没内容会被阻塞</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">#写自己的逻辑</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        echo <span class=\"token string\">\"done...\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    echo <span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token number\">22</span>   <span class=\"token comment\">#结束后，把读到的（拿到的）内容还回去</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>done</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>wait</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">exec</span> <span class=\"token number\">22</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token operator\">-</span>  <span class=\"token comment\">#释放掉句柄</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>echo <span class=\"token string\">\"all finish\"</span></pre></td></tr></table></figure><h2 id=\"expect-解决交互问题\"><a class=\"anchor\" href=\"#expect-解决交互问题\">#</a> expect 解决交互问题</h2>\n<p>通常情况下，用户登陆都需要进行交互 —— 输入密码， <code>expect</code>  能够帮助我们解决这个问题。</p>\n<blockquote>\n<p>ssh 登陆时免交互，采用密码验证</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#! /user/bin/expect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spawn <span class=\"token function\">ssh</span> alice@127.0.0.1   <span class=\"token comment\">#spwan 是 expect 脚本的一个关键字，作用是开启或者执行一段命令的会话</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">expect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"yes/no\"</span> <span class=\"token punctuation\">&#123;</span>send <span class=\"token string\">\"yes/r\"</span><span class=\"token punctuation\">;</span>  exp_continue <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">#如果会话存在 “yes/no” 字符则输入 yes 回车，然后继续执行 expect</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">\"password:\"</span> <span class=\"token punctuation\">&#123;</span>send <span class=\"token string\">\"you password<span class=\"token entity\" title=\"\\r\">\\r</span>\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#如果会话存在 “password” 字符则输入自己的密码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>interact <span class=\"token comment\">#停留在该会话</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 如果要关闭会话可以使用 expect eof</span></pre></td></tr></table></figure><blockquote>\n<p>ssh 登陆时免交互，采用公钥验证</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#! /user/bin/expect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">ip</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spawn ssh-copy-id <span class=\"token variable\">$ip</span>   <span class=\"token comment\">#采用密钥传输后，下次登陆将不需要在输入密码 ssh-copy-id 把公钥赋值给目标机器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token function\">timeout</span> <span class=\"token number\">10</span> <span class=\"token comment\">#设置超时时间 超过 10s 无响应自动退出</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">expect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"yes/no\"</span> <span class=\"token punctuation\">&#123;</span>send <span class=\"token string\">\"yes/r\"</span><span class=\"token punctuation\">;</span>  exp_continue <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">#如果会话存在 “yes/no” 字符则输入 yes 回车，然后继续执行 expect</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">\"password:\"</span> <span class=\"token punctuation\">&#123;</span>send <span class=\"token string\">\"you password<span class=\"token entity\" title=\"\\r\">\\r</span>\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#如果会话存在 “password” 字符则输入自己的密码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">expect</span> eof</pre></td></tr></table></figure><blockquote>\n<p>如何判断公钥是否存在及如何产生公钥和私钥</p>\n</blockquote>\n<ul>\n<li><code>ssh-keygen -P &quot;password&quot; -f &quot;~/.ssh/id_rsa&quot;</code> ：创建公钥和私钥，后面两个参数代表密码和位置</li>\n<li><code>if [ -f ~/.ssh/id_rsa ]</code> ：目录下是否存在该文件（公钥）</li>\n</ul>\n<blockquote>\n<p>expect 接收传参</p>\n</blockquote>\n<ul>\n<li><code>[lindex $argv 0]</code> ： #接收传入的第 1 个参数，示列  <code>set ip [lindex $argv 0]</code></li>\n</ul>\n<h2 id=\"array-数组\"><a class=\"anchor\" href=\"#array-数组\">#</a> Array 数组</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">declare</span> -a <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>val1 val2 val3 val4<span class=\"token punctuation\">)</span> <span class=\"token comment\">#定义数组（普通数组）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">declare</span> -a <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>val1 val2 <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>val3<span class=\"token punctuation\">)</span> <span class=\"token comment\">#定义数组（普通数组），可以跳过中间其他下标</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;var<span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token comment\">#访问数组元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">declare</span> -A <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>val <span class=\"token punctuation\">[</span>key1<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>val1 <span class=\"token punctuation\">[</span>key2<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>val2 <span class=\"token punctuation\">[</span>key3<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>val3<span class=\"token punctuation\">)</span> <span class=\"token comment\">#定义数组（关联数组）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">var</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key4<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>val4<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#往关联数组增加元素</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;var<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token comment\">#访问关联数组</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;var<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token comment\">#访问全部元素，等价于 echo $&#123;var [*]&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">#</span>var<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token comment\">#统计元素个数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;var<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>1&#125;</span> <span class=\"token comment\">#取第一个往后的全部元素（普通数组）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;var<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>1<span class=\"token operator\">:</span>2&#125;</span> <span class=\"token comment\">#取第一个往后的 2 个元素（普通数组）</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;<span class=\"token operator\">!</span>var<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token comment\">#获得全部数组索引，用来遍历</span></pre></td></tr></table></figure><h2 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h2>\n<h3 id=\"元字符基本\"><a class=\"anchor\" href=\"#元字符基本\">#</a> 元字符（基本）</h3>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>行首定位符</td>\n<td>^man</td>\n</tr>\n<tr>\n<td>$</td>\n<td>行尾定位符</td>\n<td>man$</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配单个字符</td>\n<td>m.n</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的字符 0 到多个</td>\n<td>ma*n</td>\n</tr>\n<tr>\n<td>.*</td>\n<td>匹配任意多个字符</td>\n<td>ma.*n</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>匹配指定范围的一个字符</td>\n<td>[m]an</td>\n</tr>\n<tr>\n<td>[-]</td>\n<td>匹配指定范围的一个字符</td>\n<td>[a-zA-Z]an</td>\n</tr>\n<tr>\n<td>[^]</td>\n<td>匹配不在指定范围的一个字符</td>\n<td>[^a-zA-Z]an</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>转义元字符</td>\n<td><code>man\\.</code></td>\n</tr>\n<tr>\n<td><code>\\&lt;</code></td>\n<td>词首定位符</td>\n<td><code>\\&lt;man</code></td>\n</tr>\n<tr>\n<td><code>\\&gt;</code></td>\n<td>词尾定位符</td>\n<td><code>man\\&gt;</code></td>\n</tr>\n<tr>\n<td><code>\\(..\\)</code></td>\n<td>字符标签</td>\n<td>匹配该字符 <code>wjct1wjct2</code> 。 <code>\\(wjct\\)1\\12</code> 。 <code>\\1</code>  表示和第一个括号内内容一致，即 <code>wjct</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"元字符扩展\"><a class=\"anchor\" href=\"#元字符扩展\">#</a> 元字符（扩展）</h3>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>匹配一个或多个前导字符</td>\n<td>[m]+an</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配 0 个或 1 个前导字符</td>\n<td>m?an</td>\n</tr>\n<tr>\n<td><code>a|b</code></td>\n<td>匹配 a 或 b</td>\n<td><code>man|Man</code></td>\n</tr>\n<tr>\n<td>()</td>\n<td>组字符</td>\n<td><code>(m|M)an</code></td>\n</tr>\n<tr>\n<td>(..)(..)\\1\\2</td>\n<td>标签匹配</td>\n<td><code>m(an)M\\1</code>  匹配 manMan</td>\n</tr>\n<tr>\n<td><code>x\\&#123;m\\&#125;</code></td>\n<td>字符 x 重复 m 次</td>\n<td><code>m\\&#123;1\\&#125;</code></td>\n</tr>\n<tr>\n<td><code>x\\&#123;m,\\&#125;</code></td>\n<td>字符 x 至少重复 m 次</td>\n<td><code>m\\&#123;1,\\&#125;</code></td>\n</tr>\n<tr>\n<td><code>x\\&#123;m,n\\&#125;</code></td>\n<td>字符 x 重复 m 到 n 次</td>\n<td><code>m\\&#123;1,10\\&#125;</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"vim-使用\"><a class=\"anchor\" href=\"#vim-使用\">#</a> vim 使用</h2>\n<ul>\n<li><code>:%s/s1/s2/g</code> ： #查找并替换，把 <code>s1</code>  替换成 <code>s2</code> 。 <code>/g</code>  表示全替换</li>\n</ul>\n<h3 id=\"vim-快捷键\"><a class=\"anchor\" href=\"#vim-快捷键\">#</a> vim 快捷键</h3>\n<ul>\n<li><code>ctrl+v,ctrl+i,#,esc</code> ： 多行批量注释</li>\n<li><code>ctrl+v,d</code> ： 多行删除</li>\n<li><code>ctrl+v,y</code> ： 多行复制</li>\n<li><code>ctrl+v,p</code> ： 多行粘贴</li>\n<li><code>ctrl+v,shift+&gt;</code> ： 多行右移（缩进）</li>\n<li><code>ctrl+v,shift+&lt;</code> ： 多行左移</li>\n</ul>\n<h2 id=\"grep-使用\"><a class=\"anchor\" href=\"#grep-使用\">#</a> grep 使用</h2>\n<ul>\n<li><code>grep [选项] pattern file1 file2 ...</code> ：   支持基本元字符  <code>^</code>   <code>$</code>   <code>.</code>   <code>*</code>   <code>[]</code>   <code>[^]</code>   <code>\\&lt;</code>   <code>\\&gt;</code>   <code>\\(\\)</code>   <code>\\&#123;\\&#125;</code>   <code>\\+</code>   <code>\\|</code></li>\n<li><code>egrep</code> ： 等效于 grep -E 支持扩展元字符  <code>?</code>   <code>+</code>   <code>&#123;&#125;</code>   <code>|</code>   <code>()</code></li>\n<li><code>\\w</code> ： 所有字母与数字</li>\n<li><code>\\W</code> ： 除了字母数字之外的字符</li>\n<li><code>\\b</code> ： 词边界 等效于  <code>\\&lt;</code>  或  <code>\\&gt;</code></li>\n</ul>\n<h2 id=\"sed流编辑器-使用\"><a class=\"anchor\" href=\"#sed流编辑器-使用\">#</a> sed（流编辑器） 使用</h2>\n<ul>\n<li><code>sed [可选项] command file(s)</code></li>\n</ul>\n<blockquote>\n<p>注：sed 不论是否查找到字符，返回的状态值都是 0，sed 一次只处理一行内容</p>\n</blockquote>\n<h3 id=\"工作流程\"><a class=\"anchor\" href=\"#工作流程\">#</a> 工作流程</h3>\n<ul>\n<li><code>sed r '1&#123;h;d&#125;;$G' /etc/passwd</code>  把第一行内容覆盖到暂存空间，然后把模式空间的第一行删除，再处理完最后一行后，把暂存空间内容追加到模式空间里。相当与把第一行内容移动到了最后一行</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>暂存空间</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    （H）<span class=\"token operator\">^</span>     <span class=\"token operator\">|</span>（G）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    （h）<span class=\"token operator\">|</span>     v（g）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>文件 <span class=\"token operator\">-</span><span class=\"token operator\">></span> sed模式空间（缓存）<span class=\"token operator\">-</span><span class=\"token operator\">></span> sed 的输出</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 小写表示覆盖大写表示追加</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 暂存空间内容默认是一个换行符</span></pre></td></tr></table></figure><h3 id=\"常见用法sed常被用于修改文件\"><a class=\"anchor\" href=\"#常见用法sed常被用于修改文件\">#</a> 常见用法（sed 常被用于修改文件）：</h3>\n<blockquote>\n<p>以下操作均不会修改原文件，只对模式空间内容进行修改，如果需要修改请使用  <code>sed -ri</code></p>\n</blockquote>\n<ul>\n<li>\n<p><code>sed -r '#pattern1#pattern2#' file</code> ：常用 sed 结构。把 <code>pattern1</code>  替换成 <code>pattern2</code> , 其中 <code>#</code> 可以换成任意的符号，例如 <code>@</code> ， <code>/</code></p>\n</li>\n<li>\n<p><code>sed -r 's/root/allen/' /etc/passwd</code> ：表示把  <code>/etc/passwd</code>  文件中每行第一个 root 改为 allen，  <code>-r</code>  表示支持扩展元字符的模式匹配， <code>s</code>  表示替换</p>\n</li>\n<li>\n<p><code>sed -r 's/root/allen/g' /etc/passwd</code> ： 表示把  <code>/etc/passwd</code>  文件中每行所有 root 改为 allen， <code>g</code>  表示全部替换</p>\n</li>\n<li>\n<p><code>sed -r 's/root/allen/gi' /etc/passwd</code> ：  <code>i</code>  表示忽略大小写</p>\n</li>\n<li>\n<p><code>sed -r '/root/d' /etc/passwd</code> ：  <code>d</code>  表示删除，单纯查找是如果不用 <code>/</code>  分割，需要加个转义  <code>sed -r '\\#root\\d' /etc/passwd</code></p>\n</li>\n</ul>\n<h3 id=\"定址指定行进行操作\"><a class=\"anchor\" href=\"#定址指定行进行操作\">#</a> 定址（指定行进行操作）</h3>\n<ul>\n<li><code>sed -r '3d' /etc/passwd</code> ：对第 3 行进行删除操作</li>\n<li><code>sed -r '1,3d' /etc/passwd</code> ： 对 1 到 3 行进行删除操作（包括第 3 行）</li>\n<li><code>sed -r '5,$d' /etc/passwd</code> ： 对第 5 行到之后全部内容进行删除</li>\n<li><code>sed -r '/root/,5d' /etc/passwd</code> ： 从带 root 的行到第 5 行进行删除（超过 5 行但是有 root 的也会删）</li>\n<li><code>sed -r '/root/,+5d' /etc/passwd</code> ：从带 root 的行开始再删 5 行</li>\n<li><code>sed -r '/root/!d' /etc/passwd</code> ： 删除不带 root 的行</li>\n<li><code>sed -r '1~2d' /etc/passwd</code> ： 删除奇数行（从 1 开始每隔 2 行删）</li>\n<li><code>sed -r '0~2d' /etc/passwd</code> ： 删除偶数行</li>\n<li><code>sed -r '1,5s/.*/#&amp;/' /etc/passwd</code> ： 1 到 5 行加注释， <code>&amp;</code>  表示前面的匹配项，在这里表示 <code>.*</code></li>\n</ul>\n<h3 id=\"各项命令\"><a class=\"anchor\" href=\"#各项命令\">#</a> 各项命令</h3>\n<ul>\n<li>替换命令 <code>s</code> ：参考  <code>定址（指定行进行操作）</code></li>\n<li>读取命令 <code>r</code>\n<ul>\n<li><code>sed -r '2r/etc/hosts' /etc/passwd</code> ：读完第二行后去读 <code>/etc/hosts</code>  文件</li>\n<li><code>sed -r '/lp/r /etc/hosts' /etc/passwd</code> ：读完带有 <code>lp</code>  的行后，去读 <code>/etc/hosts</code>  文件</li>\n</ul>\n</li>\n<li>写文件命令 <code>w</code>\n<ul>\n<li><code>sed -r '/root/w /etc/hosts' /etc/passwd</code> ：把  <code>/etc/passwd</code>  中带有 root 的行写入 <code>/etc/hosts</code>  中</li>\n</ul>\n</li>\n<li>追加命令 <code>a</code> ： <code>a</code>  是后插， <code>i</code>  是前插， <code>c</code>  是替换\n<ul>\n<li><code>sed -r '/root/a1111111' /etc/passwd</code> ：把  <code>/etc/passwd</code>  中带有 root 的行下追加一行内容为 <code>1111111</code>  的行</li>\n</ul>\n</li>\n<li>next 命令 <code>n</code> ：\n<ul>\n<li><code>sed -r '/root/&#123;n;d&#125;'</code> ： 把带有 <code>root</code>  的下一行删除， <code>;</code>  号可以分割多个命令</li>\n</ul>\n</li>\n<li>暂存取用命令 <code>H h G g</code> ：参考 <code>工作流程</code></li>\n<li>暂存和模式空间互换内容 <code>x</code> ：\n<ul>\n<li><code>sed -r '4h;5x;6G' \\etc\\passwd</code></li>\n</ul>\n</li>\n<li>反选命令 <code>!</code></li>\n<li>多重编辑选项 <code>-e</code> ：等效于 <code>;</code></li>\n</ul>\n<h2 id=\"awk文本分析工具\"><a class=\"anchor\" href=\"#awk文本分析工具\">#</a> awk (文本分析工具)</h2>\n<ul>\n<li><code>awk 'BEGIN&#123;&#125;&#123;&#125;END&#123;&#125;' /etc/passwd</code>\n<ul>\n<li><code>BEGIN&#123;command&#125;</code> ： 再读取文件前的预处理，也可以对内部变量进行修改</li>\n<li><code>&#123;command&#125;</code> ：处理文件内容</li>\n<li><code>END&#123;command&#125;</code> ： 文件处理完毕后的后处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"工作原理\"><a class=\"anchor\" href=\"#工作原理\">#</a> 工作原理</h3>\n<ul>\n<li>读取一行内容赋值给 <code>$0</code></li>\n<li>通过 <code>FS</code> （默认是 <code>\\t</code>  或者 <code>' '</code> ），分隔符进行拆分</li>\n<li>通过 <code>OFS</code>  (默认是 <code>\\t</code>  或者 <code>' '</code> )，对输出内容进行拼接</li>\n</ul>\n<h3 id=\"常见用法\"><a class=\"anchor\" href=\"#常见用法\">#</a> 常见用法</h3>\n<ul>\n<li><code>awk 'pattern' filename</code> ：示例 <code>awk '/root/' /etc/passwd</code></li>\n<li><code>awk '&#123;action&#125;' filename</code> ：示例 <code>awk -F: '&#123;print $1&#125;' /etc/passwd</code></li>\n<li><code>awk 'pattern&#123;action&#125;' filename</code> ：示例 <code>awk -F: '/root/&#123;print $1,$3&#125;' /etc/passwd</code></li>\n<li><code>command | awk 'pattern&#123;action&#125;'</code> ：示例 <code>df -P|grep '/' | awk '$4&gt;1000&#123;print $4&#125;'</code></li>\n</ul>\n<h3 id=\"awk内部变量\"><a class=\"anchor\" href=\"#awk内部变量\">#</a> awk 内部变量</h3>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ARGC</td>\n<td>命令行参数个数</td>\n</tr>\n<tr>\n<td>ARGV</td>\n<td>命令行参数排列</td>\n</tr>\n<tr>\n<td>ENVIRON</td>\n<td>支持队列中系统环境变量的使用</td>\n</tr>\n<tr>\n<td>FILENAME</td>\n<td>awk 浏览的文件名</td>\n</tr>\n<tr>\n<td>FNR</td>\n<td>浏览文件的记录数（每个文件单独计算）</td>\n</tr>\n<tr>\n<td>FS</td>\n<td>设置输入域分隔符，等价于命令行 -F 选项</td>\n</tr>\n<tr>\n<td>NF</td>\n<td>浏览记录的字段的个数</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>已读的记录数（所有文件一起计算）</td>\n</tr>\n<tr>\n<td>OFS</td>\n<td>输出域分隔符（分割字段）</td>\n</tr>\n<tr>\n<td>ORS</td>\n<td>输出记录分隔符（分割行）</td>\n</tr>\n<tr>\n<td>RS</td>\n<td>记录分隔符（分割行默认 <code>回车</code> ）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"格式化输出\"><a class=\"anchor\" href=\"#格式化输出\">#</a> 格式化输出</h3>\n<h4 id=\"print函数\"><a class=\"anchor\" href=\"#print函数\">#</a> print 函数</h4>\n<ul>\n<li><code>date |awk '&#123;print&quot;Mounth:&quot;$2 &quot;\\nYear:&quot;$NF&#125;'</code>  : 打印年月</li>\n<li><code>awk -F: '&#123;print &quot;username is:&quot;$1&quot;uid is:&quot;$3&#125;' /etc/passwd</code> : 打印用户名和 id</li>\n</ul>\n<h4 id=\"printf函数格式打印\"><a class=\"anchor\" href=\"#printf函数格式打印\">#</a> printf 函数（格式打印）</h4>\n<ul>\n<li><code>awk -F: '&#123;printf &quot;%-20s %-10s %-15s\\n&quot;,$1,$2,$3&#125;' /etc/passwd</code> : 对齐打印， <code>-</code>  左对齐，  <code>+</code>  右对齐</li>\n</ul>\n<h3 id=\"匹配字段~~\"><a class=\"anchor\" href=\"#匹配字段~~\">#</a> 匹配字段 <code>~</code> / <code>!~</code></h3>\n<ul>\n<li><code>awk '$0~/root/' /etc/passwd</code> ：匹配第一个有 root 的行</li>\n<li><code>awk '$0!~/root/' /etc/passwd</code> ：匹配没有 root 的所有行</li>\n</ul>\n<h3 id=\"比较表达式\"><a class=\"anchor\" href=\"#比较表达式\">#</a> 比较表达式</h3>\n<ul>\n<li><code>awk -F: '$3 == 0' /etc/passwd</code></li>\n<li><code>awk -F: '$3 &gt;= 0' /etc/passwd</code></li>\n</ul>\n<h3 id=\"条件表达式\"><a class=\"anchor\" href=\"#条件表达式\">#</a> 条件表达式</h3>\n<ul>\n<li><code>awk -F: '&#123;if($3&gt;10)print $0&#125;' /etc/passwd</code></li>\n<li><code>awk -F: '&#123; if($3&gt;10)&#123;print $1&#125;else&#123;print $2&#125; &#125;' /etc/passwd</code></li>\n</ul>\n<h3 id=\"其他模式\"><a class=\"anchor\" href=\"#其他模式\">#</a> 其他模式</h3>\n<ul>\n<li>逻辑表达式</li>\n<li>算数运算符</li>\n<li>三目运算符 (?😃</li>\n<li>循环 (和 C 语言语法类似)\n<ul>\n<li><code>while()&#123;&#125;</code></li>\n<li><code>for(;;)&#123;&#125;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"范围匹配\"><a class=\"anchor\" href=\"#范围匹配\">#</a> 范围匹配</h3>\n<ul>\n<li><code>awk -F: '/1/,/2/' /etc/passwd</code> ：搜索包括 1-2 范围的内容</li>\n</ul>\n<h2 id=\"linux用户权限管理\"><a class=\"anchor\" href=\"#linux用户权限管理\">#</a> Linux 用户权限管理</h2>\n<ul>\n<li><code>su username</code> ：切换用户</li>\n<li><code>exit</code> ：退出用户</li>\n<li><code>sudo command</code> ：以超管权限执行命令</li>\n<li><code>/etc/passwd</code> ：存放全部的用户名和密码</li>\n<li><code>useradd username</code> ：添加用户</li>\n<li><code>userdel username</code> ：删除用户</li>\n<li><code>useradd -m username</code> ：添加用户名，并在 <code>/home</code>  下创建用户目录</li>\n<li><code>userdel -r username</code> ：删除用户，并删除用户目录</li>\n<li><code>userdel -f username</code> ：强制删除用户，登陆情况下也会删除</li>\n<li><code>passwd username</code> ：给用户设置密码</li>\n<li><code>whoami</code> ：查看当前用户名</li>\n</ul>\n<h4 id=\"etcpasswd文件内容\"><a class=\"anchor\" href=\"#etcpasswd文件内容\">#</a> /etc/passwd 文件内容</h4>\n<ul>\n<li><code>用户名:密码标志（X）:uid: gid: 用户全名: 家目录 shell目录</code></li>\n<li><code>shell chsh</code>  修改 shell 的目录，一般有两种 <code>/bin/sh</code>  和  <code>/bin/bash</code></li>\n<li><code>usermod -s /bin/bash username</code> ： 修改用户 shell</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root:x:0:0:root:/root:/bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>alice::1001:1001::/home/alice:/bin/sh</pre></td></tr></table></figure><blockquote>\n<p>用户 ID 和组 ID 是相互独立的</p>\n</blockquote>\n<hr />\n<h3 id=\"用户组\"><a class=\"anchor\" href=\"#用户组\">#</a> 用户组</h3>\n<p>创建用户时，默认会把用户放入自己用户名对应的组内</p>\n<ul>\n<li><code>/etc/group</code> ：存放全部的用户组</li>\n<li><code>useradd -g 组名 username</code> ：创建用户并添加到指定组内（组必须已存在）</li>\n<li><code>groupadd groupname</code> ：添加用户组</li>\n<li><code>groupmod -n newname groupname</code> ：给用户组改名</li>\n<li><code>groupdel groupname</code> ：删除用户组</li>\n<li><code>usermod -g groupname username</code> ：修改用户初始组</li>\n<li><code>usermod -G groupname1,groupname2 username </code> ：修改用户附加组</li>\n</ul>\n<h4 id=\"etcgroup文件内容\"><a class=\"anchor\" href=\"#etcgroup文件内容\">#</a> /etc/group 文件内容</h4>\n<ul>\n<li><code>组名: 密码标志（X）: gid :附加用户1,附加用户2</code> ：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root:x:0:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>adm:x:4:allen</pre></td></tr></table></figure><h3 id=\"shadow影子文件\"><a class=\"anchor\" href=\"#shadow影子文件\">#</a> shadow (影子文件)</h3>\n<ul>\n<li><code>/etc/shadow</code> ：用户影子文件</li>\n<li><code>/etc/gshadow</code> ：组影子文件</li>\n</ul>\n<hr />\n<h3 id=\"文件权限\"><a class=\"anchor\" href=\"#文件权限\">#</a> 文件权限</h3>\n<h4 id=\"查看文件权限\"><a class=\"anchor\" href=\"#查看文件权限\">#</a> 查看文件权限</h4>\n<ul>\n<li><code>ls -l</code> ：查看文件的权限</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 是否是文件夹（d/-）+3 组 rwx/-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># rwx 分别代表 可读、可写、可执行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 第一组 rwx 代表文件所有者的权限</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 第二组 rwx 代表所属组对文件的权限</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 第三组 rwx 代表所有人对文件的权限</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 3 组 rwx 也可以表示为 421 421 421 或者 777</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 文件权限  所有者 所属组 大小 修改日期  文件名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rw-rw-rw- <span class=\"token number\">1</span> allen allen   <span class=\"token number\">0</span> Feb  <span class=\"token number\">4</span> <span class=\"token number\">10</span>:15 m</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>drwxrwxrwx <span class=\"token number\">1</span> allen allen <span class=\"token number\">512</span> Feb  <span class=\"token number\">7</span> <span class=\"token number\">19</span>:48 <span class=\"token builtin class-name\">test</span></pre></td></tr></table></figure><h4 id=\"修改文件权限\"><a class=\"anchor\" href=\"#修改文件权限\">#</a> 修改文件权限</h4>\n<ul>\n<li><code>chmod [ugoa][+-=][rwx] file/dir</code>  ：修改文件权限</li>\n<li><code>chmod a+x file1</code>  ：给所有人添加可执行权限</li>\n<li><code>chmod 444 file1</code>  ：给所有人只读权限</li>\n<li><code>chmod -R 444 dir</code>  ：递归修改文件夹内文件为只读权限</li>\n<li><code>chown username filename</code>  ：修改文件的所有人</li>\n<li><code>chgrp groupname filename</code>  ：修改文件的所有组</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>u</td>\n<td>user (文件的所有者)</td>\n</tr>\n<tr>\n<td>g</td>\n<td>group (与文件相关联的组)</td>\n</tr>\n<tr>\n<td>o</td>\n<td>other (所有其他用户)</td>\n</tr>\n<tr>\n<td>a</td>\n<td>all (ugo 的所有用户)</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>操作符含义</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>为指定的用户类型添加权限</td>\n</tr>\n<tr>\n<td>-</td>\n<td>为指定的用户类型删除权限</td>\n</tr>\n<tr>\n<td>=</td>\n<td>设定或重置指定用户类型的权限</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Linux"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/micro-service/Mro-Service-Introduction/",
            "url": "https://allengx.gitee.io/computer-science/study/micro-service/Mro-Service-Introduction/",
            "title": "微服务概述和设计",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"微服务基本理论\"><a class=\"anchor\" href=\"#微服务基本理论\">#</a> 微服务基本理论</h1>\n<h2 id=\"cap定理\"><a class=\"anchor\" href=\"#cap定理\">#</a> CAP 定理</h2>\n<ul>\n<li>C（一致性）：所有分布式系统的数据在同一时间段内，保持一致且最新。</li>\n<li>A（可用性）：集群中部分节点出现故障后，集群依旧可以提供正常的服务。</li>\n<li>P（分区容错性）：在通信时限内，系统如果无法达成数据一致性，那么就必须在 C 和 A 之间做出选择。</li>\n</ul>\n<p>三者同时只能满足其二（CP 或 AP）。</p>\n<h2 id=\"base理论\"><a class=\"anchor\" href=\"#base理论\">#</a> Base 理论</h2>\n<ul>\n<li>BA（基本可用）：分布式系统出现故障时，允许损失部分可用性，保证核心功能可用。</li>\n<li>S（软状态）：允许系统存在中间状态，不会影响系统整体可用。</li>\n<li>E（最终一致性）：所有数据经过一段时间后可以最终达到一致</li>\n</ul>\n<h2 id=\"高并发\"><a class=\"anchor\" href=\"#高并发\">#</a> 高并发</h2>\n<p>同时并行处理多个请求，相应的考察指标有：</p>\n<ul>\n<li>响应时间：一次请求发起到得到响应所需时间。</li>\n<li>吞吐量：单位之间内处理的请求数量。</li>\n<li>每秒查询率：和吞吐量类似。</li>\n<li>并发用户数：同时能够承载的正常用户数量。</li>\n</ul>\n<p>针对提高高并发的处理办法：</p>\n<ul>\n<li>垂直扩展：提升单机的处理能力。升级机器配置或者提高单机架构性能。</li>\n<li>水平扩展：增加服务器数量。\n<ul>\n<li>数据库进行拆分：分表、分库、表分区</li>\n</ul>\n</li>\n<li>负载均衡</li>\n<li>集群</li>\n</ul>\n<h2 id=\"高性能\"><a class=\"anchor\" href=\"#高性能\">#</a> 高性能</h2>\n<ul>\n<li>RPC 通讯</li>\n<li>SQL 优化</li>\n<li>Redis 缓存</li>\n<li>GC 优化</li>\n<li>link-pool（链接池）</li>\n</ul>\n<h2 id=\"高可用\"><a class=\"anchor\" href=\"#高可用\">#</a> 高可用</h2>\n<p>高可用要求服务一纸可用，需要解决如下几个问题：</p>\n<ul>\n<li>单点故障</li>\n<li>流量过载</li>\n<li>服务器更新</li>\n</ul>\n<p>解决思路参考：<a href=\"###%E8%A7%A3%E5%86%B3%E9%AB%98%E5%8F%AF%E7%94%A8%E9%97%AE%E9%A2%98\">Kubernetes 简介</a></p>\n<h2 id=\"linux磁盘扩容\"><a class=\"anchor\" href=\"#linux磁盘扩容\">#</a> Linux 磁盘扩容</h2>\n<ul>\n<li>LVM：通过逻辑卷实现对硬盘的扩容。把多个物理卷通过逻辑上的集合而视为一个整体来使用，从而达到扩容的效果</li>\n</ul>\n<h1 id=\"微服务的概述\"><a class=\"anchor\" href=\"#微服务的概述\">#</a> 微服务的概述</h1>\n<p>把一个大型的但应用程序拆分为多个微服务，每个服务业务可以独立的进行开发、管理和迭代。核心目的是对系统进行解耦，提供更加灵活的服务支持，实现分布式的系统开发。</p>\n<h2 id=\"ddd领域驱动设计\"><a class=\"anchor\" href=\"#ddd领域驱动设计\">#</a> DDD 领域驱动设计</h2>\n<p>pass</p>\n<h2 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h2>\n<ul>\n<li>一系列的独立的服务共同组成的系统</li>\n<li>单独部署，泡在自己的进程中</li>\n<li>每个服务为独立的业务开发</li>\n<li>分布式管理</li>\n<li>非常强调隔离性</li>\n</ul>\n<h2 id=\"标准\"><a class=\"anchor\" href=\"#标准\">#</a> 标准</h2>\n<ul>\n<li>分布式服务组成的系统</li>\n<li>按照业务，而不是技术来划分组织</li>\n<li>强服务个体和弱通信（Smart endpoints and dumb pipes）</li>\n<li>自动化运维（DevOps）</li>\n<li>高度容错性</li>\n<li>快速演化和迭代</li>\n</ul>\n<h2 id=\"分布式常见问题\"><a class=\"anchor\" href=\"#分布式常见问题\">#</a> 分布式常见问题</h2>\n<ul>\n<li>客户端如何和多个服务进行通讯？</li>\n<li>服务之间如何通讯？</li>\n<li>服务如何管理？</li>\n<li>服务挂了如何解决？</li>\n</ul>\n<h3 id=\"客户端如何和多个服务进行通讯\"><a class=\"anchor\" href=\"#客户端如何和多个服务进行通讯\">#</a> 客户端如何和多个服务进行通讯</h3>\n<p>通过 API 网关，进行统一的调度</p>\n<h3 id=\"服务之间如何通讯\"><a class=\"anchor\" href=\"#服务之间如何通讯\">#</a> 服务之间如何通讯</h3>\n<ul>\n<li>同步（对内 RPC、对外 RESTFUL）\n<ul>\n<li>HTTP：\n<ul>\n<li>json 数据</li>\n<li>跨防火墙（json 字符串）</li>\n</ul>\n</li>\n<li>RPC：\n<ul>\n<li>传输效率高</li>\n<li>二进制数据，减少传输大小</li>\n<li>序列化、反序列化次数少</li>\n<li>不支持跨防火墙（二进制不支持）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>异步\n<ul>\n<li>消息队列</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务如何管理服务注册与发现\"><a class=\"anchor\" href=\"#服务如何管理服务注册与发现\">#</a> 服务如何管理 —— 服务注册与发现</h3>\n<p>服务启动后会向一个中心服务（服务中心）去注册 IP，客户端统一像服务中心去申请访问其他服务的 IP 地址</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824154427085.png\" alt=\"image-20200824154427085\" /></p>\n<h3 id=\"服务挂了如何解决\"><a class=\"anchor\" href=\"#服务挂了如何解决\">#</a> 服务挂了如何解决</h3>\n<h4 id=\"网络本身不可靠\"><a class=\"anchor\" href=\"#网络本身不可靠\">#</a> 网络本身不可靠</h4>\n<ul>\n<li>重试机制</li>\n</ul>\n<h4 id=\"流量过大扛不住\"><a class=\"anchor\" href=\"#流量过大扛不住\">#</a> 流量过大扛不住</h4>\n<ul>\n<li>限流</li>\n<li>熔断机制</li>\n<li>负载均衡</li>\n<li>服务降级（本地缓存）</li>\n</ul>\n<h2 id=\"微服务设计模式\"><a class=\"anchor\" href=\"#微服务设计模式\">#</a> 微服务设计模式</h2>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824160214121.png\" alt=\"image-20200824160214121\" /></p>\n<h4 id=\"常见的设计模式\"><a class=\"anchor\" href=\"#常见的设计模式\">#</a> 常见的设计模式：</h4>\n<h5 id=\"聚合器模式\"><a class=\"anchor\" href=\"#聚合器模式\">#</a> 聚合器模式：</h5>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824160250721.png\" alt=\"image-20200824160250721\" /></p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824160530908.png\" alt=\"image-20200824160530908\" /></p>\n<p><strong>简述：</strong> Aggregator 发送一条请求到对应的 Service，并且获得返回结果后返回给客户端</p>\n<h5 id=\"代理模式\"><a class=\"anchor\" href=\"#代理模式\">#</a> 代理模式：</h5>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824160405940.png\" alt=\"image-20200824160405940\" /></p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824160601695.png\" alt=\"image-20200824160601695\" /></p>\n<p>** 简述：**Proxy 发送一条请求到对应的 Service，由对应的 Service 返回结果给客户端</p>\n<h5 id=\"链式模式\"><a class=\"anchor\" href=\"#链式模式\">#</a> 链式模式：</h5>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824161110611.png\" alt=\"image-20200824161110611\" /></p>\n<p>** 简述：**ServiceA -&gt; ServiceB -&gt; ServiceC，最终由 ServiceA 返回对应的结果给客户端</p>\n<h5 id=\"分支模式\"><a class=\"anchor\" href=\"#分支模式\">#</a> 分支模式：</h5>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824161342759.png\" alt=\"image-20200824161342759\" /></p>\n<p><strong>简述：</strong> 和链式有点类似只不过这里可能是横向的调用</p>\n<pre><code>ServiceA -&gt; ServiceB\nServiceA -&gt; ServiceC\n...\n</code></pre>\n<h5 id=\"数据共享模式\"><a class=\"anchor\" href=\"#数据共享模式\">#</a> 数据共享模式：</h5>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824161818179.png\" alt=\"image-20200824161818179\" /></p>\n<p>** 简述：** 多个服务之间共享一个缓存和数据库</p>\n<h5 id=\"异步消息传递模式\"><a class=\"anchor\" href=\"#异步消息传递模式\">#</a> 异步消息传递模式：</h5>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824162102751.png\" alt=\"image-20200824162102751\" /></p>\n<p>** 简述：** 异步消息强调消息的异步性，再通讯过程中加入消息对列的方式来完成</p>\n<h2 id=\"微服务架构设计模式\"><a class=\"anchor\" href=\"#微服务架构设计模式\">#</a> 微服务架构设计模式</h2>\n<ul>\n<li>伸缩能力</li>\n<li>可用性</li>\n<li>健壮性</li>\n<li>弹性</li>\n<li>独立的匿名服务</li>\n<li>去中心化</li>\n<li>故障隔离</li>\n<li>自动供给</li>\n<li>通过 DevOps 实现持续交付</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200827201913354.png\" alt=\"image-20200827201913354\" /></p>\n<h3 id=\"拆分模式\"><a class=\"anchor\" href=\"#拆分模式\">#</a> 拆分模式</h3>\n<h4 id=\"根据业务拆分\"><a class=\"anchor\" href=\"#根据业务拆分\">#</a> 根据业务拆分</h4>\n<p>...</p>\n<h4 id=\"利用子领域拆分\"><a class=\"anchor\" href=\"#利用子领域拆分\">#</a> 利用子领域拆分</h4>\n<p>...</p>\n<h4 id=\"根据事务拆分\"><a class=\"anchor\" href=\"#根据事务拆分\">#</a> 根据事务拆分</h4>\n<p>...</p>\n<h4 id=\"扼杀者模式\"><a class=\"anchor\" href=\"#扼杀者模式\">#</a> 扼杀者模式</h4>\n<p>...</p>\n<h4 id=\"舱壁模式\"><a class=\"anchor\" href=\"#舱壁模式\">#</a> 舱壁模式</h4>\n<p>...</p>\n<h4 id=\"sidecar模式\"><a class=\"anchor\" href=\"#sidecar模式\">#</a> Sidecar 模式</h4>\n<p>...</p>\n<h3 id=\"集成模式\"><a class=\"anchor\" href=\"#集成模式\">#</a> 集成模式</h3>\n<h4 id=\"api-网关模式\"><a class=\"anchor\" href=\"#api-网关模式\">#</a> API 网关模式</h4>\n<h4 id=\"聚合模式\"><a class=\"anchor\" href=\"#聚合模式\">#</a> 聚合模式</h4>\n<h4 id=\"代理模式-2\"><a class=\"anchor\" href=\"#代理模式-2\">#</a> 代理模式</h4>\n<h4 id=\"路由网关模式\"><a class=\"anchor\" href=\"#路由网关模式\">#</a> 路由网关模式</h4>\n<h4 id=\"链式微服务模式\"><a class=\"anchor\" href=\"#链式微服务模式\">#</a> 链式微服务模式</h4>\n<h4 id=\"分支模式-2\"><a class=\"anchor\" href=\"#分支模式-2\">#</a> 分支模式</h4>\n<h4 id=\"客户端分解模式\"><a class=\"anchor\" href=\"#客户端分解模式\">#</a> 客户端分解模式</h4>\n<h3 id=\"数据库模式\"><a class=\"anchor\" href=\"#数据库模式\">#</a> 数据库模式</h3>\n<h4 id=\"服务独占数据库\"><a class=\"anchor\" href=\"#服务独占数据库\">#</a> 服务独占数据库</h4>\n<p>...</p>\n<h4 id=\"服务共享数据库\"><a class=\"anchor\" href=\"#服务共享数据库\">#</a> 服务共享数据库</h4>\n<p>...</p>\n<h4 id=\"命令查询隔离\"><a class=\"anchor\" href=\"#命令查询隔离\">#</a> 命令查询隔离</h4>\n<p>...</p>\n<h4 id=\"事件源模式\"><a class=\"anchor\" href=\"#事件源模式\">#</a> 事件源模式</h4>\n<p>...</p>\n<h4 id=\"saga模式\"><a class=\"anchor\" href=\"#saga模式\">#</a> Saga 模式</h4>\n<p>...</p>\n<h3 id=\"观察者模式\"><a class=\"anchor\" href=\"#观察者模式\">#</a> 观察者模式</h3>\n<h4 id=\"日志聚合\"><a class=\"anchor\" href=\"#日志聚合\">#</a> 日志聚合</h4>\n<p>...</p>\n<h4 id=\"性能指标\"><a class=\"anchor\" href=\"#性能指标\">#</a> 性能指标</h4>\n<p>...</p>\n<h4 id=\"分布式追踪\"><a class=\"anchor\" href=\"#分布式追踪\">#</a> 分布式追踪</h4>\n<p>...</p>\n<h4 id=\"健康检查\"><a class=\"anchor\" href=\"#健康检查\">#</a> 健康检查</h4>\n<p>...</p>\n<h3 id=\"跨领域模式\"><a class=\"anchor\" href=\"#跨领域模式\">#</a> 跨领域模式</h3>\n<h4 id=\"外部化配置\"><a class=\"anchor\" href=\"#外部化配置\">#</a> 外部化配置</h4>\n<p>...</p>\n<h4 id=\"服务发现模式\"><a class=\"anchor\" href=\"#服务发现模式\">#</a> 服务发现模式</h4>\n<p>...</p>\n<h4 id=\"熔断模式\"><a class=\"anchor\" href=\"#熔断模式\">#</a> 熔断模式</h4>\n<p>...</p>\n<h4 id=\"蓝绿部署模式\"><a class=\"anchor\" href=\"#蓝绿部署模式\">#</a> 蓝绿部署模式</h4>\n<p>...</p>\n<h2 id=\"如何拆分微服务\"><a class=\"anchor\" href=\"#如何拆分微服务\">#</a> 如何拆分微服务</h2>\n<h3 id=\"拆分粒度\"><a class=\"anchor\" href=\"#拆分粒度\">#</a> 拆分粒度</h3>\n<p>...</p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务",
                "微服务"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/python/Python-Build-In/",
            "url": "https://allengx.gitee.io/computer-science/study/python/Python-Build-In/",
            "title": "python内建函数",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"python内建函数\"><a class=\"anchor\" href=\"#python内建函数\">#</a> python 内建函数</h1>\n<h2 id=\"build-in-function\"><a class=\"anchor\" href=\"#build-in-function\">#</a> build-in function</h2>\n<ul>\n<li>\n<p><strong>abs</strong>：求绝对值，复数返回大小<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919150037738.png\" alt=\"image-20200919150037738\" /></p>\n</li>\n<li>\n<p><strong>all</strong>：可迭代对象内是否存在空元素<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(1).png\" alt=\"8d45522f17bbe1b7978c73af8f3cd1ee.png\" /></p>\n</li>\n<li>\n<p><strong>any</strong>：可迭代对象内是否存在非空元素<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(2).png\" alt=\"296d63f7ecea65e38c49820842b13479.png\" /></p>\n</li>\n<li>\n<p><strong>ascii</strong>：转为 ascii 编码<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(3).png\" alt=\"db917a03adea4060bbda11eaa3412af8.png\" /></p>\n</li>\n<li>\n<p><strong>bin</strong>：转为二进制<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(4).png\" alt=\"b8f45c0c4645ba1931d58e05d8656641.png\" /></p>\n</li>\n<li>\n<p><strong>bool</strong>：转为 bool 类型<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(5).png\" alt=\"b9fd468eb7ff3b3b30071ee3a6d39db8.png\" /></p>\n</li>\n<li>\n<p><strong>breakpoint</strong>：打上断点，通过输入 n 键（Next）进行调试<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(6).png\" alt=\"8fde50e9f620207a5f1224c879c15cb4.png\" /></p>\n</li>\n<li>\n<p><strong>bytearray</strong>：字节数组（可变）<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(7).png\" alt=\"930ad90e2480861e262fae21d08703f3.png\" /></p>\n</li>\n</ul>\n<p>bytearray 和 bytes 不一样的地方在于，bytearray 是可变的。　　<br />\n和字符串一样，字节类型也是不可变序列，而字节数组是可变版本的字节，它们的关系就相当于 list 与 tuple。<br />\n由于和字符串一样是序列类型，字节和字节数组可用的方法基本上一致。</p>\n<ul>\n<li>\n<p><strong>bytes</strong>：字节数组（不可变）<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(8).png\" alt=\"aee08af1697372d08f5d747c13b48213.png\" /></p>\n</li>\n<li>\n<p><strong>callable</strong>：是否可调用<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(67).png\" alt=\"cc6148284c84a79065132b9f6cf4e7d5.png\" /></p>\n</li>\n<li>\n<p><strong>chr</strong>：整数转字符<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(66).png\" alt=\"6b0be29023048400ec2cdd4f25490ee4.png\" /></p>\n</li>\n<li>\n<p><strong>classmethod</strong>：类方法<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(65).png\" alt=\"54f2f74d5b738ec65d87ad47fbe9ea0b.png\" /></p>\n</li>\n<li>\n<p><strong>compile</strong>：解析字符串为代码<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(64).png\" alt=\"bcd5589ec5d62490ee26ba94db3b3e3a.png\" /></p>\n</li>\n<li>\n<p><strong>complex</strong>：将字符串或数字转换为复数<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(63).png\" alt=\"e94574370e07295500f908f22ad454ed.png\" /></p>\n</li>\n<li>\n<p><strong>delattr</strong>：删除属性<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(62).png\" alt=\"a02027717e03531f6037826144ae307e.png\" /></p>\n</li>\n<li>\n<p><strong>dir</strong>：返回当前本地范围内的名称列表<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(61).png\" alt=\"6b7b457ee191a1247c8144f427b3551d.png\" /></p>\n</li>\n<li>\n<p><strong>divmod</strong>：取整除和求余<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(60).png\" alt=\"dfba0380a3d2acfc0efeea464e28c763.png\" /></p>\n</li>\n<li>\n<p><strong>enumerate</strong>：带下标的便利<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(59).png\" alt=\"6080d381cd5df542d2f063cac018ed17.png\" /></p>\n</li>\n<li>\n<p><strong>eval</strong>：执行字符串表达式<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(58).png\" alt=\"95cb6d7984845654350a33f7393941cd.png\" /></p>\n</li>\n<li>\n<p><strong>exec</strong>：执行字符串指令<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(57).png\" alt=\"02375bd8aa3c851fe908d4da37a12d87.png\" /></p>\n</li>\n<li>\n<p><strong>filter</strong>：过滤迭代器对象<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(56).png\" alt=\"4d5059f28a9bb922b15e076c97a9026f.png\" /></p>\n</li>\n<li>\n<p><strong>float</strong>：浮点数<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(55).png\" alt=\"ce331033297d4f29f30f1923bff466c1.png\" /></p>\n</li>\n<li>\n<p><strong>format</strong>：格式化输出<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(54).png\" alt=\"245cd98878331aff7c44a8016df2b9e9.png\" /></p>\n</li>\n<li>\n<p><strong>frozenset</strong>：不可变集合<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(53).png\" alt=\"77b1d2872c01071ed339136218699458.png\" /></p>\n</li>\n<li>\n<p><strong>getattr</strong>：获取对象属性<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(52).png\" alt=\"9a8340505084a6f435479fdcaaa081ad.png\" /></p>\n</li>\n<li>\n<p><strong>globals</strong>：全局符号表字典<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(51).png\" alt=\"c2280ac9cdf8815a4c96ee02f6a908ef.png\" /></p>\n</li>\n<li>\n<p><strong>hasattr</strong>：对象是否存在属性<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(50).png\" alt=\"152576b21f46b582a7dacf3280dc91fb.png\" /></p>\n</li>\n<li>\n<p><strong>hash</strong>：哈希<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(49).png\" alt=\"23c28626a76b67b25983f9719151214e.png\" /></p>\n</li>\n<li>\n<p><strong>hex</strong>：整数转 16 进制<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(48).png\" alt=\"83d8dad9b82e2450cd970cb82b891dcc.png\" /></p>\n</li>\n<li>\n<p><strong>id</strong>：获取唯一 id<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(47).png\" alt=\"90a48444523965b94bffc8cbb771f0b2.png\" /></p>\n</li>\n<li>\n<p><strong>input</strong>：输入<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(46).png\" alt=\"2ae13e404c813a280ce0967c08bd33e9.png\" /></p>\n</li>\n<li>\n<p><strong>int</strong>：整数<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(45).png\" alt=\"a8498720a0fae0453b65b7dae7e05ad1.png\" /></p>\n</li>\n<li>\n<p><strong>isinstance</strong>：判断对象和类关系<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(44).png\" alt=\"544b16158724fc148734d3781ef086b4.png\" /></p>\n</li>\n<li>\n<p><strong>issubclass</strong>：判断两个类是否是父子关系<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(43).png\" alt=\"6b3232d9c79caec881b4e6433cf09a45.png\" /></p>\n</li>\n<li>\n<p><strong>iter</strong>：迭代函数<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(42).png\" alt=\"959825d2b01ce74587475fe77782f5b3.png\" /></p>\n</li>\n<li>\n<p><strong>len</strong>：求长度<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(41).png\" alt=\"0234affb8519769563b3ebe6240d7a19.png\" /></p>\n</li>\n<li>\n<p><strong>list</strong>：列表<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(40).png\" alt=\"acee76fe033f84ec2117722ca7a2a871.png\" /></p>\n</li>\n<li>\n<p><strong>locals</strong>：本地符号表字典<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(39).png\" alt=\"d67aa94753b49f3347cd7ea0b9968c60.png\" /></p>\n</li>\n<li>\n<p><strong>map</strong>：对迭代器的对象进行操作<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(38).png\" alt=\"9982472069b15175825753e5a2d43f0b.png\" /></p>\n</li>\n<li>\n<p><strong>max</strong>：求最大<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(37).png\" alt=\"ef45c104d8ae88eb5f3e6117c7407b0b.png\" /></p>\n</li>\n<li>\n<p><strong>min</strong>：求最小<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(36).png\" alt=\"babe27d487bf563bebf1462ec5e05f20.png\" /></p>\n</li>\n<li>\n<p><strong>next</strong>：迭代器的迭代函数<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(35).png\" alt=\"83536150effb54eaefabd2dba5667ac6.png\" /></p>\n</li>\n<li>\n<p><strong>oct</strong>：整数转 8 进制<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(34).png\" alt=\"a8c290e6bc28bb02234fa7ae8c100bf7.png\" /></p>\n</li>\n<li>\n<p><strong>open</strong>：打开文件<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(33).png\" alt=\"ef3187e949ae86f23889d309bfd403d3.png\" /></p>\n</li>\n<li>\n<p><strong>ord</strong>：字符转整数<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(32).png\" alt=\"cc09a2eaa600978d4c142e65d47b5e2e.png\" /></p>\n</li>\n<li>\n<p><strong>pow</strong>：求平方<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(31).png\" alt=\"2fb14a3146c88bca9e17ac7e3b9a3a7c.png\" /></p>\n</li>\n<li>\n<p><strong>print</strong>：打印<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(30).png\" alt=\"d42afa92add7e4264807a8d690129d41.png\" /></p>\n</li>\n<li>\n<p><strong>property</strong>：属性<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(29).png\" alt=\"6f081fce7dd141d48e306d2acd0981ae.png\" /></p>\n</li>\n<li>\n<p><strong>range</strong>：序列类型<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(28).png\" alt=\"57b9cfaa0003a7107860b073fd68421f.png\" /></p>\n</li>\n<li>\n<p><strong>repr</strong>：打印对象字符串<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(27).png\" alt=\"d186aa7169c7f85e1a3d968cd17999fb.png\" /></p>\n</li>\n<li>\n<p><strong>reversed</strong>：倒序<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(26).png\" alt=\"3d807b7d60ca4bf72b22c609ee616e85.png\" /></p>\n</li>\n<li>\n<p><strong>round</strong>：四舍五入取整<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(25).png\" alt=\"6f67b9be10ea592b5e3369329a93e669.png\" /></p>\n</li>\n<li>\n<p><strong>set</strong>：集合<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(24).png\" alt=\"4a330910f174f320bdbeb3c2581c8984.png\" /></p>\n</li>\n<li>\n<p><strong>setattr</strong>：设置对象属性<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(23).png\" alt=\"76d2428a838efc5996aee465d00a781e.png\" /></p>\n</li>\n<li>\n<p><strong>slice</strong>：切片<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(22).png\" alt=\"0419e33bdb865991653fef1c086629f8.png\" /></p>\n</li>\n<li>\n<p><strong>sorted</strong>：排序<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(21).png\" alt=\"4780dcee40479ce2189566b3c083758d.png\" /></p>\n</li>\n<li>\n<p><strong>staticmethod</strong>：静态类型函数装饰器<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(20).png\" alt=\"d7a3662b75ca74a485e353090b2345e1.png\" /></p>\n</li>\n<li>\n<p><strong>str</strong>：字符串<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(19).png\" alt=\"487fe0e867a1037d4ff019cfce579579.png\" /></p>\n</li>\n<li>\n<p><strong>sum</strong>：求和<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(18).png\" alt=\"3a74a8d815583c0296b57750944dbc36.png\" /></p>\n</li>\n<li>\n<p><strong>super</strong>：调用父类方法</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">super</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> inst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    mro <span class=\"token operator\">=</span> inst<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>mro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> mro<span class=\"token punctuation\">[</span>mro<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(17).png\" alt=\"924c70d016ee3605ffaa6bd92c7176bd.png\" /><br />\nmro 的 C3 超类线性化算法：<br />\n算法思想：</p>\n<ul>\n<li>对象父类的集合  <code>「L(自己)」</code>  可以视作 <code>「自己」</code>  + 每个 <code>「L(父类)」</code>  +  <code>「父类集合」</code></li>\n<li>在存在多个父类合并的情况下，优先提取出第一个集合中的第一个元素与其他集合进行比对，如果其同时出现在其他集合的 <code>非第一的位置</code> 则跳至下一个集合重复上述操作。否则则把该元素添加至父类列表，并从其余所有集合中移除，完成后再次从第一个集合提取第一个元素重复上述内容。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(16).png\" alt=\"773d44c1b5451bd76a106d69574a2fdf.png\" /></p>\n<p>以上图的 Z 为例：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>L<span class=\"token punctuation\">(</span>O<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>L<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>L<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>L<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>L<span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>L<span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">]</span>      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>L<span class=\"token punctuation\">(</span>K2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K2<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>L<span class=\"token punctuation\">(</span>K3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K3<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token operator\">+</span>L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>K3<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>K2<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K2<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K3<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">,</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">,</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span>       </pre></td></tr><tr><td data-num=\"42\"></td><td><pre> L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">,</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>注意事项： <code>super().func()</code>  调用，不像  <code>类名.func()</code>  的显式，而是带有一些隐式的逻辑。 <code>super().func()</code>   的调用链路取决与  <code>mro</code>  的线性化顺序，会受到继承的父类顺序，以及是否存在多继承等问题而发生变化，并且如果需要调用多个父类的函数，就必须保证父类也支持  <code>super()</code>  操作，否则容易出现调用链中断的情况。</p>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yaGV0dGluZ2VyLndvcmRwcmVzcy5jb20vMjAxMS8wNS8yNi9zdXBlci1jb25zaWRlcmVkLXN1cGVyLw==\">传送门</span></p>\n<ul>\n<li><strong><strong>mro</strong></strong>：父类线性化</li>\n</ul>\n<p><code>__mro__</code> 的返回值是一个 tuple，其中包含本身的父类线性关系。包括父类和父类的父类与本身的一个线性化关系。<br />\n可以通过  <code>__mro__.index(class)</code>  的方式来确定某个类在线性关系中所处的位置</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(15).png\" alt=\"689db1438b3ff11bca3fbc44ff998dcf.png\" /></p>\n<ul>\n<li><strong><strong>bases</strong></strong>：父类元组</li>\n</ul>\n<p><code>__bases__</code> ：获取子类对象的上一层父类元组</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(14).png\" alt=\"321b0266159600b2f87b54e6ce913ac3.png\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yaGV0dGluZ2VyLndvcmRwcmVzcy5jb20vMjAxMS8wNS8yNi9zdXBlci1jb25zaWRlcmVkLXN1cGVyLw==\">相关 mro 介绍</span></p>\n<ul>\n<li>\n<p><strong>tuple</strong>：元组<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(13).png\" alt=\"cb4f0a949f79d609230e1c2e0fcb6bf1.png\" /></p>\n</li>\n<li>\n<p><strong>type</strong>：获取对象的类型<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(12).png\" alt=\"c4cba5663227461e212276c874acfdb0.png\" /></p>\n</li>\n<li>\n<p><strong>vars</strong>：查看对象内属性<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(11).png\" alt=\"af184e8f621e70ecf397799145b60138.png\" /></p>\n</li>\n<li>\n<p><strong>zip</strong>：压缩两个可迭代对象为一个<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(10).png\" alt=\"0f1abeded0c4884aef918e53a8fd64c5.png\" /></p>\n</li>\n<li>\n<p><strong> <code>__import__</code> </strong> ：和 import 功能类似<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(9).png\" alt=\"5921973253da54d4c66f8f76a1e6b0ff.png\" /></p>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python",
                "Python"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/python/Python2-Diff-Python3/",
            "url": "https://allengx.gitee.io/computer-science/study/python/Python2-Diff-Python3/",
            "title": "python2和python3差异",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"python2对比python3差异\"><a class=\"anchor\" href=\"#python2对比python3差异\">#</a> python2 对比 python3 差异</h1>\n<ul>\n<li><a href=\"#print is a Function\">print 函数调整</a></li>\n<li><a href=\"#Views And Iterators Instead Of Lists\">更多的地方返回值改为 「View」「Iteators」而不再是「List」</a></li>\n<li><a href=\"#Ordering\">比较功能的修改</a></li>\n<li><a href=\"#Integers\">整数部分的修改</a></li>\n<li><a href=\"#新语法\">新语法</a></li>\n<li><a href=\"#修改的语法\">修改的语法</a></li>\n<li><a href=\"#移除的语法\">移除的语法</a></li>\n</ul>\n<h2 id=\"print-is-a-function\"><a class=\"anchor\" href=\"#print-is-a-function\">#</a> print is a Function</h2>\n<p>​\t\tprint 不再是一个关键字，而是作为一个函数被使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Old<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span> <span class=\"token string\">\"The answer is\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>New<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The answer is\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"views-and-iterators-instead-of-lists\"><a class=\"anchor\" href=\"#views-and-iterators-instead-of-lists\">#</a> Views And Iterators Instead Of Lists</h2>\n<p>​\t\t部分函数的返回不再是 「list」 而是 「view」 或者 「iterators」</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Old<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>New<span class=\"token punctuation\">:</span> iterator <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​\t\t不再支持部分接口</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span>iterkeys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>iteritems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span>itervalues<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​\t\t部分函数的返回值修改为 iterator</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​\t\trange 功能和 xrange 保持一致，xrange 不再被使用。</p>\n<p>##Ordering Comparisons</p>\n<p>​\t\t不同类型的对象之间进行比较会抛出 TypeError 异常</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Old<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>New<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>TypeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;'</span> <span class=\"token keyword\">not</span> supported between instances of <span class=\"token string\">'int'</span> <span class=\"token keyword\">and</span> <span class=\"token string\">'str'</span></pre></td></tr></table></figure><p>​\t\t部分函数被废弃</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>__cmp__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​\t\t <code>builtin.sorted()</code>  and  <code>list.sort()</code>  不再支持 cmp 参数</p>\n<h2 id=\"integers\"><a class=\"anchor\" href=\"#integers\">#</a> Integers</h2>\n<p>​\t\tlong 类型更名为 int。int 类型将具备 long 类型的特性。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Old<span class=\"token punctuation\">:</span> <span class=\"token builtin\">long</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>123L</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>New<span class=\"token punctuation\">:</span> <span class=\"token builtin\">long</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>NameError<span class=\"token punctuation\">:</span> name <span class=\"token string\">'long'</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> defined</pre></td></tr></table></figure><p>​\t\t八进制函数表示差异</p>\n<pre><code>Old: 0666\nNew: 0o666\n</code></pre>\n<p>​\t\t删除了 sys.maxint 常量，int 类型大小和平台挂钩，不再依赖类型本身</p>\n<h2 id=\"text-vs-data-instead-of-unicode-vs-8-bit\"><a class=\"anchor\" href=\"#text-vs-data-instead-of-unicode-vs-8-bit\">#</a> Text Vs. Data Instead Of Unicode Vs. 8-bit</h2>\n<ul>\n<li>\n<p>废除了 8 位字符串和 Unicode 取而代之使用文本和数据加以区分。</p>\n</li>\n<li>\n<p>Unicode 文本不在需要用  <code>u</code>  来进行修饰，但二进制需要  <code>b</code>  进行修饰。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Old<span class=\"token punctuation\">:</span> <span class=\"token string\">u\"123\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">u'123'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>New<span class=\"token punctuation\">:</span> <span class=\"token string\">u\"123\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'123'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Old<span class=\"token punctuation\">:</span> <span class=\"token string\">b\"123\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token string\">'123'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>New<span class=\"token punctuation\">:</span> <span class=\"token string\">b\"123\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token string\">b'123'</span></pre></td></tr></table></figure></li>\n<li>\n<p>StringIO 和 cStringIO 放入 io 模块了。</p>\n</li>\n<li>\n<p><code>basestring</code>  抽象类已被删除，使用 <code>str</code>  代替</p>\n</li>\n<li>\n<p><code>io.TextIOBase</code>  只支持读取 Unicode Text，读取字节流请使用 <code>io.TestIOBase.buffer</code></p>\n</li>\n</ul>\n<h2 id=\"新语法\"><a class=\"anchor\" href=\"#新语法\">#</a> 新语法</h2>\n<ul>\n<li>\n<p>支持通过  <code>__annotations__</code> 获取函数参数和返回值（<a href=\"https://www.python.org/dev/peps/pep-3107\"><strong>PEP 3107</strong></a>）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>In<span class=\"token punctuation\">:</span> <span class=\"token keyword\">def</span> <span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">\"it's b\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>foobar<span class=\"token punctuation\">.</span>__annotations__</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Out<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"it's b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>支持再可变参数后追加常规参数（<a href=\"https://www.python.org/dev/peps/pep-3102\"><strong>PEP 3102</strong></a>）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arg<span class=\"token punctuation\">,</span> defalut<span class=\"token operator\">=</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">pass</span></pre></td></tr></table></figure></li>\n<li>\n<p>加入 <code>nonlocal</code>  关键字用于显示的绑定非局部变量，避免在一些不必要的情况下自动从局部变量开始进行绑定。（<a href=\"https://www.python.org/dev/peps/pep-3104\"><strong>PEP 3104</strong></a>）</p>\n</li>\n<li>\n<p>扩展的可迭代拆包（<a href=\"https://www.python.org/dev/peps/pep-3132\"><strong>PEP 3132</strong></a>）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Old<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rest<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SyntaxError<span class=\"token punctuation\">:</span> invalid syntax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>New<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rest<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>In<span class=\"token punctuation\">:</span> rest</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Out<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"修改的语法\"><a class=\"anchor\" href=\"#修改的语法\">#</a> 修改的语法</h2>\n<ul>\n<li>\n<p>新的 <code>raise</code>  语句语法（<a href=\"https://www.python.org/dev/peps/pep-3109\"><strong>PEP 3109</strong></a> 和 <a href=\"https://www.python.org/dev/peps/pep-3134\"><strong>PEP 3134</strong></a>）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>In<span class=\"token punctuation\">:</span> <span class=\"token keyword\">raise</span> ZeroDivisionError<span class=\"token punctuation\">,</span><span class=\"token string\">\"test error\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Out<span class=\"token punctuation\">:</span> SyntaxError<span class=\"token punctuation\">:</span> invalid syntax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>In<span class=\"token punctuation\">:</span> <span class=\"token keyword\">raise</span> ZeroDivisionError<span class=\"token punctuation\">(</span><span class=\"token string\">\"test error\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Out<span class=\"token punctuation\">:</span> ZeroDivisionError<span class=\"token punctuation\">:</span> test error</pre></td></tr></table></figure></li>\n<li>\n<p>新的元类语法（<a href=\"https://www.python.org/dev/peps/pep-3115\"><strong>PEP 3115</strong></a>）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Old<span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    \t__metaclass__ <span class=\"token operator\">=</span> M</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>New<span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span>metaclass<span class=\"token operator\">=</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure></li>\n<li>\n<p>加入 <code>...</code>  代表 <code>Ellipsis</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Old<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SyntaxError<span class=\"token punctuation\">:</span> invalid syntax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>New<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Ellipsis</pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"移除的语法\"><a class=\"anchor\" href=\"#移除的语法\">#</a> 移除的语法</h2>\n<ul>\n<li>\n<p>删除了元组参数拆包（<a href=\"https://www.python.org/dev/peps/pep-3113\"><strong>PEP 3113</strong></a>）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Old<span class=\"token punctuation\">:</span> <span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SyntaxError<span class=\"token punctuation\">:</span> invalid syntax</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>New<span class=\"token punctuation\">:</span> <span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> combine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> combine</pre></td></tr></table></figure></li>\n<li>\n<p>反引号 「` 」不能再代码中使用，取而代之用 repr</p>\n</li>\n<li>\n<p>删除  <code>&lt;&gt;</code>  用法，改为  <code>!=</code></p>\n</li>\n<li>\n<p>整数不再支持后缀 <code>L</code>  或 <code>l</code></p>\n</li>\n<li>\n<p>字符串不再支持前缀 <code>U</code>  或 <code>u</code></p>\n</li>\n<li>\n<p><code>from xxx import *</code>  不再支持用于函数内</p>\n</li>\n<li>\n<p>不以 <code>.</code>  作为开头的导入都被视为绝对导入（<a href=\"https://www.python.org/dev/peps/pep-0328\"><strong>PEP 328</strong></a>）</p>\n<pre><code>form .[module] import name(相对导入)\n</code></pre>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python",
                "Python"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/python/Python2-Yield-Async/",
            "url": "https://allengx.gitee.io/computer-science/study/python/Python2-Yield-Async/",
            "title": "python2解决异步协程问题",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"yield的简单使用\"><a class=\"anchor\" href=\"#yield的简单使用\">#</a> yield 的简单使用</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Fuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">yield</span> k<span class=\"token punctuation\">,</span>v</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> Fuck<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>k <span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"简单异步协程同步情况下会报错\"><a class=\"anchor\" href=\"#简单异步协程同步情况下会报错\">#</a> 简单异步协程（同步情况下会报错）</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding:utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>g_func <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">asyncfunc</span><span class=\"token punctuation\">(</span>multiparams<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">wrappedfunc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            generator <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> multiparams<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">def</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        generator<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">def</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        generator<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            generator<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                generator<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> wrappedfunc</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> decorator</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token decorator annotation punctuation\">@asyncfunc</span><span class=\"token punctuation\">(</span>multiparams<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    obj <span class=\"token operator\">=</span> Obj<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    cb <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> obj<span class=\"token punctuation\">.</span>Create<span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 异步创建</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> obj<span class=\"token punctuation\">.</span>Load<span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 异步加载</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"obj.m_Load :%s , obj.m_Create: %s\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>m_Load<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">.</span>m_Create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Obj</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Load\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        self<span class=\"token punctuation\">.</span>m_Load <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">global</span> g_func</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        g_func<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        self<span class=\"token punctuation\">.</span>m_Create <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">global</span> g_func</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        g_func<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">global</span> g_func</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">for</span> func <span class=\"token keyword\">in</span> g_func<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">if</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span>func<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                func<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                g_func<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Timer\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>example<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>Timer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>result<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Create</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Timer</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>Load</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>Timer</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>obj<span class=\"token punctuation\">.</span>m_Load <span class=\"token punctuation\">:</span><span class=\"token boolean\">True</span> <span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>m_Create<span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Timer</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Timer</pre></td></tr></table></figure><h2 id=\"tornado协程coroutine原理\"><a class=\"anchor\" href=\"#tornado协程coroutine原理\">#</a> tornado 协程 (coroutine) 原理</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5eDgxOS9hcnRpY2xlL2RldGFpbHMvNDU0MjAwMTc=\">https://blog.csdn.net/wyx819/article/details/45420017</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding:utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> functools</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> types</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Return</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    用于存储返回结果的自定义异常</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Return<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Future</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    用于保存异步调用后的结果及回调函数对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Future<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_done <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_result <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_exec_info <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_done</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">result</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>_result <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_result</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">assert</span> self<span class=\"token punctuation\">.</span>_done</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_result</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">add_done_callback</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>_done<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            fn<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_callbacks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">_set_done</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_done <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">for</span> cd <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_callbacks<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                cd<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                logging<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_callbacks <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">set_result</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_result <span class=\"token operator\">=</span> result</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_set_done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">set_exec_info</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exec_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_set_done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_exec_info <span class=\"token operator\">=</span> exec_info</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">is_future</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> Future<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IOLoop</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>IOLoop<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>running <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">current</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> g_IOLoop</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">add_future</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> future<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        把回调函数加入future对象内</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        :param future:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        :param callback:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        :return:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        \"\"\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">assert</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">,</span> Future<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        future<span class=\"token punctuation\">.</span>add_done_callback<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">lambda</span> future<span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>add_callback<span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> future<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">add_callback</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        func <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span>partial<span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_run_callback<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">_run_callback</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        ret <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> ret <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                ret <span class=\"token operator\">=</span> convert_yielded<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">except</span> BadYieldError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                self<span class=\"token punctuation\">.</span>add_future<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> fn<span class=\"token punctuation\">:</span> fn<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">coroutine</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    functools.wraps用来保留原函数信息，避免被迭代器取代</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    :param func:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    :return:</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@functools<span class=\"token punctuation\">.</span>wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        future <span class=\"token operator\">=</span> Future<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            result <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>StopIteration<span class=\"token punctuation\">,</span> Return<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            result <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            logging<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            future<span class=\"token punctuation\">.</span>set_exec_info<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>exc_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">return</span> future</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> types<span class=\"token punctuation\">.</span>GeneratorType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    generator <span class=\"token operator\">=</span> result</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    yielded <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>StopIteration<span class=\"token punctuation\">,</span> Return<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    future<span class=\"token punctuation\">.</span>set_result<span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    logging<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    future<span class=\"token punctuation\">.</span>set_exec_info<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>exc_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    Runner<span class=\"token punctuation\">(</span>generator<span class=\"token punctuation\">,</span> future<span class=\"token punctuation\">,</span> yielded<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    <span class=\"token keyword\">return</span> future</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    此处为了解除环引用问题</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                    Exception 中会存在 future 引用</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                    future._exec_info 也会有 Exception 的引用</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                    \"\"\"</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    future <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        future<span class=\"token punctuation\">.</span>set_result<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">return</span> future</pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">return</span> wrapper</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Runner</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    执行send函数来对生成器进行迭代</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> generator<span class=\"token punctuation\">,</span> result_future<span class=\"token punctuation\">,</span> first_yielded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        创建保存生成器现状的对象</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        :param generator: 生成器本身</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        :param result_future: 含有执行结果的 future</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        :param first_yielded: 生成器的第一个 yield 后的值</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        \"\"\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>generator <span class=\"token operator\">=</span> generator</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        self<span class=\"token punctuation\">.</span>result_future <span class=\"token operator\">=</span> result_future</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        self<span class=\"token punctuation\">.</span>future <span class=\"token operator\">=</span> g_null_future</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        self<span class=\"token punctuation\">.</span>running <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        self<span class=\"token punctuation\">.</span>finish <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        self<span class=\"token punctuation\">.</span>had_exception <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        self<span class=\"token punctuation\">.</span>io_loop <span class=\"token operator\">=</span> IOLoop<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>handle_yielded<span class=\"token punctuation\">(</span>first_yielded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            self<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>running <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>finish<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            self<span class=\"token punctuation\">.</span>running <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                future <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>future</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                如果 future 里面的回调还没执行，先不send 避免出现 yield 还没阻塞就 send 引发的异常</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                如果 future 已经执行了回调，里面必然有 result</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                如果 future 本身不是Future类型，抛出错误</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                \"\"\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> future<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                self<span class=\"token punctuation\">.</span>future <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    1、正常执行：代表生成器还没有迭代完毕，进入下一轮迭代 得到 下一个 yield 右边值 正常情况下是 Future对象</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    2、StopIteration or Return 异常：迭代结束 得到return 结果 或者得到 raise Retuen 对象里的 value</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    3、Exception 函数本身执行错误，直接抛出异常</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    \"\"\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        value <span class=\"token operator\">=</span> future<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        logging<span class=\"token punctuation\">.</span>exception<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        self<span class=\"token punctuation\">.</span>had_exception <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                        yielded <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>throw<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sys<span class=\"token punctuation\">.</span>exc_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        yielded <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>generator<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>StopIteration<span class=\"token punctuation\">,</span> Return<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    生成器执行结束</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        1、迭代终止抛出 StopIteration 异常，返回值return 会被保存在 StopIteration 的 value 属性里</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        2、主动 raise Return 异常，raise Return(value)</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    把异常中的结果返回给 result_future</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    \"\"\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>finish <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>future <span class=\"token operator\">=</span> g_null_future</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>result_future<span class=\"token punctuation\">.</span>set_result<span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>result_future <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># 断开引用</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>finish <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>future <span class=\"token operator\">=</span> g_null_future</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>result_future<span class=\"token punctuation\">.</span>set_result<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>exc_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>result_future <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># 断开引用</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    <span class=\"token keyword\">raise</span> Exception</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>handle_yielded<span class=\"token punctuation\">(</span>yielded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            self<span class=\"token punctuation\">.</span>running <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">handle_yielded</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> yielded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        如果生成器存在多个 yield 则每次 send 后 得到下一个 yielded 用来执行下一次 send 或者 raise Return 去返回结果</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        :param yielded:  下一个yield 的 右侧结果</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        :return:</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        \"\"\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            self<span class=\"token punctuation\">.</span>future <span class=\"token operator\">=</span> convert_yielded<span class=\"token punctuation\">(</span>yielded<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">except</span> BadYieldError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            self<span class=\"token punctuation\">.</span>future <span class=\"token operator\">=</span> Future<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            self<span class=\"token punctuation\">.</span>future<span class=\"token punctuation\">.</span>set_result<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>exc_info<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>future<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            self<span class=\"token punctuation\">.</span>io_loop<span class=\"token punctuation\">.</span>add_future<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                self<span class=\"token punctuation\">.</span>future<span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span> fn<span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">convert_yielded</span><span class=\"token punctuation\">(</span>yielded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>yielded<span class=\"token punctuation\">,</span> Future<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">return</span> yielded</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">raise</span> BadYieldError<span class=\"token punctuation\">(</span><span class=\"token string\">\"yielded type error %r\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>yielded<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BadYieldError</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token string\">\"g_IOLoop\"</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    g_IOLoop <span class=\"token operator\">=</span> IOLoop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token string\">\"g_null_future\"</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    用来在特殊情况下推出函数的Future</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    g_null_future <span class=\"token operator\">=</span> Future<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    g_null_future<span class=\"token punctuation\">.</span>set_result<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">################### test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>async_future2 <span class=\"token operator\">=</span> Future<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>async_future4 <span class=\"token operator\">=</span> Future<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token decorator annotation punctuation\">@coroutine</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    支持多函数嵌套调用</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    异步消息回调顺序可以不同</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    :return:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ret2 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> Test2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ret4 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> Test4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"异步/同步调用返回结果 %r，%r\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>ret2<span class=\"token punctuation\">,</span>ret4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token decorator annotation punctuation\">@coroutine</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    py3 return ret 和 raise Return(ret) 都可，py2 只能 raise Return(ret)</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    :return:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> Test3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#future</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\"># raise Return(ret)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> ret</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    如果没有 yield 返回值必须是 Future 类型</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    :return:</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    future <span class=\"token operator\">=</span> async_future2</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> future</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token decorator annotation punctuation\">@coroutine</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    ret <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> Test5<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># future(4)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> ret</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Test5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    future <span class=\"token operator\">=</span> async_future4</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> future</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 该函数可以在本地同帧下调用也可在远程调用后回调</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>async_future4<span class=\"token punctuation\">.</span>set_result<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>async_future2<span class=\"token punctuation\">.</span>set_result<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python",
                "Python"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/redis/2-Redis-Distribute-Subscribe/",
            "url": "https://allengx.gitee.io/computer-science/study/redis/2-Redis-Distribute-Subscribe/",
            "title": "二、redis发布订阅",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"redis-发布订阅\"><a class=\"anchor\" href=\"#redis-发布订阅\">#</a> redis 发布订阅</h1>\n<h2 id=\"发布订阅相关命令\"><a class=\"anchor\" href=\"#发布订阅相关命令\">#</a> 发布订阅相关命令</h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>subscribe</td>\n<td>subscribe channel/[channel1 ....]—— 订阅一个或多个频道</td>\n</tr>\n<tr>\n<td>unsubscribe</td>\n<td>unsubscribe None/channel/[channel1 ...]—— 退订一个或多个频道</td>\n</tr>\n<tr>\n<td>publish</td>\n<td>publish channel message—— 向给定频道发送消息</td>\n</tr>\n<tr>\n<td>psubscribe</td>\n<td>psubscribe pattern/[pattern1...]—— 订阅与给定的模式相匹配的所有频道</td>\n</tr>\n<tr>\n<td>punsubscribe</td>\n<td>punsubscribe None/pattern/[pattern1...]—— 退订与给定的模式相匹配的所有频道</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>conn <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>Redis<span class=\"token punctuation\">(</span>decode_responses<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">puber</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        conn<span class=\"token punctuation\">.</span>publish<span class=\"token punctuation\">(</span><span class=\"token string\">\"mychannel\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">runsub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>puber<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    sb <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>pubsub<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    sb<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"mychannel\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> sb<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            sb<span class=\"token punctuation\">.</span>unsubscribe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">11</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>runsub<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'subscribe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pattern'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'channel'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mychannel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span>   <span class=\"token comment\">#打印的第一条信息，在客户端订阅了服务端的时候，会收到，data 表示订阅人数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pattern'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'channel'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mychannel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pattern'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'channel'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mychannel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pattern'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'channel'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mychannel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pattern'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'channel'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mychannel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pattern'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'channel'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mychannel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pattern'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'channel'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mychannel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pattern'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'channel'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mychannel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pattern'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'channel'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mychannel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pattern'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'channel'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mychannel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'8'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'unsubscribe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pattern'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'channel'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mychannel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">#打印的最后一条消息，表示客户端在取消订阅后收到的最后一条消息，data 表示订阅人数</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token number\">11</span></pre></td></tr></table></figure><h2 id=\"redis自带的发布订阅的弊端\"><a class=\"anchor\" href=\"#redis自带的发布订阅的弊端\">#</a> redis 自带的发布订阅的弊端：</h2>\n<p>1、消息传输过快会导致接收方的缓存挤压以至于卡死。<br />\n2、接收方断线后将失去之前的全部消息队列内未处理完的消息。</p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Redis"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/redis/1-Redis-Introduction/",
            "url": "https://allengx.gitee.io/computer-science/study/redis/1-Redis-Introduction/",
            "title": "一、redis新手入门",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"redis简介\"><a class=\"anchor\" href=\"#redis简介\">#</a> Redis 简介</h1>\n<h2 id=\"redis特点\"><a class=\"anchor\" href=\"#redis特点\">#</a> Redis 特点</h2>\n<ol>\n<li>非关系型数据库</li>\n<li>速度快</li>\n<li>key &amp; value（5 种类型） 形式\n<ol>\n<li>字符串</li>\n<li>列表</li>\n<li>集合</li>\n<li>散列表</li>\n<li>有序集合</li>\n</ol>\n</li>\n<li>使用<strong>复制特性</strong>扩展读性能</li>\n<li>使用<strong>客户端分片</strong>扩展写性能</li>\n</ol>\n<h3 id=\"分片\"><a class=\"anchor\" href=\"#分片\">#</a> 分片</h3>\n<p>通过将数据划分为多个部分进行分散处理（读写）以提高效率。</p>\n<h3 id=\"与memcached高性能键值缓存服务器相比\"><a class=\"anchor\" href=\"#与memcached高性能键值缓存服务器相比\">#</a> 与 memcached（高性能键值缓存服务器）相比</h3>\n<ol>\n<li>提供两种不同的写入方式。</li>\n<li>存储除字符串以外的其他数据结构。</li>\n</ol>\n<h2 id=\"redis安装-windows\"><a class=\"anchor\" href=\"#redis安装-windows\">#</a> Redis 安装 --windows</h2>\n<h3 id=\"下载即可使用\"><a class=\"anchor\" href=\"#下载即可使用\">#</a> 下载即可使用：</h3>\n<p>下载地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdGFyY2hpdmUvcmVkaXMvcmVsZWFzZXM=\">https://github.com/microsoftarchive/redis/releases</span></p>\n<h2 id=\"redis使用\"><a class=\"anchor\" href=\"#redis使用\">#</a> redis 使用：</h2>\n<p>python 下载 redis 三方库</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install redis</pre></td></tr></table></figure><p>存取值</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>conn <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>Redis<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># key 为 hello value 为 world</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>conn<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 获取 key 对应得 value</span></pre></td></tr></table></figure><p>注意</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python代码中string 取值后是字节类型会带有 b'</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>需要在Redis声明中加入 decode_responses<span class=\"token operator\">=</span><span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>效果如下：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>conn <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>Redis<span class=\"token punctuation\">(</span>decode_responses<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"附加特性\"><a class=\"anchor\" href=\"#附加特性\">#</a> 附加特性</h2>\n<p>redis 服务关闭后的两种保存形式</p>\n<ol>\n<li>时间点转储：某段时间内，达到某个数量的数据被更新了，才进行一次转储操作</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>save <span class=\"token number\">900</span> <span class=\"token number\">1</span>    <span class=\"token comment\">#900 秒时间，至少有一条数据更新，则保存到数据文件中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>save <span class=\"token number\">300</span> <span class=\"token number\">10</span>   <span class=\"token comment\">#300 秒时间，至少有 10 条数据更新，则保存到数据文件中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>save <span class=\"token number\">60</span> <span class=\"token number\">10000</span>  <span class=\"token comment\">#60 秒时间，至少有 10000 条数据更新，则保存到数据文件中</span></pre></td></tr></table></figure><p>2.AOF (Append Only File): 把每个操作记录下来（不记录读操作），在 redis 下次启动时依次执行记录下来的操作复原数据。</p>\n<h2 id=\"redis-存储结构\"><a class=\"anchor\" href=\"#redis-存储结构\">#</a> redis 存储结构</h2>\n<table>\n<thead>\n<tr>\n<th>结构类型</th>\n<th>存储值</th>\n<th>结构的读写能力</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td>字符串、整数、浮点数</td>\n<td>能够作用字符串整体及部分、对整数和浮点数的自增、自减操作</td>\n</tr>\n<tr>\n<td>list</td>\n<td>链表，每个节点均为一个 string</td>\n<td>操作链表首尾，根据偏移量修改中间部分，读取单个或多个元素，根据值查找并操作对应节点</td>\n</tr>\n<tr>\n<td>set</td>\n<td>集合、元素不可重复</td>\n<td>交、并、差集，增删改查操作。</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>键值对的无序字典</td>\n<td>增删改查操作。</td>\n</tr>\n<tr>\n<td>zset</td>\n<td>有序集合，字符串和浮点数分值的有序映射，排列顺序由分值决定</td>\n<td>增删改查，通过范围值（range）获取元素。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"redis-的-string\"><a class=\"anchor\" href=\"#redis-的-string\">#</a> redis 的 string：</h3>\n<p>字符串类型，整数和浮点数也会转为字符串。</p>\n<h4 id=\"操作get-set-delete\"><a class=\"anchor\" href=\"#操作get-set-delete\">#</a> 操作：get、set、delete</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conn<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>conn<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"redis-的-list\"><a class=\"anchor\" href=\"#redis-的-list\">#</a> redis 的 list：</h3>\n<p>列表类型中全为 string，加入列表仅支持一个个加入，不支持 None 类型</p>\n<h4 id=\"操作-lpush-rpush-lrange-lindex-lpop-rpop\"><a class=\"anchor\" href=\"#操作-lpush-rpush-lrange-lindex-lpop-rpop\">#</a> 操作 lpush、rpush、lrange、lindex、lpop、rpop</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaaaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    conn<span class=\"token punctuation\">.</span>lpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 首插入</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    conn<span class=\"token punctuation\">.</span>rpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 尾插入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>conn<span class=\"token punctuation\">.</span>lrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 范围取值 0 到 最后 即：全部元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>conn<span class=\"token punctuation\">.</span>lindex<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 读取从左至右的第几个元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    conn<span class=\"token punctuation\">.</span>lpop<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 左弹出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    conn<span class=\"token punctuation\">.</span>rpop<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 右弹出</span></pre></td></tr></table></figure><h3 id=\"redis-的-set\"><a class=\"anchor\" href=\"#redis-的-set\">#</a> redis 的 set:</h3>\n<p>集合中全为 string 且不可重复，集合是无序的</p>\n<h4 id=\"操作-sadd-smembers-sisemeber-srem\"><a class=\"anchor\" href=\"#操作-sadd-smembers-sisemeber-srem\">#</a> 操作 ： sadd、smembers、sisemeber、srem</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 向集合中添加元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>smembers<span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 列出集合中全部元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sismember<span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 判断集合中是否存在该元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>conn<span class=\"token punctuation\">.</span>srem<span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 删除集合中某个元素</span></pre></td></tr></table></figure><h3 id=\"redis-的-散列\"><a class=\"anchor\" href=\"#redis-的-散列\">#</a> redis 的 散列:</h3>\n<p>键值对的字典</p>\n<h4 id=\"操作-hset-hget-hgetall-hdel\"><a class=\"anchor\" href=\"#操作-hset-hget-hgetall-hdel\">#</a> 操作: hset、hget、hgetall、hdel</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span>hset<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关联散列的键值对</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hget<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 得到散列的值通过 key</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hgetall<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 得到散列的所有键值对</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>conn<span class=\"token punctuation\">.</span>hdel<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 通过键去删除散列的键值对</span></pre></td></tr></table></figure><h3 id=\"redis-的-有序集合\"><a class=\"anchor\" href=\"#redis-的-有序集合\">#</a> redis 的 有序集合:</h3>\n<p>键值对存储的字典，且有序，且不可重复，值必须是浮点数，可以根据 key 访问元素，也可以根据 value 及 value 的排序访问元素</p>\n<h4 id=\"操作zadd-zrange-zrangebyscore-zrem\"><a class=\"anchor\" href=\"#操作zadd-zrange-zrangebyscore-zrem\">#</a> 操作：zadd、zrange、zrangebyscore、zrem</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span>zadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">999</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 有序集合添加键值对</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conn<span class=\"token punctuation\">.</span>zadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">888</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 有序集合添加键值对</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>conn<span class=\"token punctuation\">.</span>zadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"key3\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">777</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 有序集合添加键值对</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> withscores<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 根据位置获取集合中元素 [0,1],withscores=True 表示键值对均获得，不加则只获取 key</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zrangebyscore<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">787</span><span class=\"token punctuation\">,</span> withscores<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 根据值的范围取到多个元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>conn<span class=\"token punctuation\">.</span>zrem<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"key3\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 根据 key 值来删除元素</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Redis"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/redis/3-Redis-Command/",
            "url": "https://allengx.gitee.io/computer-science/study/redis/3-Redis-Command/",
            "title": "三、redis指令",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"redis-命令\"><a class=\"anchor\" href=\"#redis-命令\">#</a> Redis 命令</h1>\n<ul>\n<li>字符串</li>\n<li>列表</li>\n<li>集合</li>\n<li>散列</li>\n<li>有序集合</li>\n<li>排序</li>\n<li>redis 基本事务</li>\n<li>过期键的处理</li>\n</ul>\n<h2 id=\"字符串命令\"><a class=\"anchor\" href=\"#字符串命令\">#</a> 字符串命令</h2>\n<h3 id=\"自增自减命令操作incr-decr-incrby-decrby-incrbyfloat\"><a class=\"anchor\" href=\"#自增自减命令操作incr-decr-incrby-decrby-incrbyfloat\">#</a> 自增自减命令操作：incr、decr、incrby、decrby、incrbyfloat</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>incr</td>\n<td>incr key-name—— 键对应的值 + 1</td>\n</tr>\n<tr>\n<td>decr</td>\n<td>decr key-name—— 键对应的值 - 1</td>\n</tr>\n<tr>\n<td>incrby</td>\n<td>incrby key-name amount—— 键对应的值 + amount</td>\n</tr>\n<tr>\n<td>decrby</td>\n<td>decrby key-name amount—— 键对应的值 - amount</td>\n</tr>\n<tr>\n<td>incrbyfloat</td>\n<td>incrbyfloat key-name amount—— 键对应的值 + 浮点数 amount</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>conn <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>Redis<span class=\"token punctuation\">(</span>decode_responses<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 得到 key 为 key1 的对象值，有返回值没有返回 None</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>incr<span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 对 key1 对应的值进行 + 1 操作，如果为 None 则变成 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>incr<span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 对 key1 对应的值进行 + 15 操作</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>decr<span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 对 key1 对应的值进行 - 5 操作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置 key1 对应的值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>incr<span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"字符串读取写入操作-append-getrange-setrange-getbit-setbit-bitcount-bitop\"><a class=\"anchor\" href=\"#字符串读取写入操作-append-getrange-setrange-getbit-setbit-bitcount-bitop\">#</a> 字符串读取写入操作: append、getrange、setrange、getbit、setbit、bitcount、bitop</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>append</td>\n<td>append key-name value—— 将 value 追加到 key-name 原来值得末尾</td>\n</tr>\n<tr>\n<td>getrange</td>\n<td>getrange key-name start end—— 获取从 start 到 end 偏移量的子串</td>\n</tr>\n<tr>\n<td>setrange</td>\n<td>setrange key-name offset value—— 把偏移量之后的字符设置为 value</td>\n</tr>\n<tr>\n<td>getbit</td>\n<td>getbit key-name offset—— 将字符串看成二级制，并返回偏移量的二进制值</td>\n</tr>\n<tr>\n<td>setbit</td>\n<td>setbit key-name offset value—— 将字符串看成二级制，并修改偏移量的二进制值为 value</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>bitcount</td>\n<td>bitcount key-name [start end]—— 将字符串看成二级制，统计 start 到 end 内 1 的数量</td>\n</tr>\n<tr>\n<td>bitop</td>\n<td>bitop operation dest-key key-name [key-name...]—— 对多个二进制包进行（并 / 或 / 异或 / 非）等运算操作，并把结果保存着 dest-key 中</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"new-string-key\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 加入 'hello ' 字符串 到末尾</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"new-string-key\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>substr<span class=\"token punctuation\">(</span><span class=\"token string\">\"new-string-key\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\"># 读取 range [3:7] 左右都为闭区间</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>setrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"new-string-key\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'H'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 第 0 个 字符设置为 H</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>setrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"new-string-key\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">'W'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 第 6 个 字符设置为 W</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"new-string-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>setrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"new-string-key\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token string\">\", how are you?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 从第 11 个开始插入 \", how are you?\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"new-string-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>setbit<span class=\"token punctuation\">(</span><span class=\"token string\">\"another-key\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 设置第 2 个二进制对象为 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>setbit<span class=\"token punctuation\">(</span><span class=\"token string\">\"another-key\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 设置第 7 个二进制对象为 1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 0 1 2 3 4 5 6 7    # 0 1 2 3 4 5 6 7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 0 0 0 0 0 0 0 0  =>  0 0 1 0 0 0 0 1  => 33 => '!'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"another-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"列表命令\"><a class=\"anchor\" href=\"#列表命令\">#</a> 列表命令</h2>\n<h3 id=\"列表常用操作rpush-lpush-rpop-lpop-lindex-lrange-ltrim\"><a class=\"anchor\" href=\"#列表常用操作rpush-lpush-rpop-lpop-lindex-lrange-ltrim\">#</a> 列表常用操作:rpush、lpush、rpop、lpop、lindex、lrange、ltrim</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rpush</td>\n<td>rpush key-name value [value...]—— 将多个元素加入列表右端</td>\n</tr>\n<tr>\n<td>lpush</td>\n<td>lpush key-name value [value...]—— 将多个元素加入列表左端</td>\n</tr>\n<tr>\n<td>rpop</td>\n<td>rpop key-name—— 移除并返回右端元素</td>\n</tr>\n<tr>\n<td>lpop</td>\n<td>lpop key-name—— 移除并返回左端元素</td>\n</tr>\n<tr>\n<td>lindex</td>\n<td>lindex key-name offset—— 返回偏移量的元素</td>\n</tr>\n<tr>\n<td>lrange</td>\n<td>lrange key-name start end—— 返回 start 到 end 范围的元素，左右都是闭区间</td>\n</tr>\n<tr>\n<td>ltrim</td>\n<td>ltrim key-name start end—— 只保留 start 到 end 范围的元素，左右都是闭区间</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>conn <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>Redis<span class=\"token punctuation\">(</span>decode_responses<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>rpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"list-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"last\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 向后插入</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>lpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"list-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 向前插入</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>rpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"list-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"new last\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>lrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"list-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 从前往后依次输出</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>lpop<span class=\"token punctuation\">(</span><span class=\"token string\">\"list-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 从前弹出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>lpop<span class=\"token punctuation\">(</span><span class=\"token string\">\"list-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>lrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"list-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>rpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"list-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 向后插入多个</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>lrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"list-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>ltrim<span class=\"token punctuation\">(</span><span class=\"token string\">\"list-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 保留 [2:-1] 区间内的值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>lrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"list-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"阻塞式列表指令原子操作blpop-brpop-rpoplpush-brpoplpush\"><a class=\"anchor\" href=\"#阻塞式列表指令原子操作blpop-brpop-rpoplpush-brpoplpush\">#</a> 阻塞式列表指令（原子操作）:blpop、brpop、rpoplpush、brpoplpush</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blpop</td>\n<td>blpop key-name [key-name...] timeout—— 从第一个非空列表弹出最左元素，或者 timeout 时间后自动结束等待</td>\n</tr>\n<tr>\n<td>brpop</td>\n<td>brpop key-name [key-name...] timeout—— 从第一个非空列表弹出最右元素，或者 timeout 时间后自动结束等待</td>\n</tr>\n<tr>\n<td>rpoplpush</td>\n<td>rpoplpush source-key dest-key—— 从 source-key 弹出最右元素加入 dest-key 最左端，并返回</td>\n</tr>\n<tr>\n<td>brpoplpush</td>\n<td>brpoplpush source-key dest-key timeout—— 从 source-key 弹出最右元素加入 dest-key 最左端，并返回，或者 timeout 时间后自动结束等待</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>brpoplpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"list2\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 当 list 没有可弹出的元素时，程序会在一段时间内阻塞，来等待可弹出元素出现，否则一段时间后返回 None</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>rpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"item1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>rpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"item2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>rpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"list2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"item3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>brpoplpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"list2\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 将 list 最后边的元素放入 list2 的最前边</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>lrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"list2\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>blpop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"list5\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"list4\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"list3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"list2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 从左到右检查列表内的 list，并对最先遇到的不为空的 list 执行左弹出操作</span></pre></td></tr></table></figure><h2 id=\"集合命令\"><a class=\"anchor\" href=\"#集合命令\">#</a> 集合命令</h2>\n<h3 id=\"集合常用操作指令sadd-srem-sismember-scard-smembers-srandmember-spop-smove\"><a class=\"anchor\" href=\"#集合常用操作指令sadd-srem-sismember-scard-smembers-srandmember-spop-smove\">#</a> 集合常用操作指令:sadd、srem、sismember、scard、smembers、srandmember、spop、smove</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sadd</td>\n<td>sadd key-name item [item...]—— 将多个元素加入集合，返回成功加入的数量</td>\n</tr>\n<tr>\n<td>srem</td>\n<td>srem key-name item [item...]—— 从集合中删除多个元素，返回成功删除数量</td>\n</tr>\n<tr>\n<td>sismember</td>\n<td>sismember key-name item—— 判断 item 是否在集合内</td>\n</tr>\n<tr>\n<td>scard</td>\n<td>scard key-name—— 返回集合元素数量</td>\n</tr>\n<tr>\n<td>smembers</td>\n<td>smembers key-name —— 返回集合所有元素</td>\n</tr>\n<tr>\n<td>srandmember</td>\n<td>srandmember key-name [count]—— 随机返回 count 个元素 count 为负值时可能返回重复元素</td>\n</tr>\n<tr>\n<td>spop</td>\n<td>spop key-name—— 随机移除一个元素，并返回被移除元素</td>\n</tr>\n<tr>\n<td>smove</td>\n<td>smove source-key dest-key item—— 从 source-key 中移除 item 加入 dest-key 中移除失败返回 0 否则返回 1</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"set-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 把元素加入集合，并返回加入的数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>srem<span class=\"token punctuation\">(</span><span class=\"token string\">\"set-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 移除集合中的某些元素 成功时 True 失败时 False</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>srem<span class=\"token punctuation\">(</span><span class=\"token string\">\"set-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>scard<span class=\"token punctuation\">(</span><span class=\"token string\">\"set-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看集合中元素数量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>smembers<span class=\"token punctuation\">(</span><span class=\"token string\">\"set-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出集合中全部元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>smove<span class=\"token punctuation\">(</span><span class=\"token string\">\"set-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"set-key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将 集合 set-key 中的 a 移至 se-key2 集合中 如果 a 不在 set-key 则返回 False</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>smove<span class=\"token punctuation\">(</span><span class=\"token string\">\"set-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"set-key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>smembers<span class=\"token punctuation\">(</span><span class=\"token string\">\"set-key2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"集合之间的常用操作指令sdiff-sdiffstore-sinter-sinterstore-sunion-sunionstore\"><a class=\"anchor\" href=\"#集合之间的常用操作指令sdiff-sdiffstore-sinter-sinterstore-sunion-sunionstore\">#</a> 集合之间的常用操作指令:sdiff、sdiffstore、sinter、sinterstore、sunion、sunionstore</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sdiff</td>\n<td>sdiff key-name [key-name...]—— 返回在第一个集合不在其他的集合内的元素</td>\n</tr>\n<tr>\n<td>sdiffstore</td>\n<td>sdiffstore dest-key key-name [key-name...]—— 将在第一个集合不在其他的集合内的元素存储到 dest-key 里</td>\n</tr>\n<tr>\n<td>sinter</td>\n<td>sinter key-name [key-name...]—— 返回存在于所有集合的元素</td>\n</tr>\n<tr>\n<td>sinterstore</td>\n<td>sinterstore dest-key key-name [key-name...]—— 将存在于所有集合的元素存储在 dest-key 中</td>\n</tr>\n<tr>\n<td>sunion</td>\n<td>sunion key-name [key-name...]—— 返回至少存在于一个集合的所有元素</td>\n</tr>\n<tr>\n<td>sunionstore</td>\n<td>sunionstore dest-key key-name [key-name...]—— 返回存在于至少一个集合的所有元素到 dest-key 中</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"skey1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"skey2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"f\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sdiff<span class=\"token punctuation\">(</span><span class=\"token string\">\"skey1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"skey2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 两个集合做差运算</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sinter<span class=\"token punctuation\">(</span><span class=\"token string\">\"skey1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"skey2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 两个集合做交运算</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sunion<span class=\"token punctuation\">(</span><span class=\"token string\">\"skey1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"skey2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 两个集合做并运算</span></pre></td></tr></table></figure><h2 id=\"散列命令\"><a class=\"anchor\" href=\"#散列命令\">#</a> 散列命令</h2>\n<h3 id=\"散列常用操作指令-hmget-hmset-hdel-hlen\"><a class=\"anchor\" href=\"#散列常用操作指令-hmget-hmset-hdel-hlen\">#</a> 散列常用操作指令: hmget、hmset、hdel、hlen</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hmget</td>\n<td>hmget key-name key [key...]—— 从散列里获取多个 key 的值</td>\n</tr>\n<tr>\n<td>hmset</td>\n<td>hmset key-name key value [key value...]—— 为散列设置多个 key value 值</td>\n</tr>\n<tr>\n<td>hdel</td>\n<td>hdel key-name key [key...]—— 删除散列多个 key 值并返回删除的数量</td>\n</tr>\n<tr>\n<td>hlen</td>\n<td>hlen key-name—— 散列键值对数量</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hmset<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"k2\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"k3\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"v3\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 加入 散列的 key 和 value</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hmget<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"k3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 得到 key list 对应的 value list</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hlen<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 得到 散列长度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hdel<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"k2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"k3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 删除某些 key 返回 删除的 key 数量</span></pre></td></tr></table></figure><h3 id=\"散列高级操作指令-hexists-hkeys-hvals-hgetall-hincrby-hincrbyfloat\"><a class=\"anchor\" href=\"#散列高级操作指令-hexists-hkeys-hvals-hgetall-hincrby-hincrbyfloat\">#</a> 散列高级操作指令: hexists、hkeys、hvals、hgetall、hincrby、hincrbyfloat</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hexists</td>\n<td>hexists key-name key—— 检查某 key 是否存在于散列中</td>\n</tr>\n<tr>\n<td>hkeys</td>\n<td>hkeys key-name—— 获取散列的所有键</td>\n</tr>\n<tr>\n<td>hvals</td>\n<td>hvals key-name—— 获取散列的所有值</td>\n</tr>\n<tr>\n<td>hgetall</td>\n<td>hgetall key-name—— 获取散列的所有键和值</td>\n</tr>\n<tr>\n<td>hincrby</td>\n<td>hincrby key-name key increment—— 将键存储的值加上 increment</td>\n</tr>\n<tr>\n<td>hincrbyfloat</td>\n<td>hincrbyfloat key-name key increment—— 将键存储的值加上浮点数 increment</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hmset<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash-key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"short\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"long\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hkeys<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash-key2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 得到所有的 key</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hexists<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash-key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"num\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 判断某些 key 是否存在</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hexists<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash-key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"long\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hincrby<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash-key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"num\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 对某些 key 的值进行自增操作，如果没有对应的值则默认对 0 进行自增</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>hmget<span class=\"token punctuation\">(</span><span class=\"token string\">\"hash-key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"num\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"有序集合\"><a class=\"anchor\" href=\"#有序集合\">#</a> 有序集合</h2>\n<h3 id=\"有序集合的常用操作zadd-zcard-zincrby-zscore-zrange-zcount-zrem-zrank\"><a class=\"anchor\" href=\"#有序集合的常用操作zadd-zcard-zincrby-zscore-zrange-zcount-zrem-zrank\">#</a> 有序集合的常用操作：zadd、zcard、zincrby、zscore、zrange、zcount、zrem、zrank</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>zadd</td>\n<td>zadd key-name map {key：value,...}—— 将带有分值的成员加入集合</td>\n</tr>\n<tr>\n<td>zcard</td>\n<td>zcard key-name—— 返回有序列表的成员数量</td>\n</tr>\n<tr>\n<td>zincrby</td>\n<td>key-name increment member—— 将 member 元素加上 increment</td>\n</tr>\n<tr>\n<td>zscore</td>\n<td>zscore key-name member—— 返回 member 元素的分值</td>\n</tr>\n<tr>\n<td>zrange</td>\n<td>zrange key-name start stop [withscores]—— 返回有序集合排名介于 start 和 stop 之间的成员，withscores 开启后分值也会一并返回</td>\n</tr>\n<tr>\n<td>zcount</td>\n<td>zcount key-name min max—— 返回介于 min 和 max 之间的成员数量</td>\n</tr>\n<tr>\n<td>zrem</td>\n<td>zrem key-name value [value...]—— 移除元素并返回移除数量</td>\n</tr>\n<tr>\n<td>zrank</td>\n<td>zrank key-name member—— 返回成员在有序集合中的排名</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>conn <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>Redis<span class=\"token punctuation\">(</span>decode_responses<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 向有序集合中加入元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zcard<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 有序集合的元素数量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zincrby<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A 元素的分值加 2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zscore<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看 A 元素的分值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zrank<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看 B 元素的排序（根据分值）排序从 0 开始</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zcount<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 分值为 0 - 5 的元素有多少个 左右都时是闭</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zrem<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 移除 B 元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> withscores<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出全部有序集合的 元素及其分值</span></pre></td></tr></table></figure><h3 id=\"有序集合的高级操作zrevrnk-zrevrange-zrangebyscore-zrevrangebyscore-zremrangebyrank-zremrangebyscore-zinterstore-zunionstore\"><a class=\"anchor\" href=\"#有序集合的高级操作zrevrnk-zrevrange-zrangebyscore-zrevrangebyscore-zremrangebyrank-zremrangebyscore-zinterstore-zunionstore\">#</a> 有序集合的高级操作：zrevrnk、zrevrange、zrangebyscore、zrevrangebyscore、zremrangebyrank、zremrangebyscore、zinterstore、zunionstore</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>zrevrank</td>\n<td>zrevrank key-name value—— 返回元素的排名</td>\n</tr>\n<tr>\n<td>zrevrange</td>\n<td>zrevrange key-name start stop—— 返回排名范围内的元素</td>\n</tr>\n<tr>\n<td>zrangebyscore</td>\n<td>zrangebyscore key-name min max [withscores] [limit offset count]—— 返回有序列表中 min 到 max 的成员</td>\n</tr>\n<tr>\n<td>zrevrangebyscore</td>\n<td>zrevrangebyscore key-name min max [withscores] [limit offset count]—— 返回有序列表中 min 到 max 的成员，按照从大到小的顺序</td>\n</tr>\n<tr>\n<td>zremrangebyrank</td>\n<td>zremrangebyrank key-name start stop—— 移除介于 start 和 stop 之间的所有元素</td>\n</tr>\n<tr>\n<td>zremrangebyscore</td>\n<td>zremrangebyscore key-name min max—— 移除介于 min 和 max 之间的所有元素</td>\n</tr>\n<tr>\n<td>zinterstore</td>\n<td><code>zinterstore dest-key key-count key/[key...][None/weight/[weight...]][aggregate sum|min|max]</code> —— 对集合进行交集运算</td>\n</tr>\n<tr>\n<td>zunionstore</td>\n<td><code>zunionstore dest-key key-count key/[key...][None/weight/[weight...]][aggregate sum|min|max]</code> —— 对集合进行并集运算</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 向有序集合中加入元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-2\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 向有序集合中加入元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zinterstore<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-i\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"zset-1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zset-2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 集合合并，保留相同元素，且分值叠加</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-i\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> withscores<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zunionstore<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-j\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"zset-1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zset-2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> aggregate<span class=\"token operator\">=</span><span class=\"token string\">'min'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># aggregate = min/max/sum 集合合并，并对相同元素 取小 / 取大 / 取和</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-j\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> withscores<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"set-1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建 集合（非有序集合）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zunionstore<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-h\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"zset-1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zset-2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"set-1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认  aggregate = sum，集合也可以作为有序集合的合并对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"zset-h\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> withscores<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"sort排序相关操作\"><a class=\"anchor\" href=\"#sort排序相关操作\">#</a> sort 排序相关操作</h2>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sort</code></td>\n<td><code>sort key-name [by pattern][limit offset count][get pattern [get pattern...]][asc\\|desc][alpha][store desc-key]</code> —— 根据给定的选项，对输入列表、集合或者有序集合进行排序，然后返回或者存储排序结果</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>conn <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>Redis<span class=\"token punctuation\">(</span>decode_responses<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>conn<span class=\"token punctuation\">.</span>rpush<span class=\"token punctuation\">(</span><span class=\"token string\">\"sort1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token string\">\"sort1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 根据大小</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token string\">\"sort1\"</span><span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 根据字母顺序</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">########## 权重 ##########</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>conn<span class=\"token punctuation\">.</span>hset<span class=\"token punctuation\">(</span><span class=\"token string\">\"a-1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"weight\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>conn<span class=\"token punctuation\">.</span>hset<span class=\"token punctuation\">(</span><span class=\"token string\">\"a-3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"weight\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>conn<span class=\"token punctuation\">.</span>hset<span class=\"token punctuation\">(</span><span class=\"token string\">\"a-5\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"weight\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>conn<span class=\"token punctuation\">.</span>hset<span class=\"token punctuation\">(</span><span class=\"token string\">\"a-11\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"weight\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>conn<span class=\"token punctuation\">.</span>hset<span class=\"token punctuation\">(</span><span class=\"token string\">\"a-90\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"weight\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>conn<span class=\"token punctuation\">.</span>hset<span class=\"token punctuation\">(</span><span class=\"token string\">\"a-77\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"weight\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">########## 权重 ##########</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token string\">\"sort1\"</span><span class=\"token punctuation\">,</span> by<span class=\"token operator\">=</span><span class=\"token string\">\"a-*->weight\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 根据上面的权重排序  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token string\">\"sort1\"</span><span class=\"token punctuation\">,</span> by<span class=\"token operator\">=</span><span class=\"token string\">\"a-*->weight\"</span><span class=\"token punctuation\">,</span> get<span class=\"token operator\">=</span><span class=\"token string\">\"a-*->weight\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 把权重作为返回值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'11'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'77'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'90'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'11'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'77'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'90'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'90'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'11'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'77'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'44'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'66'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"redis基本事务\"><a class=\"anchor\" href=\"#redis基本事务\">#</a> redis 基本事务</h2>\n<h3 id=\"基本事务指令watch-multi-exec-unwatch-discard\"><a class=\"anchor\" href=\"#基本事务指令watch-multi-exec-unwatch-discard\">#</a> 基本事务指令：watch、multi、exec、unwatch、discard</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 非原子操作导致读写混乱</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>conn <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>Redis<span class=\"token punctuation\">(</span>decode_responses<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>incr<span class=\"token punctuation\">(</span><span class=\"token string\">\"test--1:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>incr<span class=\"token punctuation\">(</span><span class=\"token string\">\"test--1:\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 通过事务的消息队列实现原子操作</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    pipline <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    pipline<span class=\"token punctuation\">.</span>incr<span class=\"token punctuation\">(</span><span class=\"token string\">\"test--1:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    pipline<span class=\"token punctuation\">.</span>incr<span class=\"token punctuation\">(</span><span class=\"token string\">\"test--1:\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    result <span class=\"token operator\">=</span> pipline<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr></table></figure><h2 id=\"过期键的处理\"><a class=\"anchor\" href=\"#过期键的处理\">#</a> 过期键的处理</h2>\n<h3 id=\"常用命令persist-ttl-expire-expireat-pttl-pexpire-pexpireat\"><a class=\"anchor\" href=\"#常用命令persist-ttl-expire-expireat-pttl-pexpire-pexpireat\">#</a> 常用命令:persist、ttl、expire、expireat、pttl、pexpire、pexpireat</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>persist</td>\n<td>persist key-name—— 移除键的过期时间</td>\n</tr>\n<tr>\n<td>ttl</td>\n<td>ttl key-name—— 查看键的过期时间</td>\n</tr>\n<tr>\n<td>expire</td>\n<td>expire key-name time—— 设置键的过期时间</td>\n</tr>\n<tr>\n<td>expireat</td>\n<td>expireat key-name timesetamp—— 将给定的过期时间修改为 unix 时间戳</td>\n</tr>\n<tr>\n<td>pttl</td>\n<td>pttl key-name—— 查看距离过期还有多久</td>\n</tr>\n<tr>\n<td>pexpire</td>\n<td>pexpire key-name time 让键在给定的多少<strong>毫秒</strong>后过期</td>\n</tr>\n<tr>\n<td>pexpireat</td>\n<td>pexpireat key-name time—— 将一个毫秒级的 unix 时间戳设置为键的过期时间</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>conn <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span>Redis<span class=\"token punctuation\">(</span>decode_responses<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keys\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"keys\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>expire<span class=\"token punctuation\">(</span><span class=\"token string\">\"keys\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置该键的时间限制 2 秒后过期</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"keys\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keys\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>expire<span class=\"token punctuation\">(</span><span class=\"token string\">\"keys\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>ttl<span class=\"token punctuation\">(</span><span class=\"token string\">\"keys\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看还要多少秒过期</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Redis"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/redis/4-Redis-Data-Security-And-Performance/",
            "url": "https://allengx.gitee.io/computer-science/study/redis/4-Redis-Data-Security-And-Performance/",
            "title": "四、redis数据安全及性能保障",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"redis数据安全及性能保障\"><a class=\"anchor\" href=\"#redis数据安全及性能保障\">#</a> redis 数据安全及性能保障</h1>\n<h2 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h2>\n<ul>\n<li>快照：在某个时刻将数据写入硬盘。</li>\n<li>追加文件：保存写操作的执行语句到硬盘。</li>\n</ul>\n<h2 id=\"如何创建快照\"><a class=\"anchor\" href=\"#如何创建快照\">#</a> 如何创建快照</h2>\n<ul>\n<li>客户端向 redis 发送 bgsave 命令：通过 fork 创建子进程去完成，不影响正常工作。</li>\n<li>客户端向 redis 发送 save 命令：不再响应任何操作，只进行快照创建。</li>\n<li>设置 save 选项：比如 save 60 100，如果 60 秒之内有 100 条数据被写入则自动执行 bgsave。</li>\n<li>收到关闭指令 shutdown：收到标准 team 信号后会执行 save 命令，阻塞所有客户端，并在 save 之后关闭服务</li>\n<li>redis 之间的 sync 同步操作：主服务器不在执行 bgsave 或者短时间内没有执行 bgsave 则执行一次 bgsave 操作。</li>\n</ul>\n<h2 id=\"快照持久化应用场景\"><a class=\"anchor\" href=\"#快照持久化应用场景\">#</a> 快照持久化应用场景</h2>\n<h3 id=\"个人开发\"><a class=\"anchor\" href=\"#个人开发\">#</a> 个人开发</h3>\n<p>设置 save 的配置为 save 900 1 ；15 分钟内只要有一条写入数据就进行快照生成，这样能够减少消耗的同时，保障每 15 分值就通过 bgsave 存储一次快照。</p>\n<p>注：时间可以根据自己的项目环境进行适当的整体。</p>\n<h3 id=\"对日志进行聚合计算\"><a class=\"anchor\" href=\"#对日志进行聚合计算\">#</a> 对日志进行聚合计算</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">process_logs</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    current_file<span class=\"token punctuation\">,</span> offset <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>mget<span class=\"token punctuation\">(</span><span class=\"token string\">\"progress:file\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"progress:position\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 得到执行到的文件名和偏移量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    pipe <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>pipline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建执行流水线</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># 在流水线里加入更新行号操作，并执行流水线全部内容</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">update_progress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        pipe<span class=\"token punctuation\">.</span>mset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token string\">\"progress:file\"</span><span class=\"token punctuation\">:</span> fname<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token string\">\"progress:position\"</span><span class=\"token punctuation\">:</span> offset</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        pipe<span class=\"token punctuation\">.</span>excute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 遍历所有文件（文件名是时间）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> fname <span class=\"token keyword\">in</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> fname <span class=\"token operator\">&lt;</span> current_file<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 文件已经执行过了之间跳过</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        inp <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> fname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> fname <span class=\"token operator\">==</span> current_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            inp<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 定位到对应的执行点</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 从头开始</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        current_file <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\"># 执行文件的每一行</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span> lno<span class=\"token punctuation\">,</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>inp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            callback<span class=\"token punctuation\">(</span>pipe<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 向队列中加入记录文件名字和偏移量的操作</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            offset <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 计算执行后的偏移量</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span>lno <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                update_progress<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\"># 加入执行行数超过 1000 或者全部加入完毕后，开始执行流水线，并更新行号</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        update_progress<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        inp<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>注：以上方式都是存在丢失数据的可能性。</p>\n</blockquote>\n<h2 id=\"aof持久化\"><a class=\"anchor\" href=\"#aof持久化\">#</a> AOF 持久化</h2>\n<p>把每次执行的命令写入 AOF 文件的末尾，以此来记录数据的变化。通过设置 appendonly yes 配置选项来执行写入频率。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>频率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>alaways</td>\n<td>每个写命令都写入</td>\n</tr>\n<tr>\n<td>everysec</td>\n<td>每秒同步一次</td>\n</tr>\n<tr>\n<td>no</td>\n<td>让操作系统自己决定何时同步</td>\n</tr>\n</tbody>\n</table>\n<p>文件同步：</p>\n<ol>\n<li>file.write 写入缓冲区</li>\n<li>file.flush 请求操作系统将缓冲区的数据写入硬盘（不一定立刻写入）</li>\n<li>sync 请求操作系统将文件据同步到硬盘（一直阻塞到指定文件内容被写入为止）</li>\n</ol>\n<blockquote>\n<p>注：AOF alaways 可以避免数据丢失，但性能太低，且折损硬盘寿命，所以更推荐使用 everysec。</p>\n</blockquote>\n<h3 id=\"重写压缩-aof文件\"><a class=\"anchor\" href=\"#重写压缩-aof文件\">#</a> 重写 / 压缩 AOF 文件</h3>\n<ul>\n<li>发送 bgrewriteaof : 重写 AOF 文件</li>\n<li>设置重写执行间隔和大小：\n<ul>\n<li>auto-aof-rewrite-percentage 100</li>\n<li>auto-aof-rewrite-min-size 64mb</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"复制\"><a class=\"anchor\" href=\"#复制\">#</a> 复制</h2>\n<blockquote>\n<p>关系型数据库通常采用一个主服务器（master）向多个从服务器 (slave) 发送更新，通过从服务器来处理读请求，redis 也采用同样方法。</p>\n</blockquote>\n<p>性能考量：redis 在对集合和有序集合的操作上需要花费较多时间，<strong>sunionstore</strong> 对两个包含 10000 个元素的集合进行合并需要七 - 八毫秒。</p>\n<h3 id=\"复制启动过程\"><a class=\"anchor\" href=\"#复制启动过程\">#</a> 复制启动过程</h3>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>主服务器操作</th>\n<th>从服务器操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>等待指令</td>\n<td>连接主服务器，发送 sync 命令</td>\n</tr>\n<tr>\n<td>2</td>\n<td>执行 bgsave，并用缓冲区记录 bgsave 之后的所有写命令</td>\n<td>根据配置决定是继续用现有数据返回结果还是直接返回错误</td>\n</tr>\n<tr>\n<td>3</td>\n<td>bgsave 执行完毕，发送快照给从服务器，发送期间继续用缓冲区记录写命令</td>\n<td>丢弃全部旧数据，更新并载入主服务器快照数据文件</td>\n</tr>\n<tr>\n<td>4</td>\n<td>快照发送完毕，向从服务器发送存储在缓存中的写命令</td>\n<td>完成对快照文件载入，接受主服务器命令</td>\n</tr>\n<tr>\n<td>5</td>\n<td>缓冲区写入数据发送完毕，从现在开始没执行写指令便发送给从服务器</td>\n<td>执行主服务器发来的全部写命令后，接受主服务器发来的每一个写命令</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://github.com/AllenGX/study_redis/blob/master/pic/sync.png?raw=true\" alt=\"流程图\" /></p>\n<blockquote>\n<p>建议：redis 主服务器的内存使用最好在 50% ~ 65% 以内，预留 30%~45% 的内存用于执行 bgsave 和创建记录写命令的缓存会比较合理。</p>\n</blockquote>\n<blockquote>\n<p>注意：从服务器同步主服务器的所有数据时，会<strong>失去</strong>已有的<strong>全部数据</strong>，并替换为主服务器的数据。</p>\n</blockquote>\n<blockquote>\n<p>警告：redis 不支持<strong>主服务器</strong>同步到其他<strong>主服务器</strong>。</p>\n</blockquote>\n<h2 id=\"主从链\"><a class=\"anchor\" href=\"#主从链\">#</a> 主从链</h2>\n<p>主服务器有从服务器，从服务器还有从服务器的情况下，称为主从链。主从链过长的情况下同步消耗大量时间。当从服务器去同步主服务器数据并准备载入主服务器快照的时候，会断开该从服务器和其自身从服务器的链接，在载入完成后，其从服务器需要重新建立链接并执行同步的全部操作。当读操作过多且同步时间较长时会出现问题。这里可以通过主从节点中间层来解决。</p>\n<p>节点中间层：对一个主服务器设置若干个从服务器，由从服务器去管理其他的从服务器进行同步数据的操作，而主服务器只需要管理该若干个从服务器的数据同步。</p>\n<h2 id=\"磁盘写入检查\"><a class=\"anchor\" href=\"#磁盘写入检查\">#</a> 磁盘写入检查</h2>\n<p>1、确认主从服连接正常<br />\n 2、检查虚构值（令牌）是否标记给从服务器<br />\n 3、检查写入缓冲区状态<br />\n 4、1 秒内等待从服务器把缓冲区数据写入磁盘<br />\n 5、清理虚构值（令牌）</p>\n<h2 id=\"系统故障\"><a class=\"anchor\" href=\"#系统故障\">#</a> 系统故障</h2>\n<h3 id=\"验证快照和aof文件\"><a class=\"anchor\" href=\"#验证快照和aof文件\">#</a> 验证快照和 AOF 文件</h3>\n<p>1、扫描 AOF 文件，找出出错命令，清楚出错命令和之后的全部命令。（目前还没办法支持修复出错命令）</p>\n<h3 id=\"更换故障主服务器\"><a class=\"anchor\" href=\"#更换故障主服务器\">#</a> 更换故障主服务器</h3>\n<p>例如 A 为主服务器（出现了故障需要更换），B 为从服务（正常）</p>\n<p>1、向 B 服务器执行 Save 命令得到数据的快照，把快照发送给 C 服务器，启动其 redis 并创建快照。并告知 B 服务器，C 为其新的主服务器</p>\n<p>2、把 B 服务器升级为主服务器（turn），然后设置新的从服务器。</p>\n<h2 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h2>\n<blockquote>\n<p>保障在多个客户端同时对相同数据进行写入，且不写脏数据</p>\n</blockquote>\n<pre><code>一个事务从MULTI开始，EXEC结束，中间的操作依次执行，遇到错误后回滚全部操作\n\nMULTI\n    操作1\n    操作2\n    操作3\n    ...\nEXEC\n</code></pre>\n<blockquote>\n<p>延迟执行事务有助于提升性能。把 MULTI，一系列操作和 EXEC 一起打包发送给 redis，以流水线的形式去执行能够提高效率。</p>\n</blockquote>\n<blockquote>\n<p>redis 的事务采用的是乐观锁。通过 watch 监听被修改对象，如果对象在自己修改之前被其他对象修改，则会抛出异常，自己的此次修改视为无效并重新尝试修改。<br />\n相比于 mysql 的悲观锁而言，可以减少客户端的等待时间，失败了就再来一次。</p>\n</blockquote>\n<h2 id=\"非事务型流水线\"><a class=\"anchor\" href=\"#非事务型流水线\">#</a> 非事务型流水线</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># True 会让流水线变成一个事务，会存在额外开销，在不需要使用事务的情况下可以传入 False</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pipe<span class=\"token operator\">=</span>conn<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>操作<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>操作<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>操作<span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pipe<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"关于性能方面的注意事项\"><a class=\"anchor\" href=\"#关于性能方面的注意事项\">#</a> 关于性能方面的注意事项</h2>\n<blockquote>\n<p>redis-benchmark -c 1 -q</p>\n</blockquote>\n<p>&quot;-c 1&quot; 只使用一个客户端测试</p>\n<p>&quot;-q&quot; 简化输出</p>\n<pre><code>测试redis性能：\nC:\\Users\\guoxin&gt;redis-benchmark -c l -q\n\nresult（一秒内各个操作的执行次数）:\nPING_INLINE: 27495.19 requests per second\nPING_BULK: 28793.55 requests per second\nSET: 26903.42 requests per second\nGET: 28401.02 requests per second\nINCR: 28137.31 requests per second\nLPUSH: 27247.96 requests per second\nRPUSH: 27056.28 requests per second\nLPOP: 27181.30 requests per second\nRPOP: 27419.80 requests per second\nSADD: 28105.68 requests per second\nSPOP: 28137.31 requests per second\nLPUSH (needed to benchmark LRANGE): 27041.64 requests per second\nLRANGE_100 (first 100 elements): 16017.94 requests per second\nLRANGE_300 (first 300 elements): 8993.61 requests per second\nLRANGE_500 (first 450 elements): 6709.16 requests per second\nLRANGE_600 (first 600 elements): 5420.05 requests per second\nMSET (10 keys): 24709.66 requests per second\n\n# 该测试并非实际结果，该测试不会对命令进行回复。实际过程中性能只能达到测试的50%~60%\n\n注意：如果性能只能达到25%~30%或者客户端返回 “Cannot assign requested address”则说明在发送指令过程中可能再次创建了新连接\n\n</code></pre>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Redis"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/redis/5-Redis-Building-Program/",
            "url": "https://allengx.gitee.io/computer-science/study/redis/5-Redis-Building-Program/",
            "title": "五、使用redis构建支持程序",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"使用redis构建支持程序\"><a class=\"anchor\" href=\"#使用redis构建支持程序\">#</a> 使用 redis 构建支持程序</h1>\n<h2 id=\"使用redis记录日志\"><a class=\"anchor\" href=\"#使用redis记录日志\">#</a> 使用 redis 记录日志</h2>\n<h3 id=\"记录最新日志到redis\"><a class=\"anchor\" href=\"#记录最新日志到redis\">#</a> 记录最新日志到 redis</h3>\n<blockquote>\n<p>分级日志</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SEVERITY <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    logging<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">:</span> <span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    logging<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">:</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    logging<span class=\"token punctuation\">.</span>WARNING<span class=\"token punctuation\">:</span> <span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    logging<span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    logging<span class=\"token punctuation\">.</span>CRITICAL<span class=\"token punctuation\">:</span> <span class=\"token string\">\"critical\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">log_recent</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> severity<span class=\"token operator\">=</span>logging<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span> pipe<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    severity <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>SEVERITY<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>severity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    destination <span class=\"token operator\">=</span> <span class=\"token string\">\"recent:%s:%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> severity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    message <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>asctime<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> message</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    pipe <span class=\"token operator\">=</span> pipe <span class=\"token keyword\">or</span> conn<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    pipe<span class=\"token punctuation\">.</span>lpush<span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    pipe<span class=\"token punctuation\">.</span>ltrim<span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    pipe<span class=\"token punctuation\">.</span>excute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"记录常规日志redis\"><a class=\"anchor\" href=\"#记录常规日志redis\">#</a> 记录常规日志 redis</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">log_common</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> severity<span class=\"token operator\">=</span>logging<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    severity <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>SEVERITY<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>severity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># info</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    destination <span class=\"token operator\">=</span> <span class=\"token string\">\"common: %s : %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> severity<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># common : allen : info</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    start_key <span class=\"token operator\">=</span> destination <span class=\"token operator\">+</span> <span class=\"token string\">\":start\"</span>  <span class=\"token comment\"># common : allen : info : start</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    pipe <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> timeout</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>watch<span class=\"token punctuation\">(</span>start_key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>timetuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            hour_start <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>now<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isoformat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2019-11-07T09:00:00</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            existing <span class=\"token operator\">=</span> pipe<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>start_key<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2019-11-07T08:00:00</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>multi<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> existing <span class=\"token keyword\">and</span> existing <span class=\"token operator\">&lt;</span> hour_start<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                pipe<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                            destination <span class=\"token operator\">+</span> <span class=\"token string\">\": last\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># common : allen : info - > common : allen : info : last</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                pipe<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span>start_key<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                            destination <span class=\"token operator\">+</span> <span class=\"token string\">\": pstart\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># common : allen : info : start -> common : allen : info : pstart</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                pipe<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>start_key<span class=\"token punctuation\">,</span> hour_start<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2019-11-07T08:00:00 ->2019-11-07T09:00:00</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> existing<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                pipe<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>start_key<span class=\"token punctuation\">,</span> hour_start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">#               name    amount  value</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>zincrby<span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [('message', x.0),...] -> [('message', x.0+1.0),...]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            log_recent<span class=\"token punctuation\">(</span>pipe<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> severity<span class=\"token punctuation\">,</span> pipe<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 见上节代码</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">except</span> redis<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span>WatchError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr></table></figure><h3 id=\"计数器和技术统计\"><a class=\"anchor\" href=\"#计数器和技术统计\">#</a> 计数器和技术统计</h3>\n<h4 id=\"存储计数器到redis\"><a class=\"anchor\" href=\"#存储计数器到redis\">#</a> 存储计数器到 redis</h4>\n<p>通过计数器记录网站点击量、销量或者数据库查询次数。从而对网站性能进行分析。例如 1s、5s、1 分钟执行了多少次。</p>\n<p>使用有序集合进行记录，集合的键值可以用时间戳表示，value 可以用点击次数表示。并且不会出现重复键值的情况</p>\n<pre><code>记录 2019 年 11 月 8 日 9 点 02 分的数据\nkey                     value\n201911010902$01:hit     100\n201911010902$05:hit     349\n201911010902$60:hit     5970\n</code></pre>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#存数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>PRECISION <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">86400</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 1 秒、5 秒、1 分钟、5 分钟、1 小时、5 小时、1 天</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">update_counter</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> count<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> now<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    now <span class=\"token operator\">=</span> now <span class=\"token keyword\">or</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    pipe <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> prec <span class=\"token keyword\">in</span> PRECISION<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        pnow <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">/</span> prec<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> prec  <span class=\"token comment\"># 1573176436(1) 1573176435(5) 1573176420(60)...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        hashstr <span class=\"token operator\">=</span> <span class=\"token string\">\"%s:%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>prec<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1 : name</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pipe<span class=\"token punctuation\">.</span>zadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"know:\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>hashstr<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        pipe<span class=\"token punctuation\">.</span>hincrby<span class=\"token punctuation\">(</span><span class=\"token string\">\"count:\"</span> <span class=\"token operator\">+</span> hashstr<span class=\"token punctuation\">,</span> pnow<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># count:1 : name : &#123;1573176436:count,1573176437:count&#125; </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                                       <span class=\"token comment\"># count:5 : name : &#123;1573176435:count,1573176440:count&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    pipe<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#取数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_counter</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> precision<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    hashstr <span class=\"token operator\">=</span> <span class=\"token string\">\"%s:%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>precision<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1 : name</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    data <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>hgetall<span class=\"token punctuation\">(</span><span class=\"token string\">\"count:\"</span> <span class=\"token operator\">+</span> hashstr<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># count:1 : name</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    to_return <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">.</span>iteritems<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># &#123;1573176436:1,1573176438:3,1573176437:2&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        to_return<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    to_return<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> to_return  <span class=\"token comment\"># [(\"1573176436\", 1), (\"1573176437\", 2), (\"1573176438\", 3)]</span></pre></td></tr></table></figure><h4 id=\"清理旧计数器\"><a class=\"anchor\" href=\"#清理旧计数器\">#</a> 清理旧计数器</h4>\n<p>上面对计数器的记录是通过时间间隔划分的，这周记录会让日志变得越来越庞大，为防止其无线膨胀，我们需要对其进行清理，当然，我们也可以在键中加入日期来进行分日记录，然后用 expire 对某个键进行删除。</p>\n<p>如果使用上面的记录方式（通过时间间隔划分）。在清理旧数据是，则需要考虑以下几点。</p>\n<ol>\n<li>任何时间都会有新数据加入。</li>\n<li>同一时间多个清理操作会一起执行。</li>\n<li>对于每天可能只更新一次的计数器来说，清理的频率不能设置的太低，不然会白白消耗性能。</li>\n<li>如果计数器不存在数据，则不需用对其进行清理。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> bisect</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SAMPLE_COUNT <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>  <span class=\"token comment\"># 保留 1000 条记录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">clean_counters</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    pipe <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    passes <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span> index <span class=\"token operator\">&lt;</span> conn<span class=\"token punctuation\">.</span>zcard<span class=\"token punctuation\">(</span><span class=\"token string\">\"know:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 计数器数量 > index</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token builtin\">hash</span> <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>zrange<span class=\"token punctuation\">(</span><span class=\"token string\">\"know:\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 取到第 index 个计数器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token builtin\">hash</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 得到对应的值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            prec <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">.</span>partition<span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1 : name 取到 1 的值（1 表示日志的记录间隔，通过写入时进行规定）</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            bprec <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>prec <span class=\"token operator\">//</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 小于 60 秒记录一次的每次都要清理，大于 60 秒的记录被跳过次数，根据跳过次数判断是否清理</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> passes <span class=\"token operator\">%</span> bprec<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            hkey <span class=\"token operator\">=</span> <span class=\"token string\">\"count:\"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">hash</span>  <span class=\"token comment\"># count:1 : name</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            cutoff <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> SAMPLE_COUNT <span class=\"token operator\">*</span> prec  <span class=\"token comment\"># 判断需要从哪个时间开始截取数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            samples <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">.</span>hkeys<span class=\"token punctuation\">(</span>hkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['1573176435','1573176440'] -> [1573176435,1573176440]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            samples<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            remove <span class=\"token operator\">=</span> bisect<span class=\"token punctuation\">.</span>bisect_right<span class=\"token punctuation\">(</span>samples<span class=\"token punctuation\">,</span> cutoff<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回 cutoff 的插入位置，此处意为判断是否有比 cutoff 打的数据</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> remove<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                conn<span class=\"token punctuation\">.</span>hdel<span class=\"token punctuation\">(</span>hkey<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>samples<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>remove<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 把小于 cutoff 的数据全部剔除</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span> remove <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>samples<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 剔除成功</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        pipe<span class=\"token punctuation\">.</span>watch<span class=\"token punctuation\">(</span>hkey<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> pipe<span class=\"token punctuation\">.</span>hlen<span class=\"token punctuation\">(</span>hkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 判断 1 : name 中是否还有记录  ，没有的话就把该 key 给回收</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                            pipe<span class=\"token punctuation\">.</span>muti<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                            pipe<span class=\"token punctuation\">.</span>zrem<span class=\"token punctuation\">(</span><span class=\"token string\">\"know:\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                            pipe<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                            index <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                            pipe<span class=\"token punctuation\">.</span>unwatch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">except</span> redis<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span>WatchError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        passes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 步数 + 1</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        duration <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 一个 while 执行时间  duration</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">-</span> duration<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 休眠 60-duration 的时间，保证 60 秒执行一次</span></pre></td></tr></table></figure><h3 id=\"使用redis统计数据\"><a class=\"anchor\" href=\"#使用redis统计数据\">#</a> 使用 redis 统计数据</h3>\n<p>统计最大最小数、总数和、总数量、总数平方和，通过对每次加入有序集合的 value 进行并集取最小、并集取最大操作以及自增来进行统计</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> uuid</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">update_state</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    destination <span class=\"token operator\">=</span> <span class=\"token string\">\"states:%s:%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># states:context:type</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    start_key <span class=\"token operator\">=</span> destination <span class=\"token operator\">+</span> <span class=\"token string\">\":start\"</span>  <span class=\"token comment\"># states:context:type:start</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    pipe <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> timeout</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>watch<span class=\"token punctuation\">(</span>start_key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>utcnow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>timetuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># utcnow : time.struct_time(tm_year=2019, tm_mon=11, tm_mday=13, tm_hour=12, tm_min=1, tm_sec=36, tm_wday=2, tm_yday=317, tm_isdst=-1)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            hour_start <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>now<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isoformat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2019-11-13T12:00:00</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            existing <span class=\"token operator\">=</span> pipe<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>start_key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>muti<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> existing <span class=\"token keyword\">and</span> existing <span class=\"token operator\">&lt;</span> hour_start<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                pipe<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> destination <span class=\"token operator\">+</span> <span class=\"token string\">\":last\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># states:context:type -> states:context:type:last</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                pipe<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span>start_key<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                            destination <span class=\"token operator\">+</span> <span class=\"token string\">\":pstart\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># states:context:type:start -> states:context:type:pstart</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                pipe<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>start_key<span class=\"token punctuation\">,</span> hour_start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            tkey1 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">.</span>uuid4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 用来存最小 key，value</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            tkey2 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">.</span>uuid4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 用来存最大 key，value</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>zadd<span class=\"token punctuation\">(</span>tkey1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"min\"</span><span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>zadd<span class=\"token punctuation\">(</span>tkey2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"max\"</span><span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>zunionstore<span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>destination<span class=\"token punctuation\">,</span> tkey1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> aggregate<span class=\"token operator\">=</span><span class=\"token string\">\"min\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 两个集合合并，取分值小的 —— 意在每次保留最小的 value 到 destination 集合中</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>zunionstore<span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>destination<span class=\"token punctuation\">,</span> tkey2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> aggregate<span class=\"token operator\">=</span><span class=\"token string\">\"max\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 两个集合合并，取分值大的 —— 意在每次保留最大的 value 到 destination 集合中</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>tkey1<span class=\"token punctuation\">,</span> tkey2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>zincrby<span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> <span class=\"token string\">\"count\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># count + 1</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>zincrby<span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sum\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># sum + value</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            pipe<span class=\"token punctuation\">.</span>zincrby<span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sumsq\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">*</span> value<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># sumsq +value * value</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> pipe<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 返回后三个数值 count , sum , sumsq</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">except</span> redis<span class=\"token punctuation\">.</span>exceptions<span class=\"token punctuation\">.</span>WatchError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_state</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    key <span class=\"token operator\">=</span> <span class=\"token string\">\"stats:%s:%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>zrange<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> withscores<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    data<span class=\"token punctuation\">[</span><span class=\"token string\">\"average\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"sum\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 平均数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    numerator <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"sumsq\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"sum\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    data<span class=\"token punctuation\">[</span><span class=\"token string\">\"stddev\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>numerator <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"count\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">0.5</span>  <span class=\"token comment\"># 标准差</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> data</pre></td></tr></table></figure><h3 id=\"简化统计数据记录与发现记录统计数据并进行分析\"><a class=\"anchor\" href=\"#简化统计数据记录与发现记录统计数据并进行分析\">#</a> 简化统计数据记录与发现（记录统计数据并进行分析）</h3>\n<p>构造一个记录运行性能的装饰器</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> contextlib</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># contextlib.contextmanager 该装饰器会先执行 yield 上面的语句 当 with access_time（）内的内容被执行后，会执行 yield 下面的语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 执行顺序如下</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token decorator annotation punctuation\">@contextlib<span class=\"token punctuation\">.</span>contextmanager</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">access_time</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">yield</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    delta <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start  <span class=\"token comment\"># 4</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    stats <span class=\"token operator\">=</span> update_state<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"AccessTime\"</span><span class=\"token punctuation\">,</span> delta<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    average <span class=\"token operator\">=</span> stats<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> stats<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    pipe <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>pipeline<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    pipe<span class=\"token punctuation\">.</span>zadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"slowest:AccessTime\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> average<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    pipe<span class=\"token punctuation\">.</span>zremrangebyrand<span class=\"token punctuation\">(</span><span class=\"token string\">\"slowest:AccessTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    pipe<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">process_view</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> detectedfunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    funcname <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>detectedfunc<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__name__\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">with</span> access_time<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> funcname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> detectedfunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>process_view<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"查找ip所属城市及国家\"><a class=\"anchor\" href=\"#查找ip所属城市及国家\">#</a> 查找 ip 所属城市及国家</h2>\n<p>首先需要把 ip 对应的城市及国家表格载入 redis</p>\n<h3 id=\"载入位置表格\"><a class=\"anchor\" href=\"#载入位置表格\">#</a> 载入位置表格</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FsbGVuR1gvc3R1ZHlfcmVkaXMvYmxvYi9tYXN0ZXIvaXAvR2VvTGl0ZTItQ2l0eS1DU1ZfMjAxOTExMTIuemlw\">GeoLite2-City-Blocks-IPv4.csv 下载</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> redis</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> csv</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 将 ip 地址转为 10 进制整数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 127.0.0.1 -> 2130706433</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">ip_to_score</span><span class=\"token punctuation\">(</span>ip_address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    score <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> ip_address<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        score <span class=\"token operator\">=</span> score <span class=\"token operator\">*</span> <span class=\"token number\">256</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> score</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 文件通过 http://dev.maxmind.com/geoip/geolite 的 GeoLite2-City-Blocks-IPv4.csv</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 构建唯一地址 ip-> 城市 id</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">import_ips_to_redis</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> csv_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        csv_file <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">(</span>csv_file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> count<span class=\"token punctuation\">,</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>csv_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            start_ip <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> row <span class=\"token keyword\">else</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token string\">\"i\"</span> <span class=\"token keyword\">in</span> start_ip<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token string\">\".\"</span> <span class=\"token keyword\">in</span> start_ip<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                start_ip <span class=\"token operator\">=</span> start_ip<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">#2.25.32.0/24</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                start_ip <span class=\"token operator\">=</span> ip_to_score<span class=\"token punctuation\">(</span>start_ip<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 35201024</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">elif</span> start_ip<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                start_ip <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>start_ip<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            city_id <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\"># row ['2.25.32.0/24', '2645161', '2635167', '', '0', '0', 'SG3', '51.8513', '-0.1596', '100']</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            conn<span class=\"token punctuation\">.</span>zadd<span class=\"token punctuation\">(</span><span class=\"token string\">\"ip2cityid:\"</span><span class=\"token punctuation\">,</span> city_id<span class=\"token punctuation\">,</span> start_ip<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># ip2cityid: 2635167_14003 35201024</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 文件通过 http://dev.maxmind.com/geoip/geolite 的 GeoLite2-City-Locations-zh-CN.csv</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 生成地址映射 城市 id-> 城市信息</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">import_cities_to_redis</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> csv_file<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        csv_file <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">(</span>csv_file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">for</span> count<span class=\"token punctuation\">,</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>csv_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\"># row ['2827433', 'zh-CN', 'EU', ' 欧洲 ', 'DE', ' 德国 ', 'SL', '', '', '', '', '', 'Europe/Berlin', '1']</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            row <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"latin-1\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> row<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            city_id <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\"># 2827433</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            country <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\"># zh-CN</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            region <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>     <span class=\"token comment\"># EU</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            city <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>       <span class=\"token comment\"># 欧洲 ->\"\\u00e6\\u00ac\\u00a7\\u00e6\\u00b4\\u00b2\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\"># cityid2city: 2827433 [\"\\u00e6\\u00ac\\u00a7\\u00e6\\u00b4\\u00b2\", \"EU\", \"zh-CN\"]</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            conn<span class=\"token punctuation\">.</span>hset<span class=\"token punctuation\">(</span><span class=\"token string\">\"cityid2city:\"</span><span class=\"token punctuation\">,</span> city_id<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>city<span class=\"token punctuation\">,</span> region<span class=\"token punctuation\">,</span> country<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>import_cities_to_redis<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C:/Users/duoyi/Desktop/GeoLite2-City-CSV_20191112/GeoLite2-City-Locations-zh-CN.csv\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>import_ips_to_redis<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span><span class=\"token string\">\"C:/Users/duoyi/Desktop/GeoLite2-City-CSV_20191112/GeoLite2-City-Blocks-IPv4.csv\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Redis"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/micro-service/istio/Istio-Introduction-And-Service-Mesh/",
            "url": "https://allengx.gitee.io/computer-science/study/micro-service/istio/Istio-Introduction-And-Service-Mesh/",
            "title": "Istio简介&&服务网格",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"istio-服务网格\"><a class=\"anchor\" href=\"#istio-服务网格\">#</a> Istio 服务网格</h2>\n<p>Istio 是运行于分布式应用程序之上的<strong>非侵入式（无代码入侵）服务网格系统</strong>，为了更好更轻松的解决服务指令问题。</p>\n<h3 id=\"服务网格是什么\"><a class=\"anchor\" href=\"#服务网格是什么\">#</a> 服务网格是什么</h3>\n<p><strong>服务网格</strong>用来描述组成这些应用程序的微服务网络以及它们之间的交互。随着服务网格的规模和复杂性不断的增长，它将会变得越来越难以理解和管理。它的需求包括：</p>\n<ul>\n<li>服务发现</li>\n<li>负载均衡</li>\n<li>故障恢复</li>\n<li>度量和监控</li>\n<li>A/B 测试</li>\n<li>金丝雀发布</li>\n<li>流量限制</li>\n<li>访问控制</li>\n<li>端到端认证</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200827203851769.png\" alt=\"image-20200827203851769\" /></p>\n<h3 id=\"什么是-istio\"><a class=\"anchor\" href=\"#什么是-istio\">#</a> 什么是 Istio</h3>\n<p>一个为微服务提供网络通信的代理。为每个微服务部署一个 Sidecar。然后通过使用其控制平面功能配置和管理 Istio，可以为服务添加 Istio 支持，包括：</p>\n<ul>\n<li>HTTP，gRPC，WebSocket 和 TCP 通信的自动负载平衡。</li>\n<li>通过丰富的路由规则，重试，故障转移和故障注入对流量行为进行精细控制。</li>\n<li>可插拔的策略层和配置 API，支持访问控制，速率限制和配额。</li>\n<li>群集内所有流量的自动指标，日志和跟踪，包括群集的入口和出口。</li>\n<li>通过强大的基于身份的身份验证和授权，确保群集中服务之间的通信安全。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200827204217917.png\" alt=\"image-20200827204217917\" /></p>\n<p>总体上看，Istio 的服务网格由数据平面和控制平面两部分组成：</p>\n<ul>\n<li>\n<p><strong>数据平面</strong>：由一系列作为 Sidecar 部署的智能代理（Envoy）构成。这些代理联合 Mixer，中继，控制所有微服务之间的网络通信。需要注意，还有一些 Envoy 的 hi 独立部署（而非 Sidecar）的，用来实现 Kubernetes Ingress 控制器，Istio 的 Ingress/Egress 网关</p>\n</li>\n<li>\n<p><strong>控制平面</strong>：负责管理、配置智能代理，实现流量路由；配置 Citadel 实现 TLS 证书管理；配置 Mixers 来应用策略、收集指标帧。</p>\n</li>\n</ul>\n<h3 id=\"istio组件\"><a class=\"anchor\" href=\"#istio组件\">#</a> Istio 组件</h3>\n<ul>\n<li>\n<p><strong>Envoy：</strong> 高性能的代理，具备以下特性</p>\n<ul>\n<li>动态服务发现</li>\n<li>负责均衡</li>\n<li>TLS termination（可将 HTTP 请求伪装成 HTTPS）</li>\n<li>HTTP/2 和 gRPC 代理</li>\n<li>断路器</li>\n<li>健康检查</li>\n<li>分阶段（基于流百分比）发布</li>\n<li>故障注入</li>\n<li>丰富的监控指标</li>\n</ul>\n</li>\n<li>\n<p><strong>Pilot：</strong> 监控器，监测配置、规则、策略的变化并同步给 Envoy</p>\n<ul>\n<li>为 Envoy 提供服务发现</li>\n<li>为智能路由（AB 测试、金丝雀部署）</li>\n<li>提供弹性（超时、重试、断路器）</li>\n<li>分发身份验证策略给 Envoy</li>\n</ul>\n</li>\n<li>\n<p><strong>Mixer：</strong> 无关平台的组件</p>\n<ul>\n<li>为服务网格提供访问控制策略</li>\n<li>收集服务中的各项指标</li>\n<li>对收集的信息进行分析</li>\n</ul>\n</li>\n<li>\n<p><strong>Citadel：</strong> 提供服务与服务之间、或者针对终端用户的身份验证功能，可以加密网络中的流量</p>\n</li>\n<li>\n<p><strong>Kiali：</strong> 提供统一的可视化界面</p>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务",
                "Istio"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/micro-service/helm/Helm-Introduction-And-Pag-Manager/",
            "url": "https://allengx.gitee.io/computer-science/study/micro-service/helm/Helm-Introduction-And-Pag-Manager/",
            "title": "Helm简介&&包管理",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"helm\"><a class=\"anchor\" href=\"#helm\">#</a> Helm</h2>\n<p>Helm 是一个 Kubernetes 应用的包管理工具</p>\n<ul>\n<li>Helm：客户端工具，用于为 Kubernetes 应用程序提供 Chart 的创建、打包、发布，并管理本地和远程 Chart 仓库</li>\n<li>Tiller：服务端，需要部署在 Kubernetes 集群中，接受 Helm 请求，并根据 Chart 生成 Kubernetes 的部署文件（Release），然后交给 Kubernetes 创建应用。并且提供了 Release 的升级、删除、回滚等功能。</li>\n<li>Chart：Helm 的软件包，Tar 格式。其定义了一组 Kubernetes 资源配置相关的 Yaml 文件。常见的 Chart 大概一下几种：\n<ul>\n<li>service 配置文件（.yaml）</li>\n<li>deployment 配置文件</li>\n<li>pv 配置文件</li>\n<li>pvc 配置文件</li>\n<li>config-map 配置文件</li>\n</ul>\n</li>\n<li>Repoistory：Helm 的软件仓库，本质是个 Web 服务器，用于存放 Chart 供用户下载，Helm 可以管理多个 Repository。</li>\n<li>Release：用 helm install 命令在 Kubernetes 集群中部署的 Chart 称为 Release</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200827192009589.png\" alt=\"image-20200827192009589\" /></p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务",
                "Helm"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/micro-service/docker/Docker-Introduction/",
            "url": "https://allengx.gitee.io/computer-science/study/micro-service/docker/Docker-Introduction/",
            "title": "Docker介绍&&容器",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> Docker</h1>\n<h3 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<ul>\n<li>\n<p>C/S 架构。通过远程 API 来创建 Docker 容器</p>\n</li>\n<li>\n<p>容器 &amp;&amp; 镜像</p>\n<table>\n<thead>\n<tr>\n<th>Docker</th>\n<th>面向对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>容器</td>\n<td>对象</td>\n</tr>\n<tr>\n<td>镜像</td>\n<td>类</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200822181252411.png\" alt=\"image-20200822181252411\" /></p>\n</li>\n</ul>\n<h3 id=\"相比于传统的虚拟机\"><a class=\"anchor\" href=\"#相比于传统的虚拟机\">#</a> 相比于传统的虚拟机</h3>\n<ul>\n<li>更快的启动速度：不需要再构建一个虚拟操作系统。</li>\n<li>一致的运行环境：测试、开发、生产环境高度统一。</li>\n<li>持续交付和部署（CI/CD—— 持续集成 &amp;&amp; 持续部署）。</li>\n<li>更轻松的迁移。</li>\n</ul>\n<h3 id=\"常用docker指令\"><a class=\"anchor\" href=\"#常用docker指令\">#</a> 常用 Docker 指令</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>docker ps</td>\n<td>查看运行中的容器 eg：docker pseg：docker ps -a</td>\n</tr>\n<tr>\n<td>docker stats</td>\n<td>查看容器消耗资源情况</td>\n</tr>\n<tr>\n<td>docker build -t +「image_name」:「tag」 -f +「DockerFile_name」+「DockerFile_path」</td>\n<td>使用 dockerfile 构建镜像 eg：docker build -t my_image ./eg：docker build -t my_image -f my_dockerfile ./</td>\n</tr>\n<tr>\n<td>docker exec -it + 「container_id / container_name」 bash</td>\n<td>进入 docker 的 bash 操作界面 eg：docker exec -it 9ef bash</td>\n</tr>\n<tr>\n<td>docker commit + 「container_id / container_name」 + 「image_id / image_name」：「tag」</td>\n<td>将容器保存为镜像 eg：docker commit 9ef 85a:1.0</td>\n</tr>\n<tr>\n<td>docker pull + 「url」:「tag」</td>\n<td>拉取远端仓库的镜像到本地 eg：docker pull 「URL」</td>\n</tr>\n<tr>\n<td>docker push + 「url」:「tag」</td>\n<td>提交本地镜像到远端仓库 eg：docker push 「URL」</td>\n</tr>\n<tr>\n<td>docker 「login/logout」 + 「url」-u lsername」</td>\n<td>登入 / 登出 第三方仓库</td>\n</tr>\n<tr>\n<td>docker images</td>\n<td>查看本地镜像 eg：docker images</td>\n</tr>\n<tr>\n<td>docker rmi + 「image_id / image_name」</td>\n<td>删除本地的镜像 eg：docker rmi 85a</td>\n</tr>\n<tr>\n<td>docker save + 「image_id / image_name」 &gt; 「file_path」</td>\n<td>本地镜像打包成压缩包 eg：docker save 85a &gt;~/home/username/docker.tar.gz</td>\n</tr>\n<tr>\n<td>docker load &lt; 「压缩文件名」</td>\n<td>导入镜像压缩包 eg：docker load &lt; ~/home/username/docker.tar.gz</td>\n</tr>\n<tr>\n<td>docker run + 「参数」+ 「container_id /container_name」+ 「命令」</td>\n<td>创建并启动容器 eg：docker run -d 85a</td>\n</tr>\n<tr>\n<td>docker stop + 「container_id / container_name」</td>\n<td>关闭容器 eg：docker stop 9ef</td>\n</tr>\n<tr>\n<td>docker 「kill / start / restart 」+ 「container_id / container_name」</td>\n<td>强杀 / 启动 / 重启 容器 eg：docker kill 9efdocker start 9efdocker restart 9ef</td>\n</tr>\n<tr>\n<td>docker rm + 「image_id / image_name」</td>\n<td>删除容器 eg：docker rm -f 9ef</td>\n</tr>\n<tr>\n<td>docker inspect + 「image_id / image_name」</td>\n<td>查看镜像详细信息</td>\n</tr>\n<tr>\n<td>docker inspect + 「container_id / container_name」</td>\n<td>查看容器信息</td>\n</tr>\n<tr>\n<td>docker top + 「container_id / container_name」</td>\n<td>查看正在运行的容器进程</td>\n</tr>\n<tr>\n<td>docker tag + 「image_id / image_name」+「image_id / image_name」:「tag」</td>\n<td>修改镜像 tageg：docker tag 85a 85a:1.0 删除新创建的 tag：eg：docker rmi 85a:1.0</td>\n</tr>\n<tr>\n<td>docker system df</td>\n<td>查看镜像、容器等体积</td>\n</tr>\n<tr>\n<td>docker container prune</td>\n<td>删除所有容器</td>\n</tr>\n<tr>\n<td>docker image prune</td>\n<td>清理所有的虚悬镜像（产生原因时旧版本被新版本替代后的残留）</td>\n</tr>\n<tr>\n<td>docker network [...]</td>\n<td>docker 网络相关指令</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"docker网络\"><a class=\"anchor\" href=\"#docker网络\">#</a> Docker 网络</h3>\n<p>一个 container 对应一个局域网络，一个 container 内可以直接通过名称来访问，docker 为容器提供了以下网络：</p>\n<ul>\n<li>none：将容器添加到一个容器专门的网络堆栈中，没有对外连接。</li>\n<li>host：将容器添加到主机的网络堆栈中，容器与 docker 主机之间没有网络隔离。</li>\n<li>default bridge：默认网络模式。每个容器可以通过 ip 地址互相连接。</li>\n<li>overlay：覆盖网络。将多个 docker 守护程序连接再一起，使得集群之间可以互相通讯。</li>\n<li>macvlan：提供将 Mac 地址分配给容器的功能，使其具有物理设备的特性，Docker 守护程序通过 Mac 地址进行路由。</li>\n<li>自定义网桥：用户定义的网桥，具有更多的灵活性、隔离性和其他遍历功能。</li>\n</ul>\n<h3 id=\"dockerfile常用指令\"><a class=\"anchor\" href=\"#dockerfile常用指令\">#</a> DockerFile 常用指令</h3>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>COPY &lt;源路径&gt; &lt; 目标路径 &gt;</td>\n<td>复制文件到目录</td>\n</tr>\n<tr>\n<td>RUN &lt;指令&gt;</td>\n<td>执行指令，例： RUN rm -rf /user/local/*</td>\n</tr>\n<tr>\n<td>FROM &lt;镜像名&gt;</td>\n<td>继承一个镜像</td>\n</tr>\n<tr>\n<td>ADD &lt;源路径&gt; &lt; 目标路径 &gt;</td>\n<td>复制文件到目录，如果文件时压缩包，还会自动解压</td>\n</tr>\n<tr>\n<td>CMD &lt;脚本&gt;</td>\n<td>执行脚本的指令（只允许使用一次该指令），以最后出现的为准</td>\n</tr>\n<tr>\n<td>ENTRYPOINT &lt;脚本&gt;</td>\n<td>和 CMD 类似（只允许使用一次该指令）</td>\n</tr>\n<tr>\n<td>EVN &lt;变量名&gt; &lt; 值 &gt;</td>\n<td>配置环境变量</td>\n</tr>\n<tr>\n<td>VOLUME &lt;路径&gt;</td>\n<td>创建挂载点（一个类似容器内和外部环境交互的虚拟内存)，类似 linux 系统下 mount 的机制</td>\n</tr>\n<tr>\n<td>EXPOSE [&lt;端口 1&gt; ...]</td>\n<td>申明容器暴露的端口</td>\n</tr>\n<tr>\n<td>WORKDIR &lt;目录&gt;</td>\n<td>有点类似 CD，指定容器的初始目录</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"docker-compose\"><a class=\"anchor\" href=\"#docker-compose\">#</a> Docker Compose</h3>\n<p>Compose 是用于定义和运行多容器 Docker 应用程序的工具，简化容器的启动和定义容器之间的关系。</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824141537909.png\" alt=\"image-20200824141537909\" /></p>\n<p>这部分以后再看，相关链接<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2NjI2Mjg0MzQ/cD0yNw==\"> https://www.bilibili.com/video/av62628434?p=27</span></p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务",
                "Docker",
                "Docker"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/micro-service/kubernetes/Kubernetes-Env-Building/",
            "url": "https://allengx.gitee.io/computer-science/study/micro-service/kubernetes/Kubernetes-Env-Building/",
            "title": "Kubernetes构建环境",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"kubernetes环境构建\"><a class=\"anchor\" href=\"#kubernetes环境构建\">#</a> Kubernetes 环境构建</h2>\n<h3 id=\"前提环境\"><a class=\"anchor\" href=\"#前提环境\">#</a> 前提环境：</h3>\n<ul>\n<li>ubuntu 18.04/ubuntu 16.04</li>\n<li>2GB 内存</li>\n<li>20G 硬盘</li>\n<li>CPU 一定要 2 核以上（否则会装不了 kubernetes）</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看逻辑 CPU 的个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span> /proc/cpuinfo<span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"processor\"</span><span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l</pre></td></tr></table></figure><h3 id=\"节点配置\"><a class=\"anchor\" href=\"#节点配置\">#</a> 节点配置</h3>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>IP</th>\n<th>角色</th>\n<th>系统</th>\n<th>CPU / 内存</th>\n<th>磁盘</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>kubernetes-master</td>\n<td>10.0.2.110</td>\n<td>Master</td>\n<td>ubuntu 16.04</td>\n<td>2 核 2G</td>\n<td>20G</td>\n</tr>\n<tr>\n<td>kubernetes-node-01</td>\n<td>10.0.2.120</td>\n<td>Node</td>\n<td>ubuntu 16.04</td>\n<td>2 核 2G</td>\n<td>20G</td>\n</tr>\n<tr>\n<td>kubernetes-node-02</td>\n<td>10.0.2.121</td>\n<td>Node</td>\n<td>ubuntu 16.04</td>\n<td>2 核 2G</td>\n<td>20G</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"部署步骤\"><a class=\"anchor\" href=\"#部署步骤\">#</a> 部署步骤</h3>\n<h4 id=\"环境部署\"><a class=\"anchor\" href=\"#环境部署\">#</a> 环境部署</h4>\n<h5 id=\"通用部署流程\"><a class=\"anchor\" href=\"#通用部署流程\">#</a> 通用部署流程</h5>\n<ul>\n<li>关闭交换空间</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>swapoff -a</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">free</span> -h <span class=\"token comment\">#查看交换空间大小</span></pre></td></tr></table></figure><ul>\n<li>关闭交换空间自启动</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> /etc/fstab</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 注释掉含有 swap 开头的代码行</span></pre></td></tr></table></figure><ul>\n<li>关闭防火墙</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ufw disable</pre></td></tr></table></figure><ul>\n<li>配置 DNS</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 取消 DNS 注释，并增加 DNS 配置如：114.114.114.114. 修改后重启计算机</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">vi</span> /etc/systemd/resolved.conf</pre></td></tr></table></figure><ul>\n<li>安装 Docker</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 更新软件源</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 安装所需依赖</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> -y <span class=\"token function\">install</span> apt-transport-https ca-certificates <span class=\"token function\">curl</span> software-properties-common</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 安装 GPG 证书</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">curl</span> -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 新增软件源信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sudo</span> add-apt-repository <span class=\"token string\">\"deb  [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release -cs<span class=\"token variable\">)</span></span> stable\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 查看软件源信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">cat</span> /etc/apt/sources.list</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 再次更新软件源</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> -y update</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 安装 docker</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> -y <span class=\"token function\">install</span> docker-ce</pre></td></tr></table></figure><ul>\n<li>配置 docker 加速器</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> /etc/docker/daemon.json</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 粘贴如下内容</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">\"registry-mirrors\"</span>:<span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"https://k7da99jp.mirror.aliyuncs.com/\"</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"http://hub-mirror.c.163.com\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>重启 docker</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl restart docker</pre></td></tr></table></figure><ul>\n<li>查看 docker 信息</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker info</pre></td></tr></table></figure><ul>\n<li>安装 Kubernetes 必备工具\n<ul>\n<li>kubeadm</li>\n<li>kubelet</li>\n<li>kubectl</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装系统工具</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">apt-get</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y apt-transport-https</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 安装 GPG 证书</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">curl</span> https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg <span class=\"token operator\">|</span> apt-key <span class=\"token function\">add</span> -</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 写入软件源</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span> EOF <span class=\"token operator\">></span> /etc/apt/sources.list.d/kubernetes.list </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>EOF</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 安装 Kubernetes 必备工具</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">apt-get</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y kubelet kubeadm kubectl</pre></td></tr></table></figure><ul>\n<li>同步时区</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dpkg-reconfigure tzdata</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 时区选择 Asia -> shanghai</span></pre></td></tr></table></figure><ul>\n<li>安装 ntp（时间同步）</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装 uptdate</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> ntpdate</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 设置系统时间与网络时间同步（cn.pool.ntp.org 位于中国的公共 NTP 服务器）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ntpdate cn.poo.ntp.org</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 将系统时间写入硬件时间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>hwclock --systohc</pre></td></tr></table></figure><ul>\n<li>确认时间</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">date</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 输出结果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Web Aug <span class=\"token number\">26</span> <span class=\"token number\">10</span>:10:45 CST <span class=\"token number\">2020</span></pre></td></tr></table></figure><ul>\n<li>修改 cloud.cfg</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 防止重启后主机名还原</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">vi</span> /etc/cloud/cloud.cfg</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 该配置默认为 false，修改为 true 即可</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>preserve_hostname: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 重启电脑，让配置生效</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">reboot</span></pre></td></tr></table></figure><h5 id=\"单独部署流程\"><a class=\"anchor\" href=\"#单独部署流程\">#</a> 单独部署流程</h5>\n<ul>\n<li>配置 IP</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> /etc/network/interfaces</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 修改成如下内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#NAT interface</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>auto enp0s3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>iface enp0s3 inet static</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>address <span class=\"token number\">10.0</span>.2.110</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>netmask <span class=\"token number\">255.255</span>.255.0</pre></td></tr></table></figure><ul>\n<li>让配置生效</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>netplan apply</pre></td></tr></table></figure><ul>\n<li>配置主机名</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 修改主机名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hostnamectl set-hostname kubernetes-master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 配置 hosts</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token operator\">>></span> /etc/hosts <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>10.0.2.110 kubernetes-master</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>EOF</span></pre></td></tr></table></figure><h4 id=\"集群部署\"><a class=\"anchor\" href=\"#集群部署\">#</a> 集群部署</h4>\n<ul>\n<li>创建并修改集群配置</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubeadm config print init-defaults --kubeconfig ClusterConfiguration <span class=\"token operator\">></span> kubeadm.yml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">vi</span> kubeadm.yml</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 根据需要修改配置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>advertiseAddress: <span class=\"token number\">10.0</span>.2.110</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>imageRepository: registry.aliyuncs.com/google_containers</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>kubernetesVersion: v1.18.0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># kubernetesVersion 版本查看</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>kubeadm version</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 在 dnsDomain 下面配置一下 node 节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    dnsDomain: cluster.local</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    podSubnet: <span class=\"token string\">\"192.168.0.0/16\"</span> <span class=\"token comment\">#解决容器间通讯问题</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200826150028246.png\" alt=\"image-20200826150028246\" /></p>\n<ul>\n<li>查看所需镜像</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubeadm config images list --config kubeadm.yml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 输出如下：</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200826150945021.png\" alt=\"image-20200826150945021\" /></p>\n<ul>\n<li>拉取所需镜像</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubeadm config images pull --config kubeadm.yml</pre></td></tr></table></figure><ul>\n<li>安装主节点</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># --upload-certs 表示后续加入集群节点会自动分发证书文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># tee kubeadm-init.log 用来输出日志</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kubeadm init --config<span class=\"token operator\">=</span>kubeadm.yml --upload-certs <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> kubeadm-init.log</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 如果出现 timed out waiting for the condition</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 如果失败了执行重置后再确认配置是否正确后再重新初始化</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>kubeadm reset</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200826161759585.png\" alt=\"image-20200826161759585\" /></p>\n<ul>\n<li>查看集群是否安装成功</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl get node</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#输出结果：</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200826163302130.png\" alt=\"image-20200826163302130\" /></p>\n<ul>\n<li>设置常规用户</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/.kube</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"token environment constant\">$HOME</span>/.kube/config</pre></td></tr></table></figure><ul>\n<li>添加从节点</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 就是上面输出结果的最后一句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubeadm <span class=\"token function\">join</span> <span class=\"token number\">10.0</span>.2.110:6443 --token abcdef.0123456789adcdef --discovery-token-ca-cert-hash sha256:919818c94c0c157d554b9cdeccabfaca0cfc86ac22171a306e37133210256c7f</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 重新创建令牌</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kubeadm token create</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看 token</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>kubeadm token list</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 获取 cert-hash</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt <span class=\"token operator\">|</span> openssl rsa -pubin -outform der <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null <span class=\"token operator\">|</span> openssl dgst -sha256 -hex <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/^.* //'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 注意：如果 Master 的一个 token 被其他节点使用并加入集群后，之后其他节点加入时也需要使用之前的 token，而不能使用 kubeadm token create 新创建出来的 token</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200826172657121.png\" alt=\"image-20200826172657121\" /></p>\n<h4 id=\"配置集群网络\"><a class=\"anchor\" href=\"#配置集群网络\">#</a> 配置集群网络</h4>\n<ul>\n<li>以阿里的 Calico 为例</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubectl create -f https://docs.projectcalico.org/manifests/custom-resources.yaml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查看 pod 运行状态 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kubectl get pods --all-namespace</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 回撤操作 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>kubectl delete -f filename/url</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200827100046490.png\" alt=\"image-20200827100046490\" /></p>\n<h4 id=\"部署服务\"><a class=\"anchor\" href=\"#部署服务\">#</a> 部署服务</h4>\n<ul>\n<li>创建 deployment 配置文件</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 内容如下 nginx-deployment.yaml</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>apiVersion: apps/v1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kind: Deployment</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>metadata:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  name: nginx-deployment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  labels:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    app: nginx</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>spec:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\"># 创建 2 个 nginx 容器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  replicas: <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  selector:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    matchLabels:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      app: nginx</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  template:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    metadata:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      labels:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        app: nginx</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    spec:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      containers:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      - name: nginx</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        image: nginx:1.14.2</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ports:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        - containerPort: <span class=\"token number\">80</span></pre></td></tr></table></figure><ul>\n<li>通过 deployment 构建容器并启动服务</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 这里只是部署再 kubernetes 的内网，外部还是无法访问的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubectl apply -f nginx-deployment.yaml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 默认情况下不会再 master 上部署 pod</span></pre></td></tr></table></figure><ul>\n<li>查看 pods</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl get pods</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kubectl get deployment</pre></td></tr></table></figure><ul>\n<li>暴露服务</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl expose deployment nginx-deployment --port<span class=\"token operator\">=</span><span class=\"token number\">80</span> --type<span class=\"token operator\">=</span>LoadBalancer</pre></td></tr></table></figure><ul>\n<li>查看服务</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl get <span class=\"token function\">service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 10.96.0.1 和 10.103.245.150 都是 Kubernetes 内部的虚拟 ip</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 443 和 80 对应着内部的 端口号 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 32287 则是服务暴露给外界的端口号</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200827160615246.png\" alt=\"image-20200827160615246\" /></p>\n<p>​</p>\n<ul>\n<li>查看服务描述</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl describe <span class=\"token function\">service</span> nginx-deployment</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Type: LoadBalancer 负载均衡</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># IP: 10.103.245.150 内网 ip</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Port: 80 内部端口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># NodePort: 32287 节点端口</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200827161150691.png\" alt=\"image-20200827161150691\" /></p>\n<ul>\n<li>操作 docker</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 在 node 下执行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker <span class=\"token builtin class-name\">exec</span> -it container_id /bin/bash</pre></td></tr></table></figure><h4 id=\"如何停止并退出\"><a class=\"anchor\" href=\"#如何停止并退出\">#</a> 如何停止并退出</h4>\n<ul>\n<li>删除已经部署的服务</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl delete deployment nginx-deployment</pre></td></tr></table></figure><ul>\n<li>删除已经发布的服务</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kuberctl delete <span class=\"token function\">service</span> nginx-deployment</pre></td></tr></table></figure><ul>\n<li>删除集群节点</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl delete node kubernetes-node-01</pre></td></tr></table></figure><h4 id=\"查看集群状态\"><a class=\"anchor\" href=\"#查看集群状态\">#</a> 查看集群状态</h4>\n<ul>\n<li>查看 master 状态</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl cluster-info</pre></td></tr></table></figure><ul>\n<li>查看各个节点状态</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl get nodes</pre></td></tr></table></figure><ul>\n<li>查看所有 pod 状态</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl get pods --all-namespaces</pre></td></tr></table></figure><ul>\n<li>查看 pod 运行状态</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl describe pod yourPodName -n kube-system</pre></td></tr></table></figure><ul>\n<li>查看 Pod 的配置是否正确</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl get pod <span class=\"token operator\">&lt;</span>pod-name<span class=\"token operator\">></span> -o yaml</pre></td></tr></table></figure><ul>\n<li>查看 Pod 的事件</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl describe pod <span class=\"token operator\">&lt;</span>pod-name<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>查看容器日志</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kubectl logs <span class=\"token operator\">&lt;</span>pod-name<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>-c <span class=\"token operator\">&lt;</span>container-name<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"kubernetes部署心得\"><a class=\"anchor\" href=\"#kubernetes部署心得\">#</a> Kubernetes 部署心得</h2>\n<ul>\n<li>\n<p>Kubernetes 是用来管理 docker 容器的工具，可以简单的理解为 Docker（不只是 docker，其他容器管理器也都可以使用 Kubernetes）的一个高可用自动化插件。</p>\n<ul>\n<li>集群内的节点必须可以<strong>互相之间通信</strong></li>\n<li>集群内的节点需要能够<strong>访问外网</strong></li>\n<li>集群内的主节点或者其他需要向外提供服务的节点（如：gate），需要能够被<strong>外界访问</strong></li>\n</ul>\n</li>\n<li>\n<p>启动容器不需要选择其所在的节点（也不能），Kubernetes 会通过 scheduler 默认根据机器配置来帮您自动分配，所以可以在只操作 Master 的情况下，对全部机器进行部署，调控</p>\n</li>\n<li>\n<p><code>docker run</code>  运行镜像的方式现在被替换为  <code>kubectl apply -f xxx.yaml</code>  的形式，并在执行后创建一个  <code>deployment</code>  用于管理 yaml 文件中配置的 Pod，我们只需要配置 yaml 里面需要启动多少个 Pod，对应的  <code>labels</code> ，以及  <code>port</code> 。其他的事情都交给 Kubernetes。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># deployment 的 yaml 格式简单介绍</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 先申明版本、类型（deployment）、labels、name（用于 Service 的构建）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 再申明 Pod 数量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 最后申明单个 Pod 的配置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\"># 里面由几个 container</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\"># 每个 container 类型、端口、版本</span></pre></td></tr></table></figure><ul>\n<li>运行 Container。是通过 deployment（Pod 和 ReplicaSet 的管理者）来创建相应的 Pod 并运行 Container。一个 deployment 对应着一个或多个 <code>ReplicaSet</code>  实体（具体根据 yaml 配置决定），deployment 对象则是由 DeploymentController 来进行管理。</li>\n<li>ReplicaSet 用来创建和删除 Pod，被 deployment 用作间接管理 Pod 的工具</li>\n<li>Service 是一个单独的路由代理，在指定 deployment 某类  Pod  需要对外提供服务的时候，会创建一个 Service 用来进行 ip 和端口的映射关系，避免内部机器重启后 ip 变化导致无法访问。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200827174209322.png\" alt=\"image-20200827174209322\" /></p>\n<ul>\n<li>在关闭某类 Pod（真正意义上关闭）时，其所对应的 Service 还会存在，但已经实去了作用，记得要一起删了。</li>\n<li>对 Pod 、Node、Service、Deployment 都可以且只能在 Master 机器上通过 kubectl 命令行进行操作</li>\n<li>所有提供服务的 Pod 创建默认情况下是会避开 Master 节点的。</li>\n<li>对于每个 Node 节点，则可以通过 docker 指令进行单独管理，包括进入容器的 bash 界面进行响应操作，但删除添加 Container 操作会受限于 Kubernetes 的管理。需要在 Master 上通过 kubectl 进行操作。</li>\n</ul>\n<h4 id=\"部署故障回顾\"><a class=\"anchor\" href=\"#部署故障回顾\">#</a> 部署故障回顾</h4>\n<p>还有很多内容需要慢慢完善，暂时先把整个学习路线都过一遍，以后慢慢看。<br />\n部署 kubernetes 的集群时也遇到了不少问题，这里简单总结一下，其中最耗时间的就是网络那一块：</p>\n<ul>\n<li>本地的虚拟机和其他本地虚拟机无法链接，导致 master 节点上面显示的 node 节点状态一直处于 loop 状态，在启动和失败两个状态反复横跳。</li>\n<li>虚拟机无法连接互联网问题，这个也浪费了比较长的时间，导致后续很多镜像拉不下来，pod 状态一直是 ContainerCreating，后面查 describe 才发现 kubelet 链接一直是 confuse，这才想到是网络的问题，因为之前拉东西靠的都是镜像仓库。</li>\n<li>之后就是部署好了机器的服务，暴露了端口给外网，但是发现自己的 master 主机和 window 主机的 ip 不是一个网段，无法访问。要么就得从头配置 NAT 虚拟机网络，想想还是算了。</li>\n<li>还遇到的比较麻烦的问题就是 ubuntu 16.04 版本和 ubuntu18.04 版本的安装差异。一些 kubernetes 的指令做了很大程度上的调整。包括 deployment 的部署不再支持命令行，只能用 yaml 文件。</li>\n<li>机器配置必须得 2 核以上，不然安装 kubernetes 到一半的时候会失败。</li>\n<li>虚拟机的 ip 绝对不能重复，之前用的 NAT 的 dhcp 自动分配，每台机器的 ip 都是 10.0.2.15，导致后面装 阿里的 CNI（calico），三台机器只能起一个 calico，另外两个都提示 ip 冲突，导致最后 coredns 也起不来。</li>\n</ul>\n<p>总结一下就是 ip 规划一定得提前，不然网络问题后续搭起来了再来解决，那绝对是要命的。kubernetes 高可用不是开玩笑的... 有时候想关掉集群，重新调整网络再来。发现不按照正常流程还关不掉。</p>\n<p>这里还得感谢一下官方的排错文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poL2RvY3MvdGFza3MvZGVidWctYXBwbGljYXRpb24tY2x1c3Rlci9kZWJ1Zy1hcHBsaWNhdGlvbi8=\">pod 故障排查</span></p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务",
                "K8s"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/micro-service/kubernetes/Kubernetes-Introduction/",
            "url": "https://allengx.gitee.io/computer-science/study/micro-service/kubernetes/Kubernetes-Introduction/",
            "title": "Kubernetes简介",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"kubernetes简介\"><a class=\"anchor\" href=\"#kubernetes简介\">#</a> Kubernetes 简介</h2>\n<h3 id=\"什么是kubernetes\"><a class=\"anchor\" href=\"#什么是kubernetes\">#</a> 什么是 Kubernetes</h3>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824200237815.png\" alt=\"image-20200824200237815\" /></p>\n<p>k8s 是建立在容器引擎之上的可移植可扩展的<strong>容器编排系统</strong>，用于解决微服务中的高可用问题。通过使用「labels」和「pods」的概念，将逻辑单元进行分组，方便管理和发现。</p>\n<ul>\n<li>**pods：** 一组紧密关联的容器集合，他们共享 IPC（进程间通信）、Network（网络）、UTS namespace，是 Kubernetes 调度的基本单位。\n<ul>\n<li>UTS namespace—— 是 Linux 命名空间的一个子系统，主要用来完成对容器 Hostname 和 Domain 的隔离，同时保存内核名称、版本、以及底层体系结构类型等信息。</li>\n</ul>\n</li>\n<li>**labels：** 键值对标签，可以被关联到如 Pod 这样的对象上。</li>\n<li>**Image Registry：** 镜像仓库。</li>\n<li>**Kubernetes Node：**Kubernetes 集群子节点，主要由 <code>kubelet</code> 、 <code>kube-proxy</code> 、 <code>runtime</code>  三个模块构成</li>\n<li>**Kubernetes Master：**Kubernetes 集群的主节点，主要由 <code>kube-apiserver</code> 、 <code>kube-scheduler</code> 、 <code>kube-controller-manager</code> 、 <code>etcd</code>  四个模块组成</li>\n</ul>\n<p>使用 Kubernetes 可以：</p>\n<ul>\n<li>快速部署应用</li>\n<li>快速扩展应用</li>\n<li>无缝对接新的应用功能</li>\n<li>节省资源，优化硬件资源的使用</li>\n</ul>\n<h4 id=\"kubernetes架构\"><a class=\"anchor\" href=\"#kubernetes架构\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qaW1teXNvbmcuaW8va3ViZXJuZXRlcy1oYW5kYm9vay9jb25jZXB0cy8=\">Kubernetes 架构</span></h4>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824195734072.png\" alt=\"image-20200824195734072\" /></p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824200024485.png\" alt=\"image-20200824200024485\" /></p>\n<h5 id=\"kubernetes-node\"><a class=\"anchor\" href=\"#kubernetes-node\">#</a> Kubernetes Node</h5>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824200353285.png\" alt=\"image-20200824200353285\" /></p>\n<h5 id=\"kubernetes-master\"><a class=\"anchor\" href=\"#kubernetes-master\">#</a> Kubernetes Master</h5>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824200328253.png\" alt=\"image-20200824200328253\" /></p>\n<h4 id=\"kubernetes组件\"><a class=\"anchor\" href=\"#kubernetes组件\">#</a> Kubernetes 组件</h4>\n<ul>\n<li>\n<p><strong>etcd：</strong> 保存了整个集群的状态，实现了服务注册与发现功能。</p>\n</li>\n<li>\n<p><strong>pod：</strong> 运行一组容器，实现不同机器的容器间通讯。</p>\n</li>\n<li>\n<p><strong>apiserver：</strong> 提供了资源操作唯一入口，并提供认证、授权、访问控制、API 注册和发现等机制。</p>\n</li>\n<li>\n<p><strong>controller-manager：</strong> 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等。Container 运行在 Pod 上，Pod 运行在 Controller 上。</p>\n</li>\n<li>\n<p><strong>scheduler：</strong> 负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上。</p>\n</li>\n<li>\n<p><strong>proxy：</strong> 负责为 Service 提供 cluster 内部的服务发现和负载均衡。</p>\n</li>\n<li>\n<p><strong>pause：</strong> 控制容器的停止与启动。</p>\n</li>\n<li>\n<p><strong>coredns：</strong> 域名解析服务器，提供跨网段的通讯。</p>\n</li>\n<li>\n<p><strong>runtime：</strong> 负责镜像管理以及 Pod 和容器的真正运行（CRI，Container Runtime Interface），默认的容器运行时为 Docker。</p>\n</li>\n</ul>\n<h4 id=\"安装kubernetes的三个必备工具\"><a class=\"anchor\" href=\"#安装kubernetes的三个必备工具\">#</a> 安装 Kubernetes 的三个必备工具</h4>\n<ul>\n<li><strong>kubeadm：</strong> Kubernetes 的集群安装工具。</li>\n<li><strong>kubelet：</strong> 负责维护容器的生命周期，同时也负责 Vloume（CVI，Container Vloume Interface）和网络（CNI，Container Network Interface）的管理。</li>\n<li><strong>kubectl：</strong> 用于管理 Kubernetes 集群的命令行工具。</li>\n</ul>\n<h3 id=\"kubernetes特点\"><a class=\"anchor\" href=\"#kubernetes特点\">#</a> Kubernetes 特点：</h3>\n<ul>\n<li>\n<p><strong>可移植性：</strong> 支持公有云、私有云、混合云、多重云</p>\n</li>\n<li>\n<p><strong>可扩展性：</strong> 模块化、插件化、可挂载、可组合</p>\n</li>\n<li>\n<p><strong>自动化：</strong> 自动化部署、自动重启、自动复制、自动伸缩 / 扩展</p>\n</li>\n</ul>\n<h3 id=\"解决高可用问题\"><a class=\"anchor\" href=\"#解决高可用问题\">#</a> 解决高可用问题</h3>\n<ul>\n<li>单点故障问题：检测服务故障，重启并恢复。</li>\n<li>流量过载问题：支持自动扩、缩容。</li>\n<li>服务器更新维护：滚动更新，金丝雀发布，回滚版本。</li>\n</ul>\n<h3 id=\"kubernetes提供的功能\"><a class=\"anchor\" href=\"#kubernetes提供的功能\">#</a> Kubernetes 提供的功能</h3>\n<ul>\n<li>多个进程协调工作</li>\n<li>存储系统挂载</li>\n<li>应用健康检查</li>\n<li>应用实例复制自动伸缩 / 扩展</li>\n<li>注册与发现</li>\n<li>负载均衡</li>\n<li>滚动更新</li>\n<li>资源监控</li>\n<li>日志访问</li>\n<li>调试应用程序</li>\n<li>提供认证和授权</li>\n</ul>\n<h3 id=\"kubernetes网络\"><a class=\"anchor\" href=\"#kubernetes网络\">#</a> Kubernetes 网络</h3>\n<h4 id=\"kubernetes中常见的容器网络解决方案cni\"><a class=\"anchor\" href=\"#kubernetes中常见的容器网络解决方案cni\">#</a> Kubernetes 中常见的容器网络解决方案 CNI</h4>\n<p>CNI 提供 Pod 与 Pod 间的通讯的标准，常见的 CNI 插件如下：</p>\n<ul>\n<li>Flannel</li>\n<li>Calico</li>\n<li>Canal</li>\n<li>Weave</li>\n</ul>\n<h5 id=\"flannel\"><a class=\"anchor\" href=\"#flannel\">#</a> Flannel</h5>\n<h6 id=\"flannel网络架构\"><a class=\"anchor\" href=\"#flannel网络架构\">#</a> Flannel 网络架构</h6>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200824175207079.png\" alt=\"image-20200824175207079\" /></p>\n<h3 id=\"kubernetes常见指令\"><a class=\"anchor\" href=\"#kubernetes常见指令\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvcmVmZXJlbmNlL2dlbmVyYXRlZC9rdWJlY3RsL2t1YmVjdGwtY29tbWFuZHM=\">Kubernetes 常见指令：</span></h3>\n<h3 id=\"kubernetes-ingressapi网关简介\"><a class=\"anchor\" href=\"#kubernetes-ingressapi网关简介\">#</a> Kubernetes Ingress（API 网关）简介</h3>\n<p>Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。</p>\n<p>Ingress 可以提供负载均衡、SSL 终结和基于名称的虚拟托管。</p>\n<h4 id=\"ingress是什么\"><a class=\"anchor\" href=\"#ingress是什么\">#</a> Ingress 是什么</h4>\n<p>Ingress 公开了从集群外部到集群内服务的 HTTP 和 HTTPS 路由。 流量路由由 Ingress 资源上定义的规则控制。</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200825100908440.png\" alt=\"image-20200825100908440\" /></p>\n<h4 id=\"术语\"><a class=\"anchor\" href=\"#术语\">#</a> 术语</h4>\n<ul>\n<li><strong>节点：</strong> Kubernetes 集群中的服务器</li>\n<li><strong>集群：</strong> Kubernetes 管理的一组服务器集合</li>\n<li><strong>边界路由器：</strong> 为局域网和 Internet 路由数据包的路由器，执行防火墙保护局域网络</li>\n<li><strong>集群网络：</strong> 遵循 Kubernetes 网络模型实现集群内的通信的具体实现，如：Flannel</li>\n<li><strong>服务：</strong> Kubernetes 的服务（Service）是使用标签选择器标识的一组 Pod Service（Depolyment）。<strong>除非另有说明，否则服务的虚拟 IP 仅可在集群内部访问</strong></li>\n</ul>\n<p>待学习...</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200825102307848.png\" alt=\"image-20200825102307848\" /></p>\n<h3 id=\"kubernetes-volume\"><a class=\"anchor\" href=\"#kubernetes-volume\">#</a> Kubernetes Volume</h3>\n<p>在 Kubernetes 集群中，虽然无状态的服务非常常见，但是在实际的生产中仍然会需要在集群中部署一些有状态的节点，比如一些存储中间件、消息队列等等。</p>\n<p>作为 Kubernetes 集群中除了 Pod 和 Service 之外最常见的基本对象，Volume 不仅能够解决 Container 中文件的临时性问题，也能够让同一个 Pod 中的多个 Container 共享文件。</p>\n<p>集群中的每一个卷在被 Pod 使用时都会经历四个操作:</p>\n<ul>\n<li>附着（Attach）</li>\n<li>挂载（Mount）</li>\n<li>卸载（Unmount）</li>\n<li>分离（Detach）</li>\n</ul>\n<h4 id=\"volume-是什么\"><a class=\"anchor\" href=\"#volume-是什么\">#</a> Volume 是什么</h4>\n<h5 id=\"volume临时卷\"><a class=\"anchor\" href=\"#volume临时卷\">#</a> Volume（临时卷）</h5>\n<p>在这一节中提到的卷（Volume）其实是一个比较特定的概念，它并不是一个持久化存储，可能会随着 Pod 的删除而删除，常见的卷就包括 <strong>EmptyDir</strong>、<strong>HostPath</strong>、<strong>ConfigMap</strong> 和 <strong>Secret</strong>，这些卷与所属的 Pod 具有相同的生命周期。</p>\n<h5 id=\"persistentvolume持久卷\"><a class=\"anchor\" href=\"#persistentvolume持久卷\">#</a> PersistentVolume（持久卷）</h5>\n<p>临时的卷没有办法解决数据持久存储的问题，想要让数据能够持久化，首先就需要将 Pod 和卷的声明周期分离，这也就是引入持久卷  <code>PersistentVolume(PV)</code>  的原因。我们可以将  <code>PersistentVolume</code>  理解为集群中资源的一种，它与集群中的节点 Node 有些相似，PV 为 Kubernete 集群提供了一个如何提供并且使用存储的抽象，与它一起被引入的另一个对象就是  <code>PersistentVolumeClaim(PVC)</code> —— 持久卷消费者，这两个对象之间的关系与节点和 Pod 之间的关系差不多：</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200825104127977.png\" alt=\"image-20200825104127977\" /></p>\n<p><code>PersistentVolume</code>  是集群中的一种被管理员分配的存储资源，而  <code>PersistentVolumeClaim</code>  表示用户对存储资源的申请，它与 Pod 非常相似，PVC 消耗了持久卷资源，而 Pod 消耗了节点上的 CPU 和内存等物理资源。</p>\n<p>因为 PVC 允许用户消耗抽象的存储资源，所以用户需要不同类型、属性和性能的 PV 就是一个比较常见的需求了，在这时我们可以通过  <code>StorageClass</code>  来提供不同种类的 PV 资源，上层用户就可以直接使用系统管理员提供好的存储类型。</p>\n<h5 id=\"pvpvc生命周期\"><a class=\"anchor\" href=\"#pvpvc生命周期\">#</a> PV/PVC 生命周期</h5>\n<p>PV 是群集中的资源。PVC 是对这些资源的请求，并且还充当对资源的检查。PV 和 PVC 之间的相互作用遵循以下生命周期：</p>\n<blockquote>\n<p>Provisioning -&gt; Binding -&gt; Using -&gt; Releasing -&gt; Recycling</p>\n</blockquote>\n<ul>\n<li><strong>供应准备（Provisioning）</strong> —— 通过集群外的存储系统或者云平台来提供存储持久化支持。\n<ul>\n<li>静态提供 Static：集群管理员创建多个 PV。 它们携带可供集群用户使用的真实存储的详细信息。 它们存在于 Kubernetes API 中，可用于消费</li>\n<li>动态提供 Dynamic：当管理员创建的静态 PV 都不匹配用户的 PersistentVolumeClaim 时，集群可能会尝试为 PVC 动态配置卷。 此配置基于 StorageClasses：PVC 必须请求一个类，并且管理员必须已创建并配置该类才能进行动态配置。 要求该类的声明有效地为自己禁用动态配置。</li>\n</ul>\n</li>\n<li><strong>绑定（Binding）</strong> --- 用户创建 pvc 并指定需要的资源和访问模式。在找到可用 pv 之前，pvc 会保持未绑定状态。</li>\n<li><strong>使用（Using）</strong> --- 用户可在 pod 中像 volume 一样使用 pvc。</li>\n<li><strong>释放（Releasing）</strong> --- 用户删除 pvc 来回收存储资源，pv 将变成 “released” 状态。由于还保留着之前的数据，这些数据需要根据不同的策略来处理，否则这些存储资源无法被其他 pvc 使用。</li>\n<li><strong>回收（Recycling）</strong> ——pv 可以设置三种回收策略：保留（Retain），回收（Recycle）和删除（Delete）。\n<ul>\n<li>\n<p>Retain（保留）：允许人工处理保留的数据。</p>\n</li>\n<li>\n<p>Delete（删除）：将删除 pv 和外部关联的存储资源，需要插件支持。</p>\n</li>\n<li>\n<p>Recycle（回收）：将执行清除操作，之后可以被新的 pvc 使用，需要插件支持（ <code>rm -rf</code> ）</p>\n<pre><code>第一种回收策略就是保留（Retain）PV 中的数据，如果希望 PV 能够被重新使用，系统管理员需要删除被使用的`PersistentVolume` 对象并手动清除存储和相关存储上的数据。\n\n另一种常见的回收策略就是删除（Delete），当 PVC 被使用者删除之后，如果当前卷支持删除的回收策略，那么 PV 和相关的存储会被自动删除，如果当前 PV 上的数据确实不再需要，那么将回收策略设置成 Delete 能够节省手动处理的时间并快速释放无用的资源。\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"访问模式\"><a class=\"anchor\" href=\"#访问模式\">#</a> 访问模式</h5>\n<p>Kubernetes 中的 PV 提供三种不同的访问模式，分别是  <code>ReadWriteOnce</code> 、 <code>ReadOnlyMany</code>  和  <code>ReadWriteMany</code> ，这三种模式的含义和用法我们可以通过它们的名字推测出来：</p>\n<ul>\n<li><code>ReadWriteOnce</code>  表示当前卷可以被一个节点使用读写模式挂载；</li>\n<li><code>ReadOnlyMany</code>  表示当前卷可以被多个节点使用只读模式挂载；</li>\n<li><code>ReadWriteMany</code>  表示当前卷可以被多个节点使用读写模式挂载；</li>\n</ul>\n<blockquote>\n<p>通常采用的持久化方案：<strong>NFS + PV/PVC</strong> 的网络存储方案来进行数据持久化。</p>\n</blockquote>\n<h4 id=\"nfs是什么\"><a class=\"anchor\" href=\"#nfs是什么\">#</a> NFS 是什么</h4>\n<p>NFS 是网络文件系统 Network File System 的缩写，NFS 服务器可以让 PC 将网络中的 NFS 服务器共享的目录挂载到本地的文件系统中，而在本地的系统中来看，那个远程主机的目录就好像是自己的一个磁盘分区一样。</p>\n<h5 id=\"nfs原理\"><a class=\"anchor\" href=\"#nfs原理\">#</a> NFS 原理</h5>\n<p>NFS 使用 RPC (Remote Procedure Call) 的机制进行实现，RPC 使得客户端可以调用服务端的函数。同时，由于有 VFS 的存在，客户端可以像使用其它普通文件系统一样使用 NFS 文件系统。经由操作系统的内核，将 NFS 文件系统的调用请求通过 TCP/IP 发送至服务端的 NFS 服务。NFS 服务器执行相关的操作，并将操作结果返回给客户端。</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200825110217189.png\" alt=\"image-20200825110217189\" /></p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200825120655819.png\" alt=\"image-20200825120655819\" /></p>\n<h3 id=\"kubernetes-configmap\"><a class=\"anchor\" href=\"#kubernetes-configmap\">#</a> Kubernetes ConfigMap</h3>\n<p>pass</p>\n<h3 id=\"kubernetes-dashboard\"><a class=\"anchor\" href=\"#kubernetes-dashboard\">#</a> Kubernetes Dashboard</h3>\n<p>pass</p>\n<h3 id=\"kubernetes-security\"><a class=\"anchor\" href=\"#kubernetes-security\">#</a> Kubernetes Security</h3>\n<p>pass</p>\n<h4 id=\"rbac用户角色授权\"><a class=\"anchor\" href=\"#rbac用户角色授权\">#</a> RBAC 用户角色授权</h4>\n<p>pass</p>\n<h4 id=\"serviceaccount\"><a class=\"anchor\" href=\"#serviceaccount\">#</a> ServiceAccount</h4>\n<p>pass</p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务",
                "K8s"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/opengl/2-OpenGL-Load-Model/",
            "url": "https://allengx.gitee.io/computer-science/study/opengl/2-OpenGL-Load-Model/",
            "title": "三、OpenGL模型加载",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"模型加载\"><a class=\"anchor\" href=\"#模型加载\">#</a> 模型加载</h1>\n<h2 id=\"assimp\"><a class=\"anchor\" href=\"#assimp\">#</a> Assimp</h2>\n<p>到目前为止的所有场景中，我们一直都在滥用我们的箱子朋友，但时间久了甚至是我们最好的朋友也会感到无聊。在日常的图形程序中，通常都会使用非常复杂且好玩的模型，它们比静态的箱子要好看多了。然而，和箱子对象不同，我们不太能够对像是房子、汽车或者人形角色这样的复杂形状手工定义所有的顶点、法线和纹理坐标。我们想要的是将这些模型 (Model) 导入 (Import) 到程序当中。模型通常都由 3D 艺术家在<mark> Blender</mark>、<mark>3DS Max</mark> 或者<mark> Maya</mark> 这样的工具中精心制作。</p>\n<p>这些所谓的<mark> 3D 建模工具</mark> (3D Modeling Tool) 可以让艺术家创建复杂的形状，并使用一种叫做<mark> UV 映射</mark> (uv-mapping) 的手段来应用贴图。这些工具将会在导出到模型文件的时候<mark>自动生成所有的顶点坐标</mark>、<mark>顶点法线</mark>以及<mark>纹理坐标</mark>。这样子艺术家们即使不了解图形技术细节的情况下，也能拥有一套强大的工具来构建高品质的模型了。所有的技术细节都隐藏在了导出的模型文件中。但是，作为图形开发者，我们就必须要了解这些技术细节了。</p>\n<p>所以，我们的工作就是解析这些导出的模型文件以及提取所有有用的信息，将它们储存为 OpenGL 能够理解的格式。一个很常见的问题是，模型的文件格式有很多种，每一种都会以它们自己的方式来导出模型数据。像是 Wavefront 的.obj 这样的模型格式，只包含了<mark>模型数据</mark>以及<mark>材质信息</mark>，像是模型颜色和漫反射 / 镜面光贴图。而以 XML 为基础的 Collada 文件格式则非常的丰富，包含模型、光照、多种材质、动画数据、摄像机、完整的场景信息等等。Wavefront 的.obj 格式通常被认为是一个易于解析的模型格式。建议至少去 Wavefront 的 wiki 页面上看看文件格式的信息是如何封装的。这应该能让你认识到模型文件的基本结构。</p>\n<p>总而言之，不同种类的文件格式有很多，它们之间通常并没有一个通用的结构。所以如果我们想从这些文件格式中导入模型的话，我们必须要去自己对每一种需要导入的文件格式写一个导入器。很幸运的是，正好有一个库专门处理这个问题。</p>\n<h3 id=\"模型加载库\"><a class=\"anchor\" href=\"#模型加载库\">#</a> 模型加载库</h3>\n<p>一个非常流行的模型导入库是<mark> Assimp</mark>，它是 Open Asset Import Library（开放的资产导入库）的缩写。Assimp 能够导入很多种不同的模型文件格式（并也能够导出部分的格式），它会将所有的模型数据加载至 Assimp 的通用数据结构中。当 Assimp 加载完模型之后，我们就能够从 Assimp 的数据结构中提取我们所需的所有数据了。由于 Assimp 的数据结构保持不变，不论导入的是什么种类的文件格式，它都能够将我们从这些不同的文件格式中抽象出来，用同一种方式访问我们需要的数据。</p>\n<p>当使用 Assimp 导入一个模型的时候，它通常会将整个模型加载进一个<mark>场景</mark> (Scene) 对象，它会包含导入的模型 / 场景中的所有数据。Assimp 会将场景载入为一系列的节点 (Node)，每个节点包含了场景对象中所储存数据的索引，每个节点都可以有任意数量的子节点。Assimp 数据结构的（简化）模型如下：</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/03/01/assimp_structure.png\" alt=\"image\" /></p>\n<ul>\n<li>和材质和<mark>网格</mark> (Mesh) 一样，所有的场景 / 模型数据都包含在 Scene 对象中。Scene 对象也包含了场景根节点的引用。</li>\n<li>场景的 Root node（根节点）可能包含子节点（和其它的节点一样），它会有一系列指向场景对象中 mMeshes 数组中储存的网格数据的索引。Scene 下的 mMeshes 数组储存了真正的 Mesh 对象，节点中的 mMeshes 数组保存的只是场景中网格数组的索引。</li>\n<li><mark>一个 Mesh 对象本身包含了渲染所需要的所有相关数据</mark>，像是顶点位置、法向量、纹理坐标、面 (Face) 和物体的材质。</li>\n<li>一个网格包含了多个面。<mark>Face 代表的是物体的渲染图元</mark> (Primitive)（三角形、方形、点）。一个面包含了组成图元的顶点的索引。由于顶点和索引是分开的，使用一个索引缓冲来渲染是非常简单的（见你好，三角形）。</li>\n<li>最后，一个网格也包含了一个<mark> Material</mark> 对象，它包含了一些函数能让我们获取物体的材质属性，比如说颜色和纹理贴图（比如漫反射和镜面光贴图）。</li>\n</ul>\n<p>所以，我们需要做的第一件事是将一个物体加载到 Scene 对象中，遍历节点，获取对应的 Mesh 对象（我们需要递归搜索每个节点的子节点），并处理每个 Mesh 对象来获取顶点数据、索引以及它的材质属性。最终的结果是一系列的网格数据，我们会将它们包含在一个 Model 对象中。</p>\n<blockquote>\n<p>网格<br />\n当使用建模工具对物体建模的时候，艺术家通常不会用单个形状创建出整个模型。通常每个模型都由几个子模型 / 形状组合而成。组合模型的每个单独的形状就叫做一个网格 (Mesh)。比如说有一个人形的角色：艺术家通常会将头部、四肢、衣服、武器建模为分开的组件，并将这些网格组合而成的结果表现为最终的模型。<mark>一个网格是我们在 OpenGL 中绘制物体所需的最小单位</mark>（顶点数据、索引和材质属性）。一个模型（通常）会包括多个网格。</p>\n</blockquote>\n<p>在下一节中，我们将创建我们自己的 Model 和 Mesh 类来加载并使用刚刚介绍的结构储存导入后的模型。如果我们想要绘制一个模型，我们不需要将<mark>整个</mark>模型渲染为一个整体，只需要渲染组成模型的每个独立的网格就可以了。然而，在我们开始导入模型之前，我们首先需要将 Assimp 包含到我们的工程当中。</p>\n<h3 id=\"构建assimp\"><a class=\"anchor\" href=\"#构建assimp\">#</a> 构建 Assimp</h3>\n<p>你可以在 Assimp 的<span class=\"exturl\" data-url=\"aHR0cDovL2Fzc2ltcC5zb3VyY2Vmb3JnZS5uZXQvbWFpbl9kb3dubG9hZHMuaHRtbA==\">下载页面</span>中选择相应的版本。在写作时使用的 Assimp 最高版本为 3.1.1。我们建议你自己编译 Assimp 库，因为它们的预编译库在大部分系统上都是不能运行的。如果你忘记如何使用 CMake 自己编译一个库的话，可以复习创建窗口小节。</p>\n<p>构建 Assimp 时可能会出现一些问题，所以我会将它们的解决方案列在这里，便于大家排除错误：</p>\n<ul>\n<li>CMake 在读取配置列表时，不断报出 DirectX 库丢失的错误。报错如下：</li>\n</ul>\n<blockquote>\n<p>Could not locate DirectX<br />\nCMake Error at cmake-modules/FindPkgMacros.cmake:110 (message):<br />\nRequired library DirectX not found! Install the library (including dev packages)<br />\nand try again. If the library is already installed, set the missing variables<br />\nmanually in cmake.</p>\n</blockquote>\n<p>这个问题的解决方案是安装 DirectX SDK，如果你之前没安装过的话。你可以从<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9kb3dubG9hZC9kZXRhaWxzLmFzcHg/aWQ9NjgxMg==\">这里下载 SDK</span>。</p>\n<ul>\n<li>安装 DirectX SDK 时，可能遇到一个错误码为 s1023 的错误。这种情况下，请在安装 SDK 之前根据这个先卸载 C++ Redistributable package (s)。</li>\n<li>一旦配置完成，你就可以生成解决方案文件了，打开解决方案文件并编译 Assimp 库（可以编译为 Debug 版本也可以编译为 Release 版本，只要能工作就行）。</li>\n<li>使用默认配置构建的 Assimp 是一个动态库 (Dynamic Library)，所以我们需要包含所生成的 assimp.dll 文件以及程序的二进制文件。你可以简单地将 DLL 复制到我们程序可执行文件的同一目录中。</li>\n<li>Assimp 编译之后，生成的库和 DLL 文件位于 code/Debug 或者 code/Release 文件夹中。</li>\n<li>接着把编译好的 LIB 文件和 DLL 文件拷贝到工程的相应目录下，并在解决方案中链接它们。并且记得把 Assimp 的头文件也复制到你的 include 目录中（头文件可以在从 Assimp 中下载的 include 目录里找到）。</li>\n</ul>\n<blockquote>\n<p>如果你想让 Assimp 使用多线程来获得更高的性能，你可以使用 Boost 库来编译 Assimp。你可以在它们的安装页面找到完整的安装介绍。</p>\n</blockquote>\n<h2 id=\"网格\"><a class=\"anchor\" href=\"#网格\">#</a> 网格</h2>\n<p>通过使用 Assimp，我们可以加载不同的模型到程序中，但是载入后它们都被储存为<mark> Assimp 的数据结构</mark>。我们最终仍要将这些数据转换为 OpenGL 能够理解的格式，这样才能渲染这个物体。我们从上一节中学到，网格 (Mesh) 代表的是单个的可绘制实体，我们现在先来定义一个我们自己的网格类。</p>\n<p>首先我们来回顾一下我们目前学到的知识，想想一个网格最少需要什么数据。一个网格应该至少需要一系列的顶点，每个顶点包含一个位置向量、一个法向量和一个纹理坐标向量。一个网格还应该包含用于索引绘制的索引以及纹理形式的材质数据（漫反射 / 镜面光贴图）。</p>\n<p>既然我们有了一个网格类的最低需求，我们可以在 OpenGL 中定义一个顶点了：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Vertex</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    glm<span class=\"token operator\">::</span>vec3 Position<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    glm<span class=\"token operator\">::</span>vec3 Normal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    glm<span class=\"token operator\">::</span>vec2 TexCoords<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们将所有需要的向量储存到一个叫做 Vertex 的结构体中，我们可以用它来索引每个顶点属性。除了 Vertex 结构体之外，我们还需要将纹理数据整理到一个 Texture 结构体中。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Texture</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    string type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们储存了纹理的 id 以及它的类型，比如是漫反射贴图或者是镜面光贴图。</p>\n<p>知道了顶点和纹理的实现，我们可以开始定义网格类的结构了：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mesh</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/*  网格数据  */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>Vertex<span class=\"token operator\">></span> vertices<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> indices<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> textures<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">/*  函数  */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">Mesh</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Vertex<span class=\"token operator\">></span> vertices<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> indices<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> textures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span>Shader shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/*  渲染数据  */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> VAO<span class=\"token punctuation\">,</span> VBO<span class=\"token punctuation\">,</span> EBO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/*  函数  */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">setupMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>你可以看到这个类并不复杂。在构造器中，我们将所有必须的数据赋予了网格，我们在 setupMesh 函数中初始化缓冲，并最终使用 Draw 函数来绘制网格。注意我们将一个着色器传入了 Draw 函数中，将着色器传入网格类中可以让我们在绘制之前设置一些 uniform（像是链接采样器到纹理单元）。</p>\n<p>构造器的内容非常易于理解。我们只需要使用构造器的参数设置类的公有变量就可以了。我们在构造器中还调用了 setupMesh 函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Mesh</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Vertex<span class=\"token operator\">></span> vertices<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> indices<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> textures<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>vertices <span class=\"token operator\">=</span> vertices<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>indices <span class=\"token operator\">=</span> indices<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>textures <span class=\"token operator\">=</span> textures<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">setupMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里没什么可说的。我们接下来讨论 setupMesh 函数。</p>\n<h3 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<p>由于有了构造器，我们现在有一大列的网格数据用于渲染。在此之前我们还必须配置正确的缓冲，并通过顶点属性指针定义顶点着色器的布局。现在你应该对这些概念都很熟悉了，但我们这次会稍微有一点变动，使用结构体中的顶点数据：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setupMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">glGenVertexArrays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>VAO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">glGenBuffers</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>VBO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">glGenBuffers</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>EBO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">glBindVertexArray</span><span class=\"token punctuation\">(</span>VAO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">glBindBuffer</span><span class=\"token punctuation\">(</span>GL_ARRAY_BUFFER<span class=\"token punctuation\">,</span> VBO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">glBufferData</span><span class=\"token punctuation\">(</span>GL_ARRAY_BUFFER<span class=\"token punctuation\">,</span> vertices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>vertices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> GL_STATIC_DRAW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">glBindBuffer</span><span class=\"token punctuation\">(</span>GL_ELEMENT_ARRAY_BUFFER<span class=\"token punctuation\">,</span> EBO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">glBufferData</span><span class=\"token punctuation\">(</span>GL_ELEMENT_ARRAY_BUFFER<span class=\"token punctuation\">,</span> indices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                 <span class=\"token operator\">&amp;</span>indices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> GL_STATIC_DRAW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 顶点位置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">glEnableVertexAttribArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">glVertexAttribPointer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> GL_FLOAT<span class=\"token punctuation\">,</span> GL_FALSE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 顶点法线</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">glEnableVertexAttribArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">glVertexAttribPointer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> GL_FLOAT<span class=\"token punctuation\">,</span> GL_FALSE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">offsetof</span><span class=\"token punctuation\">(</span>Vertex<span class=\"token punctuation\">,</span> Normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 顶点纹理坐标</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">glEnableVertexAttribArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">glVertexAttribPointer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> GL_FLOAT<span class=\"token punctuation\">,</span> GL_FALSE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">offsetof</span><span class=\"token punctuation\">(</span>Vertex<span class=\"token punctuation\">,</span> TexCoords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">glBindVertexArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>代码应该和你所想得没什么不同，但有了 Vertex 结构体的帮助，我们使用了一些小技巧。</p>\n<p>C++ 结构体有一个很棒的特性，它们的内存布局是连续的 (Sequential)。也就是说，如果我们将结构体作为一个数据数组使用，那么它将会以顺序排列结构体的变量，这将会直接转换为我们在数组缓冲中所需要的 float（实际上是字节）数组。比如说，如果我们有一个填充后的 Vertex 结构体，那么它的内存布局将会等于：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vertex vertex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vertex<span class=\"token punctuation\">.</span>Position  <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.6f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vertex<span class=\"token punctuation\">.</span>Normal    <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vertex<span class=\"token punctuation\">.</span>TexCoords <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// = [0.2f, 0.4f, 0.6f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f];</span></pre></td></tr></table></figure><p>由于有了这个有用的特性，我们能够直接传入一大列的 Vertex 结构体的指针作为缓冲的数据，它们将会完美地转换为 glBufferData 所能用的参数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">glBufferData</span><span class=\"token punctuation\">(</span>GL_ARRAY_BUFFER<span class=\"token punctuation\">,</span> vertices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>vertices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> GL_STATIC_DRAW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>自然 sizeof 运算也可以用在结构体上来计算它的字节大小。这个应该是 32 字节的（8 个 float * 每个 4 字节）。</p>\n<p>结构体的另外一个很好的用途是它的预处理指令 offsetof (s, m)，它的第一个参数是一个结构体，第二个参数是这个结构体中变量的名字。这个宏会返回那个变量距结构体头部的字节偏移量 (Byte Offset)。这正好可以用在定义 glVertexAttribPointer 函数中的偏移参数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">glVertexAttribPointer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> GL_FLOAT<span class=\"token punctuation\">,</span> GL_FALSE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">offsetof</span><span class=\"token punctuation\">(</span>Vertex<span class=\"token punctuation\">,</span> Normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>偏移量现在是使用<mark> offsetof</mark> 来定义了，在这里它会将法向量的字节偏移量设置为结构体中法向量的偏移量，也就是 3 个 float，即 12 字节。注意，我们同样将步长参数设置为了 Vertex 结构体的大小。</p>\n<p>使用这样的一个结构体不仅能够提供可读性更高的代码，也允许我们很容易地拓展这个结构。如果我们希望添加另一个顶点属性，我们只需要将它添加到结构体中就可以了。由于它的灵活性，渲染的代码不会被破坏。</p>\n<h3 id=\"渲染\"><a class=\"anchor\" href=\"#渲染\">#</a> 渲染</h3>\n<p>我们需要为 Mesh 类定义最后一个函数，它的 Draw 函数。在真正渲染这个网格之前，我们需要在调用 glDrawElements 函数之前先绑定相应的纹理。然而，这实际上有些困难，我们一开始并不知道这个网格（如果有的话）有多少纹理、纹理是什么类型的。所以我们该如何在着色器中设置纹理单元和采样器呢？</p>\n<p>为了解决这个问题，我们需要设定一个命名标准：每个漫反射纹理被命名为<mark> texture_diffuseN</mark>，每个镜面光纹理应该被命名为<mark> texture_specularN</mark>，其中 N 的范围是 1 到纹理采样器最大允许的数字。比如说我们对某一个网格有 3 个漫反射纹理，2 个镜面光纹理，它们的纹理采样器应该之后会被调用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>uniform sampler2D texture_diffuse1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>uniform sampler2D texture_diffuse2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>uniform sampler2D texture_diffuse3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>uniform sampler2D texture_specular1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>uniform sampler2D texture_specular2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>根据这个标准，我们可以在着色器中定义任意需要数量的纹理采样器，如果一个网格真的包含了（这么多）纹理，我们也能知道它们的名字是什么。根据这个标准，我们也能在一个网格中处理任意数量的纹理，开发者也可以自由选择需要使用的数量，他只需要定义正确的采样器就可以了（虽然定义少的话会有点浪费绑定和 uniform 调用）。</p>\n<blockquote>\n<p>像这样的问题有很多种不同的解决方案。如果你不喜欢这个解决方案，你可以自己想一个你自己的解决办法。</p>\n</blockquote>\n<p>最终的渲染代码是这样的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span>Shader shader<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> diffuseNr <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> specularNr <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> textures<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">glActiveTexture</span><span class=\"token punctuation\">(</span>GL_TEXTURE0 <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在绑定之前激活相应的纹理单元</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取纹理序号（diffuse_textureN 中的 N）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        string number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        string name <span class=\"token operator\">=</span> textures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"texture_diffuse\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            number <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>diffuseNr<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"texture_specular\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            number <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>specularNr<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        shader<span class=\"token punctuation\">.</span><span class=\"token function\">setFloat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"material.\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">glBindTexture</span><span class=\"token punctuation\">(</span>GL_TEXTURE_2D<span class=\"token punctuation\">,</span> textures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">glActiveTexture</span><span class=\"token punctuation\">(</span>GL_TEXTURE0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 绘制网格</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">glBindVertexArray</span><span class=\"token punctuation\">(</span>VAO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">glDrawElements</span><span class=\"token punctuation\">(</span>GL_TRIANGLES<span class=\"token punctuation\">,</span> indices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> GL_UNSIGNED_INT<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">glBindVertexArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们首先计算了每个纹理类型的 N - 分量，并将其拼接到纹理类型字符串上，来获取对应的 uniform 名称。接下来我们查找对应的采样器，将它的位置值设置为当前激活的纹理单元，并绑定纹理。这也是我们在 Draw 函数中需要着色器的原因。我们也将 &quot;material.&quot; 添加到了最终的 uniform 名称中，因为我们希望将纹理储存在一个材质结构体中（这在每个实现中可能都不同）。</p>\n<blockquote>\n<p>注意我们在将漫反射计数器和镜面光计数器插入 stringstream 时，对它们进行了递增。在 C<ins> 中，这个递增操作：variable</ins> 将会返回变量本身，之后再递增，而 ++variable 则是先递增，再返回值。在我们的例子中是首先将原本的计数器值插入 stringstream，之后再递增它，供下一次循环使用。</p>\n</blockquote>\n<h2 id=\"模型\"><a class=\"anchor\" href=\"#模型\">#</a> 模型</h2>\n<p>现在是时候接触 Assimp 并创建实际的加载和转换代码了。这个教程的目标是创建另一个类来完整地表示一个模型，或者说是包含多个网格，甚至是多个物体的模型。一个包含木制阳台、塔楼、甚至游泳池的房子可能仍会被加载为一个模型。我们会使用 Assimp 来加载模型，并将它转换 (Translate) 至多个在上一节中创建的 Mesh 对象。</p>\n<p>事不宜迟，我会先把 Model 类的结构给你：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Model</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*  函数   */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">Model</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">loadModel</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span>Shader shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/*  模型数据  */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>Mesh<span class=\"token operator\">></span> meshes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        string directory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">/*  函数   */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">loadModel</span><span class=\"token punctuation\">(</span>string path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">processNode</span><span class=\"token punctuation\">(</span>aiNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> aiScene <span class=\"token operator\">*</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Mesh <span class=\"token function\">processMesh</span><span class=\"token punctuation\">(</span>aiMesh <span class=\"token operator\">*</span>mesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> aiScene <span class=\"token operator\">*</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> <span class=\"token function\">loadMaterialTextures</span><span class=\"token punctuation\">(</span>aiMaterial <span class=\"token operator\">*</span>mat<span class=\"token punctuation\">,</span> aiTextureType type<span class=\"token punctuation\">,</span>string typeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Model 类包含了一个 Mesh 对象的 vector（译注：这里指的是 C++ 中的 vector 模板类，之后遇到均不译），构造器需要我们给它一个文件路径。在构造器中，它会直接通过 loadModel 来加载文件。私有函数将会处理 Assimp 导入过程中的一部分，我们很快就会介绍它们。我们还将储存文件路径的目录，在之后加载纹理的时候还会用到它。</p>\n<p>Draw 函数没有什么特别之处，基本上就是遍历了所有网格，并调用它们各自的 Draw 函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span>Shader shader<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> meshes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        meshes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Draw</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"导入3d模型到opengl\"><a class=\"anchor\" href=\"#导入3d模型到opengl\">#</a> 导入 3D 模型到 OpenGL</h3>\n<p>要想导入一个模型，并将它转换到我们自己的数据结构中的话，首先我们需要包含 Assimp 对应的头文件，这样编译器就不会抱怨我们了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assimp/Importer.hpp></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assimp/scene.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assimp/postprocess.h></span></span></pre></td></tr></table></figure><p>首先需要调用的函数是 loadModel，它会从构造器中直接调用。在 loadModel 中，我们使用 Assimp 来加载模型至 Assimp 的一个叫做 scene 的数据结构中。你可能还记得在模型加载章节的第一节教程中，这是 Assimp 数据接口的根对象。一旦我们有了这个场景对象，我们就能访问到加载后的模型中所有所需的数据了。</p>\n<p>Assimp 很棒的一点在于，它抽象掉了加载不同文件格式的所有技术细节，只需要一行代码就能完成所有的工作：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Assimp<span class=\"token operator\">::</span>Importer importer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> aiScene <span class=\"token operator\">*</span>scene <span class=\"token operator\">=</span> importer<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> aiProcess_Triangulate <span class=\"token operator\">|</span> aiProcess_FlipUVs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们首先声明了 Assimp 命名空间内的一个 Importer，之后调用了它的 ReadFile 函数。这个函数需要一个文件路径，它的第二个参数是一些后期处理 (Post-processing) 的选项。除了加载文件之外，Assimp 允许我们设定一些选项来强制它对导入的数据做一些额外的计算或操作。通过设定<mark> aiProcess_Triangulate</mark>，我们告诉 Assimp，如果模型不是（全部）由三角形组成，<mark>它需要将模型所有的图元形状变换为三角形</mark>。<mark>aiProcess_FlipUVs</mark> 将在处理的时候翻<mark>转 y 轴的纹理坐标</mark>（你可能还记得我们在纹理教程中说过，在 OpenGL 中大部分的图像的 y 轴都是反的，所以这个后期处理选项将会修复这个）。其它一些比较有用的选项有：</p>\n<ul>\n<li><mark>aiProcess_GenNormals</mark>：如果模型不包含法向量的话，就为每个顶点创建法线。</li>\n<li><mark>aiProcess_SplitLargeMeshes</mark>：将比较大的网格分割成更小的子网格，如果你的渲染有最大顶点数限制，只能渲染较小的网格，那么它会非常有用。</li>\n<li><mark>aiProcess_OptimizeMeshes</mark>：和上个选项相反，它会将多个小网格拼接为一个大的网格，减少绘制调用从而进行优化。</li>\n</ul>\n<p>Assimp 提供了很多有用的后期处理指令，你可以在这里找到全部的指令。实际上使用 Assimp 加载模型是非常容易的（你也可以看到）。困难的是之后使用返回的场景对象将加载的数据转换到一个 Mesh 对象的数组。</p>\n<p>完整的 loadModel 函数将会是这样的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">loadModel</span><span class=\"token punctuation\">(</span>string path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Assimp<span class=\"token operator\">::</span>Importer import<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> aiScene <span class=\"token operator\">*</span>scene <span class=\"token operator\">=</span> import<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> aiProcess_Triangulate <span class=\"token operator\">|</span> aiProcess_FlipUVs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>scene <span class=\"token operator\">||</span> scene<span class=\"token operator\">-></span>mFlags <span class=\"token operator\">&amp;</span> AI_SCENE_FLAGS_INCOMPLETE <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>scene<span class=\"token operator\">-></span>mRootNode<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ERROR::ASSIMP::\"</span> <span class=\"token operator\">&lt;&lt;</span> import<span class=\"token punctuation\">.</span><span class=\"token function\">GetErrorString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    directory <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">find_last_of</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">processNode</span><span class=\"token punctuation\">(</span>scene<span class=\"token operator\">-></span>mRootNode<span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在我们加载了模型之后，我们会检查场景和其根节点不为 null，并且检查了它的一个标记 (Flag)，来查看返回的数据是不是不完整的。如果遇到了任何错误，我们都会通过导入器的 GetErrorString 函数来报告错误并返回。我们也获取了文件路径的目录路径。</p>\n<p>如果什么错误都没有发生，我们希望处理场景中的所有节点，所以我们将第一个节点（根节点）传入了递归的 processNode 函数。因为每个节点（可能）包含有多个子节点，我们希望首先处理参数中的节点，再继续处理该节点所有的子节点，以此类推。这正符合一个递归结构，所以我们将定义一个递归函数。递归函数在做一些处理之后，使用不同的参数递归调用这个函数自身，直到某个条件被满足停止递归。在我们的例子中退出条件 (Exit Condition) 是所有的<mark>节点都被处理完毕</mark>。</p>\n<p>你可能还记得 Assimp 的结构中，每个节点包含了一系列的网格索引，每个索引指向场景对象中的那个特定网格。我们接下来就想去获取这些网格索引，获取每个网格，处理每个网格，接着对每个节点的子节点重复这一过程。processNode 函数的内容如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">processNode</span><span class=\"token punctuation\">(</span>aiNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> aiScene <span class=\"token operator\">*</span>scene<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 处理节点所有的网格（如果有的话）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> node<span class=\"token operator\">-></span>mNumMeshes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        aiMesh <span class=\"token operator\">*</span>mesh <span class=\"token operator\">=</span> scene<span class=\"token operator\">-></span>mMeshes<span class=\"token punctuation\">[</span>node<span class=\"token operator\">-></span>mMeshes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        meshes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">processMesh</span><span class=\"token punctuation\">(</span>mesh<span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 接下来对它的子节点重复这一过程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> node<span class=\"token operator\">-></span>mNumChildren<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">processNode</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>mChildren<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们首先检查每个节点的网格索引，并索引场景的 mMeshes 数组来获取对应的网格。返回的网格将会传递到 processMesh 函数中，它会返回一个 Mesh 对象，我们可以将它存储在 meshes 列表 /vector。</p>\n<p>所有网格都被处理之后，我们会遍历节点的所有子节点，并对它们调用相同的 processMesh 函数。当一个节点不再有任何子节点之后，这个函数将会停止执行。</p>\n<blockquote>\n<p>认真的读者可能会发现，我们可以基本上忘掉处理任何的节点，只需要遍历场景对象的所有网格，就不需要为了索引做这一堆复杂的东西了。我们仍这么做的原因是，使用节点的最初想法是将网格之间定义一个父子关系。通过这样递归地遍历这层关系，我们就能将某个网格定义为另一个网格的父网格了。<br />\n这个系统的一个使用案例是，当你想位移一个汽车的网格时，你可以保证它的所有子网格（比如引擎网格、方向盘网格、轮胎网格）都会随着一起位移。这样的系统能够用父子关系很容易地创建出来。</p>\n</blockquote>\n<blockquote>\n<p>然而，现在我们并没有使用这样一种系统，但如果你想对你的网格数据有更多的控制，通常都是建议使用这一种方法的。这种类节点的关系毕竟是由创建了这个模型的艺术家所定义。</p>\n</blockquote>\n<p>下一步就是将 Assimp 的数据解析到上一节中创建的 Mesh 类中。</p>\n<h3 id=\"从assimp到网格\"><a class=\"anchor\" href=\"#从assimp到网格\">#</a> 从 Assimp 到网格</h3>\n<p>将一个 aiMesh 对象转化为我们自己的网格对象不是那么困难。我们要做的只是访问网格的相关属性并将它们储存到我们自己的对象中。processMesh 函数的大体结构如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Mesh <span class=\"token function\">processMesh</span><span class=\"token punctuation\">(</span>aiMesh <span class=\"token operator\">*</span>mesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> aiScene <span class=\"token operator\">*</span>scene<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>Vertex<span class=\"token operator\">></span> vertices<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> indices<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> textures<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mesh<span class=\"token operator\">-></span>mNumVertices<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        Vertex vertex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 处理顶点位置、法线和纹理坐标</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        vertices<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 处理索引</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 处理材质</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mesh<span class=\"token operator\">-></span>mMaterialIndex <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">Mesh</span><span class=\"token punctuation\">(</span>vertices<span class=\"token punctuation\">,</span> indices<span class=\"token punctuation\">,</span> textures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>处理网格的过程主要有三部分：获取所有的顶点数据，获取它们的网格索引，并获取相关的材质数据。处理后的数据将会储存在三个 vector 当中，我们会利用它们构建一个 Mesh 对象，并返回它到函数的调用者那里。</p>\n<p>获取顶点数据非常简单，我们定义了一个 Vertex 结构体，我们将在每个迭代之后将它加到<mark> vertices</mark> 数组中。我们会遍历网格中的所有顶点（使用 mesh-&gt;mNumVertices 来获取）。在每个迭代中，我们希望使用所有的相关数据填充这个结构体。顶点的位置是这样处理的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>glm<span class=\"token operator\">::</span>vec3 vector<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> mesh<span class=\"token operator\">-></span>mVertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> mesh<span class=\"token operator\">-></span>mVertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vector<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> mesh<span class=\"token operator\">-></span>mVertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vertex<span class=\"token punctuation\">.</span>Position <span class=\"token operator\">=</span> vector<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意我们为了传输 Assimp 的数据，我们定义了一个 vec3 的临时变量。使用这样一个临时变量的原因是 Assimp 对向量、矩阵、字符串等都有自己的一套数据类型，它们并不能完美地转换到 GLM 的数据类型中。</p>\n<blockquote>\n<p>Assimp 将它的顶点位置数组叫做 mVertices，这其实并不是那么直观。</p>\n</blockquote>\n<p>处理法线的步骤也是差不多的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> mesh<span class=\"token operator\">-></span>mNormals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> mesh<span class=\"token operator\">-></span>mNormals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> mesh<span class=\"token operator\">-></span>mNormals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vertex<span class=\"token punctuation\">.</span>Normal <span class=\"token operator\">=</span> vector<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>纹理坐标的处理也大体相似，但 Assimp 允许一个模型在一个顶点上有最多 8 个不同的纹理坐标，我们不会用到那么多，我们只关心第一组纹理坐标。我们同样也想检查网格是否真的包含了纹理坐标（可能并不会一直如此）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mesh<span class=\"token operator\">-></span>mTextureCoords<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 网格是否有纹理坐标？</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    glm<span class=\"token operator\">::</span>vec2 vec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> mesh<span class=\"token operator\">-></span>mTextureCoords<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> mesh<span class=\"token operator\">-></span>mTextureCoords<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    vertex<span class=\"token punctuation\">.</span>TexCoords <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    vertex<span class=\"token punctuation\">.</span>TexCoords <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>vertex 结构体现在已经填充好了需要的顶点属性，我们会在迭代的最后将它压入 vertices 这个 vector 的尾部。这个过程会对每个网格的顶点都重复一遍 (<mark>vertices.push_back</mark>)。</p>\n<h3 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h3>\n<p>Assimp 的接口定义了每个网格都有一个<mark>面 (Face) 数组</mark>，每个面代表了一个图元，在我们的例子中（由于使用了<mark> aiProcess_Triangulate</mark> 选项）<mark>它总是三角形</mark>。一个面包含了多个索引，它们定义了在每个图元中，我们应该绘制哪个顶点，并以什么顺序绘制，所以如果我们遍历了所有的面，并储存了面的索引到 indices 这个 vector 中就可以了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mesh<span class=\"token operator\">-></span>mNumFaces<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    aiFace face <span class=\"token operator\">=</span> mesh<span class=\"token operator\">-></span>mFaces<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> face<span class=\"token punctuation\">.</span>mNumIndices<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        indices<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>face<span class=\"token punctuation\">.</span>mIndices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所有的外部循环都结束了，我们现在有了一系列的顶点和索引数据，它们可以用来通过<mark> glDrawElements</mark> 函数来绘制网格。然而，为了结束这个话题，并且对网格提供一些细节，我们还需要处理网格的材质。</p>\n<h3 id=\"材质\"><a class=\"anchor\" href=\"#材质\">#</a> 材质</h3>\n<p>和节点一样，一个网格只包含了一个指向材质对象的索引。如果想要获取网格真正的材质，我们还需要索引场景的<mark> mMaterials</mark> 数组。网格材质索引位于它的 mMaterialIndex 属性中，我们同样可以用它来检测一个网格是否包含有材质：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mesh<span class=\"token operator\">-></span>mMaterialIndex <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    aiMaterial <span class=\"token operator\">*</span>material <span class=\"token operator\">=</span> scene<span class=\"token operator\">-></span>mMaterials<span class=\"token punctuation\">[</span>mesh<span class=\"token operator\">-></span>mMaterialIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> diffuseMaps <span class=\"token operator\">=</span> <span class=\"token function\">loadMaterialTextures</span><span class=\"token punctuation\">(</span>material<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                        aiTextureType_DIFFUSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"texture_diffuse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    textures<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>textures<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> diffuseMaps<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> diffuseMaps<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> specularMaps <span class=\"token operator\">=</span> <span class=\"token function\">loadMaterialTextures</span><span class=\"token punctuation\">(</span>material<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                        aiTextureType_SPECULAR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"texture_specular\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    textures<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>textures<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> specularMaps<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> specularMaps<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们首先从场景的 mMaterials 数组中获取 aiMaterial 对象。接下来我们希望加载网格的漫反射和 / 或镜面光贴图。一个材质对象的内部对每种纹理类型都存储了一个纹理位置数组。不同的纹理类型都以 aiTextureType_为前缀。我们使用一个叫做<mark> loadMaterialTextures</mark> 的工具函数来从材质中获取纹理。这个函数将会返回一个<mark> Texture</mark> 结构体的 vector，我们将在模型的 textures vector 的尾部之后存储它。</p>\n<p>loadMaterialTextures 函数遍历了给定纹理类型的所有纹理位置，获取了纹理的文件位置，并加载并和生成了纹理，将信息储存在了一个 Vertex 结构体中。它看起来会像这样：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> <span class=\"token function\">loadMaterialTextures</span><span class=\"token punctuation\">(</span>aiMaterial <span class=\"token operator\">*</span>mat<span class=\"token punctuation\">,</span> aiTextureType type<span class=\"token punctuation\">,</span> string typeName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> textures<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mat<span class=\"token operator\">-></span><span class=\"token function\">GetTextureCount</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        aiString str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        mat<span class=\"token operator\">-></span><span class=\"token function\">GetTexture</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        Texture texture<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        texture<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token function\">TextureFromFile</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">C_Str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> directory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        texture<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> typeName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        texture<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        textures<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> textures<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们首先通过 GetTextureCount 函数检查储存在材质中纹理的数量，这个函数需要一个纹理类型。我们会使用 GetTexture 获取每个纹理的文件位置，它会将结果储存在一个 aiString 中。我们接下来使用另外一个叫做 TextureFromFile 的工具函数，它将会（用 stb_image.h）加载一个纹理并返回该纹理的 ID。如果你不确定这样的代码是如何写出来的话，可以查看最后的完整代码。</p>\n<blockquote>\n<p>注意，我们假设了模型文件中纹理文件的路径是相对于模型文件的本地 (Local) 路径，比如说与模型文件处于同一目录下。我们可以将纹理位置字符串拼接到之前（在 loadModel 中）获取的目录字符串上，来获取完整的纹理路径（这也是为什么 GetTexture 函数也需要一个目录字符串）。</p>\n</blockquote>\n<blockquote>\n<p>在网络上找到的某些模型会对纹理位置使用绝对 (Absolute) 路径，这就不能在每台机器上都工作了。在这种情况下，你可能会需要手动修改这个文件，来让它对纹理使用本地路径（如果可能的话）。</p>\n</blockquote>\n<h3 id=\"重大优化\"><a class=\"anchor\" href=\"#重大优化\">#</a> 重大优化</h3>\n<p>这还没有完全结束，因为我们还想做出一个重大的（但不是完全必须的）优化。大多数场景都会在多个网格中重用部分纹理。还是想想一个房子，它的墙壁有着花岗岩的纹理。这个纹理也可以被应用到地板、天花板、楼梯、桌子，甚至是附近的一口井上。加载纹理并不是一个开销不大的操作，在我们当前的实现中，即便同样的纹理已经被加载过很多遍了，对每个网格仍会加载并生成一个新的纹理。这很快就会变成模型加载实现的性能瓶颈。</p>\n<p>所以我们会对模型的代码进行调整，将所有加载过的纹理全局储存，每当我们想加载一个纹理的时候，首先去检查它有没有被加载过。如果有的话，我们会直接使用那个纹理，并跳过整个加载流程，来为我们省下很多处理能力。为了能够比较纹理，我们还需要储存它们的路径：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Texture</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    string type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    aiString path<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 我们储存纹理的路径用于与其它纹理进行比较</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来我们将所有加载过的纹理储存在另一个 vector 中，在模型类的顶部声明为一个私有变量：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> textures_loaded<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>之后，在 loadMaterialTextures 函数中，我们希望将纹理的路径与储存在 textures_loaded 这个 vector 中的所有纹理进行比较，看看当前纹理的路径是否与其中的一个相同。如果是的话，则跳过纹理加载 / 生成的部分，直接使用定位到的纹理结构体为网格的纹理。更新后的函数如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> <span class=\"token function\">loadMaterialTextures</span><span class=\"token punctuation\">(</span>aiMaterial <span class=\"token operator\">*</span>mat<span class=\"token punctuation\">,</span> aiTextureType type<span class=\"token punctuation\">,</span> string typeName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>Texture<span class=\"token operator\">></span> textures<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mat<span class=\"token operator\">-></span><span class=\"token function\">GetTextureCount</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        aiString str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        mat<span class=\"token operator\">-></span><span class=\"token function\">GetTexture</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">bool</span> skip <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> textures_loaded<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>textures_loaded<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">C_Str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                textures<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>textures_loaded<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                skip <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>skip<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 如果纹理还没有被加载，则加载它</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            Texture texture<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            texture<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token function\">TextureFromFile</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">C_Str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> directory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            texture<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> typeName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            texture<span class=\"token punctuation\">.</span>path <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">C_Str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            textures<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            textures_loaded<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>texture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加到已加载的纹理中</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> textures<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以现在我们不仅有了个灵活的模型加载系统，我们也获得了一个加载对象很快的优化版本。</p>\n<h3 id=\"和箱子模型告别\"><a class=\"anchor\" href=\"#和箱子模型告别\">#</a> 和箱子模型告别</h3>\n<p>所以，让我们导入一个由真正的艺术家所创造的模型，替代我这个天才的作品（你要承认，这些箱子可能是你看过的最漂亮的立方体了），测试一下我们的实现吧。由于我不想让我占太多的功劳，我会偶尔让别的艺术家也加入我们，这次我们将会加载 Crytek 的游戏孤岛危机 (Crysis) 中的原版纳米装 (Nanosuit)。这个模型被输出为一个.obj 文件以及一个.mtl 文件，.mtl 文件包含了模型的漫反射、镜面光和法线贴图（这个会在后面学习到），你可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybm9wZW5nbC1jbi5naXRodWIuaW8vZGF0YS9uYW5vc3VpdC5yYXI=\">这里下载到</span>（稍微修改之后的）模型，注意所有的纹理和模型文件应该位于同一个目录下，以供加载纹理。</p>\n<blockquote>\n<p>你从本网站中下载到的版本是修改过的版本，每个纹理的路径都被修改为了一个本地的相对路径，而不是原资源的绝对路径。</p>\n</blockquote>\n<p>现在在代码中，声明一个 Model 对象，将模型的文件位置传入。接下来模型应该会自动加载并（如果没有错误的话）在渲染循环中使用它的 Draw 函数来绘制物体，这样就可以了。不再需要缓冲分配、属性指针和渲染指令，只需要一行代码就可以了。接下来如果你创建一系列着色器，其中片段着色器仅仅输出物体的漫反射纹理颜色，最终的结果看上去会是这样的：</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/03/03/model_diffuse.png\" alt=\"image\" /></p>\n<p>我们可以变得更有创造力一点，根据我们之前在光照教程中学过的知识，引入两个点光源到渲染方程中，结合镜面光贴图，我们能得到很惊人的效果。</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/03/03/model_lighting.png\" alt=\"image\" /></p>\n<p>甚至我都必须要承认这个可能是比一直使用的箱子要好看多了。使用 Assimp，你能够加载互联网上的无数模型。有很多资源网站都提供了多种格式的免费 3D 模型供你下载。但还是要注意，有些模型会不能正常地载入，<mark>纹理的路径会出现问题</mark>，或者 Assimp 并<mark>不支持它的格式</mark>。</p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "OpenGL"
            ]
        }
    ]
}
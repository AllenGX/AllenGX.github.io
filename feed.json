{
    "version": "https://jsonfeed.org/version/1",
    "title": "鑫酱",
    "subtitle": "笔记本",
    "icon": "https://allengx.gitee.io/images/favicon.ico",
    "description": "整天摸鱼，却妄想拯救世界的技术宅",
    "home_page_url": "https://allengx.gitee.io",
    "items": [
        {
            "id": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%B8%83%E3%80%81%E9%81%97%E7%95%99%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%94%B9%E9%80%A0/",
            "url": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%B8%83%E3%80%81%E9%81%97%E7%95%99%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%94%B9%E9%80%A0/",
            "title": "七、遗留系统的微服务改造",
            "date_published": "2020-12-25T07:35:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"遗留系统的微服务改造\"><a class=\"anchor\" href=\"#遗留系统的微服务改造\">#</a> 遗留系统的微服务改造</h1>\n<h2 id=\"遗留系统综述\"><a class=\"anchor\" href=\"#遗留系统综述\">#</a> 遗留系统综述</h2>\n<h3 id=\"什么是遗留系统\"><a class=\"anchor\" href=\"#什么是遗留系统\">#</a> 什么是遗留系统</h3>\n<ul>\n<li>庞大的单体应用：多年积累下来的「巨无霸」，年代久远，通常以单体的形式存在</li>\n<li>难于修改：由于需求反复变更等因素，导致代码奇丑无比💀，散发出怪味道💩。</li>\n<li>维护成本高昂：对于复杂不易于阅读的代码，往往有时候牵一发而动全身💥。​</li>\n<li>缺乏质量保障：由于过去的自动化测试不足，导致产品质量无法得到保证，使得之后的开发 bug 频频💣。</li>\n</ul>\n<h3 id=\"取而代之\"><a class=\"anchor\" href=\"#取而代之\">#</a> 取而代之❓</h3>\n<p>暴力、直截了当的做法就是重新写一套。但往往有时候旧模块存在很多难以察觉的「隐藏规则」。重写过程中往往容易丢失，或者出现各种「水土不服」。</p>\n<ul>\n<li>上线困难，阻塞业务风险高：重写过程中，可能会有新的业务需求到来。这样导致的结果就是，一遍得开发新的需求，一遍还得重写代码。而新开发的需求在不久的将来，势必又会被重写，导致开发人员和测试人员白白耗费时间。</li>\n<li>影响不可靠，重写周期长：如果项目已经上线。那么重写带来的影响可能被很多其他业务所使用，一方面可能导致其他业务的不可用。另一方面也无法确保新重写的代码对之前的存储数据有一个很好的兼容。</li>\n<li>学习成本高，知识传递周期长：遗留系统的改造周期如果较长，可能会出现很多的不确定因素。例如：开发人员中途离职，或者突然被指派到其他的业务，回过头来再进行开发会耗费较多的时间切换上下文。而且周期越长，可能对原业务的修改需求越多，而这些内容又得重新考虑进新的重写代码中。</li>\n</ul>\n<h2 id=\"遗留系统改造策略\"><a class=\"anchor\" href=\"#遗留系统改造策略\">#</a> 遗留系统改造策略</h2>\n<ul>\n<li>遵循「演进式改造流程」：优先改造最有价值的部分，并保证改造过程中的风险可控。</li>\n<li>采用「绞杀者模式」：通过逐步替换而非一次性替换的方式，保证新旧系统的平滑过渡。</li>\n<li>采用「挎斗模式」：将不容易改造的系统接入微服务环境中。</li>\n</ul>\n<h3 id=\"演进式改造流程\"><a class=\"anchor\" href=\"#演进式改造流程\">#</a> 演进式改造流程</h3>\n<h4 id=\"服务价值评判\"><a class=\"anchor\" href=\"#服务价值评判\">#</a> 服务价值评判</h4>\n<ul>\n<li>优先拆分相对独立的部分：独立业务拆分工作时，难度会稍微小一些，正所谓：柿子要挑软的捏🍅</li>\n<li>优先拆分频繁变更的部分：对于频繁变动的业务，早改早享受，避免频繁的在难以维护的代码上频繁迭代。</li>\n<li>优先拆分有特殊资源占用需求的部分：针对某些影响性能的业务，或者影响存储数据的业务，尽早拆分有助于提高系统总体的健壮💪。</li>\n</ul>\n<h4 id=\"服务改造面临问题\"><a class=\"anchor\" href=\"#服务改造面临问题\">#</a> 服务改造面临问题</h4>\n<ul>\n<li>新旧系统的数据兼容（存储方式、数据结构）</li>\n<li>单体到集群如何平稳过渡。</li>\n</ul>\n<h4 id=\"业务验证\"><a class=\"anchor\" href=\"#业务验证\">#</a> 业务验证</h4>\n<p>确保新服务在迁移之后能够正常运转，并等系统能够稳定运转一段时间后，移除原有的代码模块。</p>\n<h4 id=\"迭代优化\"><a class=\"anchor\" href=\"#迭代优化\">#</a> 迭代优化</h4>\n<p>对于剩下的部分再根据上述过程进行逐一推进🚗。</p>\n<h3 id=\"绞杀者模式\"><a class=\"anchor\" href=\"#绞杀者模式\">#</a> 绞杀者模式</h3>\n<ul>\n<li>组件解耦：在组件和组件依赖者之间构建一个中间层，负责转发 API。一方面可以确定两者之间的主要依赖内容，为新组件的编写提供思路，另一方面也可以快速的切换回旧的组件提供渠道。</li>\n<li>新旧组件共存：把部分功能的流向引入新的组件，对比两者的运行效果，类似灰度发布的感觉。</li>\n<li>逐步替换：随着组件功能的趋于稳定，旧组件就可以慢慢下岗，被新组件取代，然后根据需要移除掉中间层。</li>\n</ul>\n<h3 id=\"挎斗模式\"><a class=\"anchor\" href=\"#挎斗模式\">#</a> 挎斗模式</h3>\n<p>主要思想是重新构建一个系统，负责和原来的旧系统之间进行数据流通，然后部署的时候，选择把这两个系统一同部署到临近的节点。</p>\n<p>可以理解是一个旧系统的守护系统，掌管这个系统和外界的交互，偶尔可以扩展一些功能。有点类似 <strong>边车模式</strong>（sidecar）。</p>\n<h2 id=\"遗留系统的改造场景\"><a class=\"anchor\" href=\"#遗留系统的改造场景\">#</a> 遗留系统的改造场景</h2>\n<ul>\n<li>实现新的业务\n<ul>\n<li>数据是否依赖现有业务</li>\n</ul>\n</li>\n<li>对现有业务的微服务化</li>\n</ul>\n<h3 id=\"面临的挑战\"><a class=\"anchor\" href=\"#面临的挑战\">#</a> 面临的挑战</h3>\n<ul>\n<li>新旧系统可能需要不同的数据源，或者不同的数据结构。</li>\n<li>单体下的旧系统如何拆分成多个服务，如何循序渐进。</li>\n</ul>\n<h3 id=\"1新业务和原业务数据独立happy\"><a class=\"anchor\" href=\"#1新业务和原业务数据独立happy\">#</a> ①新业务和原业务数据独立:happy:</h3>\n<p>可以直接套用绞杀者模式，在新旧业务和依赖服务之间加入中间层，逐步引流。</p>\n<h3 id=\"2新业务和原业务数据存在依赖\"><a class=\"anchor\" href=\"#2新业务和原业务数据存在依赖\">#</a> ②新业务和原业务数据存在依赖😑</h3>\n<p>根据数据的持有者不同进行进一步划分：</p>\n<ul>\n<li>数据的持有在新业务：新业务数据单独存储，并通过其他手段在修改后同步给旧业务（ETL 服务）。</li>\n<li>数据的持有在旧业务：新业务直接访问旧业务模块提供的 API 来访问数据。</li>\n</ul>\n<h3 id=\"3对现有业务微服务化\"><a class=\"anchor\" href=\"#3对现有业务微服务化\">#</a> ③对现有业务微服务化😟</h3>\n<p>实现方案：</p>\n<ul>\n<li>对现有业务的内部接口进行统一化：全部调整为 REST 接口，让 API 调用可以不受其他因素影响，模块之间进行解耦。</li>\n<li>将本地的接口转成远程通信的接口（RPC or HTTP）：虽然可能仍然走的是本地的通信流程，但是对于后续的拆分大有裨益。</li>\n<li>业务数据分离：将拆分后的服务所需的数据分离出来，作为新服务的独享数据库所持有。多个数据之间的依赖可以参考构建 ETL 服务。</li>\n</ul>\n<h4 id=\"如何拆分数据库\"><a class=\"anchor\" href=\"#如何拆分数据库\">#</a> 如何拆分数据库</h4>\n<ul>\n<li>表拆分：解除服务之间的数据耦合关系。</li>\n<li>绘制服务依赖关系图：梳理各个服务之间的依赖关系。</li>\n<li>库拆分：解除服务之间的数据库耦合。</li>\n</ul>\n<p>重复上述步骤，直到所有数据库被拆分为由各个服务独享的数据库。</p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务架构阅读笔记",
                "微服务"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%85%AD%E3%80%81%E5%9F%BA%E4%BA%8E%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%8B%EF%BC%89/",
            "url": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%85%AD%E3%80%81%E5%9F%BA%E4%BA%8E%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%8B%EF%BC%89/",
            "title": "六、基于参考模型的实践（下）",
            "date_published": "2020-12-25T03:34:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"基于参考模型的实践下\"><a class=\"anchor\" href=\"#基于参考模型的实践下\">#</a> 基于参考模型的实践（下）</h1>\n<h2 id=\"测试管理\"><a class=\"anchor\" href=\"#测试管理\">#</a> 测试管理</h2>\n<h3 id=\"微服务架构下的测试\"><a class=\"anchor\" href=\"#微服务架构下的测试\">#</a> 微服务架构下的测试</h3>\n<p>架构层面：</p>\n<ul>\n<li>可测试性：编码需要更容易的进行测试，测试驱动设计</li>\n<li>架构解耦：各个模块之间尽量解耦，高内聚，低耦合。</li>\n</ul>\n<p>工作内容：</p>\n<ul>\n<li>自动化：减少重复工作，提供快速反馈。</li>\n<li>轻量化：在选择和使用工具时，尽量是简单的。</li>\n<li>可视化：从使用者的角度理解系统的工作方式，帮助团队降低沟通和学习成本。</li>\n<li>去测试化：开发人员需要更加关注产品质量，把测试做到位。</li>\n</ul>\n<h3 id=\"微服务下的测试策略\"><a class=\"anchor\" href=\"#微服务下的测试策略\">#</a> 微服务下的测试策略</h3>\n<ul>\n<li>组件内部逻辑正确性：服务内部本身逻辑是否正确。</li>\n<li>微服务之间连接的正确性：各模块的网络交互是否正常。</li>\n<li>各个微服务集成后，整体功能的完整性：整体功能完善，流程无缺失。</li>\n</ul>\n<h4 id=\"测试类型划分\"><a class=\"anchor\" href=\"#测试类型划分\">#</a> 测试类型划分</h4>\n<p>测试类型自底向上，测试过程中，留给底层的测试比例应该高于顶层。</p>\n<ul>\n<li>单元测试：针对某个方法进行的测试</li>\n<li>API 测试：针对某个接口或者功能进行的测试。</li>\n<li>契约测试：针对各个微服务之间的连接进行测试。</li>\n<li>集成测试：针对系统整体进行的测试。</li>\n</ul>\n<h3 id=\"交付流水线的设计\"><a class=\"anchor\" href=\"#交付流水线的设计\">#</a> 交付流水线的设计</h3>\n<h4 id=\"构建阶段\"><a class=\"anchor\" href=\"#构建阶段\">#</a> 构建阶段</h4>\n<ul>\n<li>代码编译（对于动态类型语言可以省略这一步）</li>\n<li>静态检查：检查代码风格、代码质量、代码安全等。</li>\n<li>单元测试：运行基本的单元测试。</li>\n<li>API 测试：测试服务本身的接口。</li>\n<li>契约测试：测试前后端的通信是否正常。</li>\n<li>功能测试：测试系统的整体功能。</li>\n<li>打包发布：打包代码，并发布到对应的仓库。</li>\n</ul>\n<h4 id=\"验证阶段\"><a class=\"anchor\" href=\"#验证阶段\">#</a> 验证阶段</h4>\n<ul>\n<li>自动化部署：自动构建应用的测试环境。</li>\n<li>端到端测试：端到端进行测试，确保没有影响到其他的服务。</li>\n<li>接受测试：BA 或者产品经理手动测试，确保需求符合预期。</li>\n<li>非功能性测试：性能测试，可用性测试。</li>\n</ul>\n<h4 id=\"发布阶段\"><a class=\"anchor\" href=\"#发布阶段\">#</a> 发布阶段</h4>\n<ul>\n<li>自动化部署：将通过测试提交的代码，自动部署到生产环境。</li>\n<li>冒烟测试：针对生产环境做简单的 happy path 的自动化功能验证测试，确保服务器正常运行。</li>\n<li>非功能性测试：进行性能相关的检测，确保本次提交不会造成性能问题。</li>\n</ul>\n<h3 id=\"引入特性开关\"><a class=\"anchor\" href=\"#引入特性开关\">#</a> 引入特性开关</h3>\n<h4 id=\"特性分支\"><a class=\"anchor\" href=\"#特性分支\">#</a> 特性分支</h4>\n<ul>\n<li>Master 分支（trunk 分支）：所有的工作流全都基于 Master 分支，包括代码提交，测试。</li>\n<li>Develop 分支：存放之前测试的稳定历史版本分支，用于后续的发布。</li>\n<li>Feature 分支：处理一些待开发中的大型功能或者独立的功能，单独测试完毕后，合并回 Master 分支。</li>\n</ul>\n<h4 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题：</h4>\n<ul>\n<li>Feature 分支合并时往往很多冲突，耗时费力。</li>\n<li>Master 分支的 bug 在 Develop 分支也要进行相应的修改，增加工作成本。</li>\n</ul>\n<h3 id=\"特性开关\"><a class=\"anchor\" href=\"#特性开关\">#</a> 特性开关</h3>\n<p>所有开发基于主干，并对部分逻辑进行特性判断</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> FeatureA<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t逻辑A</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t逻辑B</pre></td></tr></table></figure><h4 id=\"问题-2\"><a class=\"anchor\" href=\"#问题-2\">#</a> 问题：</h4>\n<p>对于可能出现多个 Feature 同时进行的时候，工程代码往往会更加复杂，而且容易因为开关所在地方较多，导致遗漏，增加测试成本。</p>\n<h2 id=\"部署管理实践\"><a class=\"anchor\" href=\"#部署管理实践\">#</a> 部署管理实践</h2>\n<p>pass</p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务架构阅读笔记",
                "微服务"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%BA%94%E3%80%81%E5%9F%BA%E4%BA%8E%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AE%9E%E8%B7%B5/",
            "url": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%BA%94%E3%80%81%E5%9F%BA%E4%BA%8E%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%AE%9E%E8%B7%B5/",
            "title": "五、基于参考模型的实践（上）",
            "date_published": "2020-12-18T09:34:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"基于参考模型的实践上\"><a class=\"anchor\" href=\"#基于参考模型的实践上\">#</a> 基于参考模型的实践（上）</h1>\n<h2 id=\"微服务团队\"><a class=\"anchor\" href=\"#微服务团队\">#</a> 微服务团队</h2>\n<h3 id=\"全功能团队\"><a class=\"anchor\" href=\"#全功能团队\">#</a> 全功能团队</h3>\n<p>能够让整个团队拥有交付过程中所有的能力，尽早反馈，尽早解决。</p>\n<p>需要团队具备以下能力：</p>\n<ul>\n<li>业务分析</li>\n<li>开发</li>\n<li>自动化测试</li>\n<li>自动化部署</li>\n<li>持续集成</li>\n</ul>\n<h4 id=\"提升团队能力\"><a class=\"anchor\" href=\"#提升团队能力\">#</a> 提升团队能力</h4>\n<ul>\n<li>结对编程。不同分工的人员结对编程，互相学习。</li>\n<li>降低基础设施建设、自动部署的难度。说白了就是简化工具使用、让 0 基础小白也能简单上手。</li>\n<li>定期技术分享。每周花费一定时间组织员工分享技术，可以在不同维度提升团队实力。</li>\n<li>WorkShop。对于团队普遍缺乏的能力，采用专门的培训激励政策，激发团队的学习热情。</li>\n</ul>\n<h4 id=\"如何培养全栈工程师\"><a class=\"anchor\" href=\"#如何培养全栈工程师\">#</a> 如何培养全栈工程师</h4>\n<ul>\n<li>有针对性的培训。对缺乏的技能，通过培训的方式进行快速入门。</li>\n<li>导师机制。给新人分配经验丰富的导师。</li>\n<li>持续学习的文化。公司需要营造持续学习的氛围和文化。</li>\n<li>参加外部会议。参加技术沙龙、技术会议。</li>\n<li>Coding Kata：针对某个细分的编程方向进行专项的练习，强化印象。</li>\n<li>保持高效。选择高效工具、学会任务拆分、避免重复性工作。</li>\n<li>刻意的训练。扩展或者学习新知识需要不断的反复练习。</li>\n<li>分享知识。分享知识不但可以提升团队水平，还能够巩固自己的知识。</li>\n</ul>\n<p>此外全栈工程师除了全方位的扩展技术，还需要在某个方面有所深耕，做「T」型人才</p>\n<h2 id=\"迭代零\"><a class=\"anchor\" href=\"#迭代零\">#</a> 迭代零</h2>\n<p>在敏捷开发流程中，通过一个迭代过程来做交付的基础准备，如：技术选型、工程创建、搭建持续集成。通过从一次完整的迭代，来反映整个项目的技术特点，以及明确项目所需的基础设施。</p>\n<ul>\n<li>技术选型：根据核心业务需求，搭建基本架构并选择相关的技术栈。</li>\n<li>创建工程：构建持续集成流水线，准备自动化框架。</li>\n<li>基础设施准备：通过自动化工具来准备测试、预生产式生产环境运行需要的基础设施，以及相关的监控、告警。</li>\n<li>结合自动化部署工具实现自动化部署。</li>\n</ul>\n<h2 id=\"基于invest原则定义用户故事\"><a class=\"anchor\" href=\"#基于invest原则定义用户故事\">#</a> 基于「INVEST」原则定义用户故事</h2>\n<p>「用户故事」是从人的角度对一个功能的简短描述。</p>\n<ul>\n<li>\n<p>独立（Independent）：用户故事之间独立，互不干预。</p>\n</li>\n<li>\n<p>可协商（Negotiable）：用户故事内容可变更。</p>\n</li>\n<li>\n<p>有价值（Valuable）：故事本身必须要有实现的价值。</p>\n</li>\n<li>\n<p>可估算（Estimable）：故事的工作量必须是可以预估的。</p>\n</li>\n<li>\n<p>足够小（Small）：故事的工作量必须足够小，可以更快的验收和优化。</p>\n</li>\n<li>\n<p>可测试（Testable）：必须是可以测试的。</p>\n</li>\n</ul>\n<h2 id=\"回顾会议\"><a class=\"anchor\" href=\"#回顾会议\">#</a> 回顾会议</h2>\n<ul>\n<li>检查上次内容是否落地。</li>\n<li>总结本地迭代情况\n<ul>\n<li>交付质量</li>\n<li>问题</li>\n<li>改进办法</li>\n</ul>\n</li>\n<li>介绍落地内容、同步成员信息</li>\n<li>对改进办法进行思考，分析。</li>\n<li>头脑风暴，各抒己见。</li>\n<li>总结会议内容，制定执行人员。</li>\n<li>控制时长「1 小时」左右。</li>\n</ul>\n<h2 id=\"文档整理onepage\"><a class=\"anchor\" href=\"#文档整理onepage\">#</a> 文档整理（OnePage）</h2>\n<p>对项目整理内容梳理，保证新人快速上手</p>\n<ul>\n<li>服务综述：基本名词介绍，服务名称和功能、成员名单和职责，工作时间和规范。</li>\n<li>服务 SLA：服务内容介绍，服务可用时间，服务特点。</li>\n<li>服务架构：服务器架构，组件，依赖关系，数据库等。</li>\n<li>运行环境：运行环境描述、测试环境、生产、预生产环境，访问地址，远程机器 ip。</li>\n<li>开发相关：开发环境、开发流程、开发工具、调试。</li>\n<li>测试相关：测试规范，测试内容，测试流程。</li>\n<li>流水线相关：持续交付规则。</li>\n<li>部署相关：部署教程、部署验证功能方式。</li>\n<li>运维相关：防控页面、日志查询、面板监控、容灾处理。</li>\n<li>常见问题：上述过程遇到的一些通用问题处理办法。</li>\n</ul>\n<h2 id=\"微服务监控指标\"><a class=\"anchor\" href=\"#微服务监控指标\">#</a> 微服务监控指标</h2>\n<ul>\n<li>主机、容器监控\n<ul>\n<li>CPU</li>\n<li>内存</li>\n<li>线程数量</li>\n</ul>\n</li>\n<li>微服务\n<ul>\n<li>程序异常、错误情况</li>\n<li>可用性</li>\n<li>延迟</li>\n<li>其他依赖的服务情况</li>\n<li>语言特定的指标</li>\n</ul>\n</li>\n<li>整体可用性\n<ul>\n<li>不同地域的可用性</li>\n<li>DNS、HTTPS 证书等基础设置可用性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"日志管理\"><a class=\"anchor\" href=\"#日志管理\">#</a> 日志管理</h2>\n<h3 id=\"日志的分类\"><a class=\"anchor\" href=\"#日志的分类\">#</a> 日志的分类：</h3>\n<ul>\n<li>应用日志：应用本身记录的日志</li>\n<li>访问日志：各种访问请求的日志</li>\n<li>系统日志：审计、服务启动、关闭等</li>\n<li>其他基础设施日志：网络、CDN 等日志</li>\n</ul>\n<h3 id=\"常见日志管理问题\"><a class=\"anchor\" href=\"#常见日志管理问题\">#</a> 常见日志管理问题：</h3>\n<ul>\n<li>服务多样，日志格式不统一</li>\n<li>服务规模增大，手动收集难以实现</li>\n<li>需要用日志跟踪多个服务节点情况</li>\n<li>需要通过日志检查错误情况并报警</li>\n</ul>\n<h2 id=\"事故报告\"><a class=\"anchor\" href=\"#事故报告\">#</a> 事故报告</h2>\n<ul>\n<li>事故总结</li>\n<li>事故的时间轴</li>\n<li>引发事故的根本原因</li>\n<li>解决办法</li>\n<li>矫正和预防的手段</li>\n</ul>\n<h2 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h2>\n<ul>\n<li>Coding Kata：一种编程练习</li>\n<li>反向康威定律：先调整系统架构，在调整过程中发现系统问题并改正。</li>\n<li>OWASP Top 10：10 大常见的应用安全问题。</li>\n<li>CDN（Content Delivery Network）：内容传输网络，常用于静态资源缓存</li>\n<li>ELK（ElasticSearch LogStash Kibana）：日志收集分析工具</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务架构阅读笔记",
                "微服务"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9B%9B%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/",
            "url": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E5%9B%9B%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/",
            "title": "四、微服务参考模型",
            "date_published": "2020-12-15T09:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"微服务参考模型\"><a class=\"anchor\" href=\"#微服务参考模型\">#</a> 微服务参考模型</h1>\n<h2 id=\"参考模型的核心内容\"><a class=\"anchor\" href=\"#参考模型的核心内容\">#</a> 参考模型的核心内容</h2>\n<ul>\n<li>适用性评估</li>\n<li>成熟度参考</li>\n<li>度量指标</li>\n</ul>\n<h3 id=\"适用性评估\"><a class=\"anchor\" href=\"#适用性评估\">#</a> 适用性评估</h3>\n<p>针对现有系统，基础建设，历史问题进行成本和风险的预估，判断对哪些模块进行哪些维度的改造，指定完备的计划路线。</p>\n<ul>\n<li>数据一致性：需要明确对数据一致性的要求，从而才能决定分布式架构的设计。</li>\n<li>实时性：是否对于是实现有着严格要求，改造后是否满足需求。</li>\n<li>可用性：考虑服务的可用性，需要考虑服务是否是「有状态」的，这将直接决定服务的扩展成本。</li>\n<li>交付周期：缩短交付周期往往对一个产品至关重要，有时候也需要在改造时间和产品周期之间进行权衡。</li>\n<li>可伸缩性：业务是否需要可伸缩，以及可伸缩的标准，这也会决定微服务转型的最终方向和目标。</li>\n</ul>\n<h3 id=\"成熟度参考\"><a class=\"anchor\" href=\"#成熟度参考\">#</a> 成熟度参考</h3>\n<p>对目标进行拆分，进行短期、中长期的规划，定义项目的演变阶段，然后「循序渐进」。对当前项目的所处阶段进行定义，才能更好的划分里程碑。</p>\n<ul>\n<li>全功能团队：衡量团队在「组织」、「持续优化」、「高效协作」等方面的能力</li>\n<li>敏捷实践：衡量团队对于敏捷开发和实践的熟练程度。</li>\n<li>服务设计与实现：衡量团队对于服务设计与开发的熟练程度。</li>\n<li>服务支持组件：服务治理、日志分析、注册发现、熔断等基础组件支持的完善程度。</li>\n<li>运维管理：对服务监控、告警、故障排查、故障恢复、动态扩缩等运维技术的掌握。</li>\n<li>测试管理：测试策略、自动化、测试方法及质量把控方面的成熟度。</li>\n<li>交付流水线：衡量自动交付、持续集成、分支管理、版本控制、结果可视化等方面的完善程度。</li>\n<li>部署管理：衡量自动化部署、发布策略、部署故障排查、回滚策略等方面的完善程度。</li>\n</ul>\n<p>对于上述维度的几个阶段划分：</p>\n<ul>\n<li>手动、无序（全靠认为执行指令，进行一步步推进）</li>\n<li>管控、跟踪（手动居多、但是部署、交付、执行、跟踪都执行相应的计划，部分流程自动化，部分内容可视化）</li>\n<li>标准、自动化（团队内有统一的开发规范，严格遵守标准，开发、测试、交付、部署等基本实现自动化、可视化）</li>\n<li>量化（整个流程以及非常完善，可用分析评估交付过程的效率和质量。交付的内容是可度量、控制和预测的，且能够持续跟踪）</li>\n<li>持续优化（有成熟的自治团队，能够自行解决项目整体实施过程中的相关问题，能够有效评估交付风险，并且有优化和创新办法，且能够有效复制和传承）</li>\n</ul>\n<h3 id=\"度量指标\"><a class=\"anchor\" href=\"#度量指标\">#</a> 度量指标</h3>\n<p>如何评估微服务转型过程中起到的效果，以及找出需要改成和优化的内容。</p>\n<ul>\n<li>结果类度量指标（核心参考指标）：直接反应微服务化的成果，包括「交付周期」、「部署」、「运维」的效率以及参评的可靠性。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>指标</th>\n<th>单位</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>交付</td>\n<td>周期时间</td>\n<td>天</td>\n<td>需求制定到上线时间（越快越好）</td>\n</tr>\n<tr>\n<td>发布</td>\n<td>部署频率</td>\n<td>次 / 月</td>\n<td>一个月内部署到生产环境的次数（越多越好）</td>\n</tr>\n<tr>\n<td>运维</td>\n<td>故障恢复时间</td>\n<td>小时</td>\n<td>服务故障的恢复时间（越短越好）</td>\n</tr>\n<tr>\n<td>质量</td>\n<td>系统可用性</td>\n<td></td>\n<td>接口出错率、产品缺陷指数等。（越小越好）</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>过程类独立指标（辅助参考指标）：团队成员个人能力的提示，沟通成本的改善、代码质量、测试时长等等。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>指标</th>\n<th>单位</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开发</td>\n<td>代码提交频率</td>\n<td>次 / 天</td>\n<td>提交频率</td>\n</tr>\n<tr>\n<td>开发</td>\n<td>平均提交代码行数</td>\n<td>次 / 行</td>\n<td>平均每次提交行数</td>\n</tr>\n<tr>\n<td>开发</td>\n<td>平均修复缺陷时间</td>\n<td>小时</td>\n<td>bug 发现到修复时间</td>\n</tr>\n<tr>\n<td>持续集成</td>\n<td>构建频率</td>\n<td>次 / 周</td>\n<td>构建次数</td>\n</tr>\n<tr>\n<td>持续集成</td>\n<td>构建时长</td>\n<td>分钟</td>\n<td>每次所用时间</td>\n</tr>\n<tr>\n<td>持续集成</td>\n<td>测试时长</td>\n<td>分钟</td>\n<td>提交到测试时间</td>\n</tr>\n<tr>\n<td>持续集成</td>\n<td>构建失败率</td>\n<td>百分比</td>\n<td>构建失败率</td>\n</tr>\n<tr>\n<td>持续集成</td>\n<td>失败后恢复时长</td>\n<td>分钟</td>\n<td>构建失败到恢复正常的时间</td>\n</tr>\n<tr>\n<td>质量</td>\n<td>代码复杂度</td>\n<td>/</td>\n<td>测试时的用用例分支数量</td>\n</tr>\n<tr>\n<td>质量</td>\n<td>代码内聚度</td>\n<td>/</td>\n<td>某个功能模块在功能上的管理程度</td>\n</tr>\n<tr>\n<td>质量</td>\n<td>代码耦合度</td>\n<td>/</td>\n<td>一个类所引用的对象数量，或者其他评估标准</td>\n</tr>\n<tr>\n<td>质量</td>\n<td>测试覆盖率</td>\n<td>百分比</td>\n<td>测试代码对逻辑分支的覆盖率</td>\n</tr>\n<tr>\n<td>质量</td>\n<td>测试运行成功率</td>\n<td>百分比</td>\n<td>自动化测试本身正常运行的次数</td>\n</tr>\n<tr>\n<td>质量</td>\n<td>自动化测试率</td>\n<td>百分比</td>\n<td>自动化测试占总测试量的比例</td>\n</tr>\n<tr>\n<td>环境</td>\n<td>构建开发环境时长</td>\n<td>小时</td>\n<td>开发人员在裸机上搭建开发环境时间</td>\n</tr>\n<tr>\n<td>环境</td>\n<td>构建集成环境时长</td>\n<td>小时</td>\n<td>申请资源到集成环境搭建所需时间</td>\n</tr>\n<tr>\n<td>环境</td>\n<td>环境变更频率</td>\n<td>次 / 月</td>\n<td>使用环境变更频率（测试 / 类生产）</td>\n</tr>\n<tr>\n<td>部署</td>\n<td>部署时长</td>\n<td>小时</td>\n<td>测试完成到部署到生产环境完成所需时间</td>\n</tr>\n<tr>\n<td>部署</td>\n<td>部署失败率</td>\n<td>次 / 月</td>\n<td>部署失败次数</td>\n</tr>\n<tr>\n<td>组织</td>\n<td>新员工代码贡献速率</td>\n<td>天 / 千行</td>\n<td>新员工提交代码的速度</td>\n</tr>\n<tr>\n<td>组织</td>\n<td>迭代参能趋势</td>\n<td>个 / 迭代</td>\n<td>累计完成需求数量</td>\n</tr>\n<tr>\n<td>组织</td>\n<td>工程师人均支撑能力</td>\n<td>万个（次）/ 日 / 人</td>\n<td>每个工程师支撑的日活跃用户（日 API 使用次数）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"系统差异划分\"><a class=\"anchor\" href=\"#系统差异划分\">#</a> 系统差异划分</h3>\n<ul>\n<li>\n<p>通用业务：极少变化，通用的业务。</p>\n</li>\n<li>\n<p>差异业务：和竞品有差异的业务，已经明确业务细节的实现。</p>\n</li>\n<li>\n<p>创新业务：实现快速产出，证明功能有效性并不断优化。</p>\n</li>\n</ul>\n<h2 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h2>\n<ul>\n<li>Gartner 分层应用策略</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务架构阅读笔记",
                "微服务"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%B8%89%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/",
            "url": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%B8%89%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF/",
            "title": "三、微服务关键技术",
            "date_published": "2020-12-10T09:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"微服务关键技术\"><a class=\"anchor\" href=\"#微服务关键技术\">#</a> 微服务关键技术</h1>\n<h1 id=\"服务设计\"><a class=\"anchor\" href=\"#服务设计\">#</a> 服务设计</h1>\n<h3 id=\"服务划分\"><a class=\"anchor\" href=\"#服务划分\">#</a> 服务划分</h3>\n<p>服务的划分原则：</p>\n<ul>\n<li>单一职责：一个服务只处理一件事。</li>\n<li>服务依赖：对不同层级业务进行划分，避免服务循环依赖。</li>\n<li>服务自治：考虑如何让团队参与服务的整个生命周期来治理服务。</li>\n</ul>\n<p>服务划分策略：</p>\n<ul>\n<li>\n<p>基于业务功能：组队、工会、聊天等进行业务划分。</p>\n</li>\n<li>\n<p>基于数据模型：读写需求、存储时间、数据类型等。</p>\n</li>\n<li>\n<p>基于限界上下文：根据业务的上下文需求对业务进行划分，例如同样是聊天，组队聊天和工会聊天就是两种不同的上下文。</p>\n</li>\n<li>\n<p>基于非功能因素：</p>\n<ul>\n<li>可复用性：安全校验，身份验证。</li>\n<li>资源使用：偏计算、偏 IO...</li>\n<li>交付频率</li>\n<li>可伸缩性</li>\n</ul>\n</li>\n</ul>\n<p>衡量服务划分的合理性：</p>\n<ul>\n<li>服务能否独立交付</li>\n<li>服务团队规模：人数不能够过多。</li>\n<li>是否违背服务依赖关系：<strong>核心业务可靠性是否受到非核心业务影响</strong>。</li>\n<li><strong>是否满足单一职责</strong></li>\n</ul>\n<h2 id=\"服务实现\"><a class=\"anchor\" href=\"#服务实现\">#</a> 服务实现</h2>\n<ul>\n<li>\n<p>资源定义：可以理解为通信时传输的<strong>内容</strong>以及<strong>格式</strong>。</p>\n</li>\n<li>\n<p>业务逻辑：对于业务行为的抽象。</p>\n<ul>\n<li>业务模型：对于业务内的角色进行的建模，例如 NPC、技能、场景</li>\n<li>模型存储：对于模型数据的存储格式和数据库选型。是  <code>json</code>  还行  <code>str</code> ，是  <code>mysql</code>  还是  <code>mongodb</code></li>\n<li>网关集成：传输协议的出入口，统一的协议转发。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务间通信\"><a class=\"anchor\" href=\"#服务间通信\">#</a> 服务间通信📲</h3>\n<ul>\n<li>通信方式：\n<ul>\n<li>异步：发送请求后，无需阻塞等待结果</li>\n<li>同步：发送请求后，需要阻塞等待结果</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"通信机制\"><a class=\"anchor\" href=\"#通信机制\">#</a> 通信机制</h4>\n<ul>\n<li>同步通信机制：RPC 相比于 REST 性能上更加优。\n<ul>\n<li>RPC（远程过程调用）：通过发送二进制数据，实现调用远端接口</li>\n<li>REST（表述性状态转移）：以 HTTP 协议为基础，把结果定义为资源的数据传输。\n<ul>\n<li>资源：信息类的实体对象</li>\n<li>表述：资源在特定时机下的状态</li>\n<li>状态转移：客户端通过和服务器交互<strong>资源</strong>的<strong>表述</strong>来使得服务端实现<strong>状态转移</strong></li>\n<li>统一接口：REST 基于 HTTP 的四个基本操作：GET、POST、PUT、DELETE。\n<ul>\n<li>GET：获取资源</li>\n<li>POST：创建资源</li>\n<li>PUT：更新资源</li>\n<li>DELETE：删除资源</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>异步通信机制\n<ul>\n<li>基于消息的异步协作 —— 消息队列\n<ul>\n<li>持久性：消息可能保存在内存、磁盘或者数据库</li>\n<li>排队标准：先进先出...</li>\n<li>安全策略：权限隔离</li>\n<li>清理策略</li>\n<li>处理通知：消息处理完成后需要通知回复请求方</li>\n<li>访问形式：\n<ul>\n<li>拉模式（消费者定期拉取）：处理非及时任务，性能平滑，常用于解耦。</li>\n<li>推模式（生产者主动通知）：处理及时任务，耦合度较高，容易出现峰值。</li>\n</ul>\n</li>\n<li>消息队列的优点：\n<ul>\n<li>服务间解耦</li>\n<li>异步通信</li>\n<li>消息持久化及容灾恢复</li>\n</ul>\n</li>\n<li>消息队列的缺点：\n<ul>\n<li>提高系统复杂度</li>\n<li>对于平台或者协议存在依赖</li>\n<li>使用、维护成本高</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"服务设计模式\"><a class=\"anchor\" href=\"#服务设计模式\">#</a> 服务设计模式</h3>\n<h4 id=\"链式模式\"><a class=\"anchor\" href=\"#链式模式\">#</a> 链式模式</h4>\n<p>根据业务内数据的流向来拆分服务（面向过程拆分）。</p>\n<ul>\n<li>缺点：链路越长，越影响响应时间和成功率。</li>\n</ul>\n<h4 id=\"聚合器模式\"><a class=\"anchor\" href=\"#聚合器模式\">#</a> 聚合器模式</h4>\n<p>类似服务转发中心，对所有服务进行转发。</p>\n<ul>\n<li>优点：可以让代码更加清晰，快速了解调用流程。</li>\n<li>缺点：容易出现性能瓶颈和单点故障，且无法保证数据一致性。</li>\n</ul>\n<h4 id=\"事件溯源模式\"><a class=\"anchor\" href=\"#事件溯源模式\">#</a> 事件溯源模式</h4>\n<p>以消息队列为核心的事件驱动模型，结构类似聚合模式，区别在于用事件同步增量，而非最终状态</p>\n<ul>\n<li>优点：明确的修改记录，支持回退。</li>\n<li>缺点：强一致性系统不适用，同步增量会出现一步错步步错的问题。</li>\n</ul>\n<h4 id=\"cqrs读写分离模式\"><a class=\"anchor\" href=\"#cqrs读写分离模式\">#</a> CQRS（读写分离）模式</h4>\n<p>提供多个数据源（数据库），其中一部分负责数据修改和同步其他数据源，另一部分负责提供数据读取服务。</p>\n<ul>\n<li>优点：扩展和可用性较好。</li>\n<li>缺点：实现成本高，无法保证数据的强一致。</li>\n</ul>\n<h3 id=\"服务接入\"><a class=\"anchor\" href=\"#服务接入\">#</a> 服务接入</h3>\n<ul>\n<li>边缘服务接入（第三方应用）</li>\n<li>API 网关（客户端对于服务的调用）\n<ul>\n<li>请求路由：定位需要提供的服务来源。</li>\n<li>协议转换：把外部不统一的请求转化为内部系统的统一格式。</li>\n<li>公共功能：限流、认证、安全等公共功能。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据一致性\"><a class=\"anchor\" href=\"#数据一致性\">#</a> 数据一致性</h3>\n<h4 id=\"三阶段提交策略\"><a class=\"anchor\" href=\"#三阶段提交策略\">#</a> 三阶段提交策略</h4>\n<p>发起修改者在进行修改之前，需要通知被修改方（避免阻塞引入超时机制）</p>\n<p>锁住资源避免外界脏改（保证原子操作）。</p>\n<p>在操作完成后释放锁，失败则回滚操作。</p>\n<ul>\n<li>发起事务操作申请</li>\n<li>预提交</li>\n<li>提交</li>\n</ul>\n<h4 id=\"tcctry-cancel-confirm模式\"><a class=\"anchor\" href=\"#tcctry-cancel-confirm模式\">#</a> TCC (Try-Cancel-Confirm) 模式</h4>\n<p>操作补偿模式，尝试去执行，失败了就回滚。</p>\n<h4 id=\"sagas模式\"><a class=\"anchor\" href=\"#sagas模式\">#</a> Sagas 模式</h4>\n<p>和 TCC 类型，用于处理较长流程的事务，其中某一个子任务失败都会终止任务，触发回滚。</p>\n<h3 id=\"身份认证与鉴权\"><a class=\"anchor\" href=\"#身份认证与鉴权\">#</a> 身份认证与鉴权</h3>\n<p>前两种方式的校验存储都是存放在服务器，第三种则是存放在客户端。</p>\n<ul>\n<li>分布式 Session：把身份认证的 Session 缓存在 redis 等缓存中，减少查表压力。</li>\n<li>单点登录（SSO）：单点授权 Token，提供访问权限。</li>\n<li>无状态 Token：用户第一次访问时校验身份，客户端本地保存 Token（Cookie）, 下次校验直接发送本地 Cookie。</li>\n</ul>\n<h2 id=\"服务治理\"><a class=\"anchor\" href=\"#服务治理\">#</a> 服务治理</h2>\n<h3 id=\"注册发现\"><a class=\"anchor\" href=\"#注册发现\">#</a> 注册发现</h3>\n<ul>\n<li>手动注册实例地址的成本高</li>\n<li>无法识别服务器重启后网络地址变化</li>\n</ul>\n<h4 id=\"服务注册发现的核心机制\"><a class=\"anchor\" href=\"#服务注册发现的核心机制\">#</a> 服务注册发现的核心机制</h4>\n<ul>\n<li>将实例信息注册至注册中心</li>\n<li>获取服务器实例列表</li>\n<li>实现服务间的通信</li>\n</ul>\n<h4 id=\"服务发现方式\"><a class=\"anchor\" href=\"#服务发现方式\">#</a> 服务发现方式</h4>\n<ul>\n<li>客户端发现（服务发现逻辑再客户端）\n<ul>\n<li>服务提供者实例向注册中心注册地址信息。</li>\n<li>客户端通过查询注册中心，获取服务提供者地址列表。</li>\n<li>客户端基于获取的地址，向服务提供者发起请求。</li>\n<li>优点：响应速度快。</li>\n<li>缺点：实现较为复杂。</li>\n</ul>\n</li>\n<li>服务端发现（服务发现逻辑再服务端）\n<ul>\n<li>服务提供者实例向注册中心注册地址信息。</li>\n<li>客户端向服务发送请求，请求通过服务器的负载均衡。</li>\n<li>负载均衡根据服务注册中心查找对应的服务地址。</li>\n<li>负载均衡根据服务地址把请求进行转发。</li>\n<li>优点：客户端的复杂度降低。</li>\n<li>缺点：响应速度慢。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"负载均衡\"><a class=\"anchor\" href=\"#负载均衡\">#</a> 负载均衡</h3>\n<h4 id=\"负载均衡实现方式\"><a class=\"anchor\" href=\"#负载均衡实现方式\">#</a> 负载均衡实现方式</h4>\n<ul>\n<li>服务端负载均衡（负载均衡逻辑再服务器实现）\n<ul>\n<li>好处：客户端无感知。</li>\n<li>坏处：系统可用性高度依赖负载均衡的可用性。</li>\n</ul>\n</li>\n<li>客户端负载均衡（负载均衡逻辑再客户端实现）\n<ul>\n<li>好处：性能较好。</li>\n<li>坏处：不同的 C/S 结构，对于不同编程语言的适配较为困难。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"负载均衡策略\"><a class=\"anchor\" href=\"#负载均衡策略\">#</a> 负载均衡策略</h4>\n<ul>\n<li>随机策略：随机分配到不同的机器。</li>\n<li>轮询策略：根据一定的顺序分配到不同的机器。</li>\n<li>权重策略：根据各个机器的分配权重，对请求进行分流。</li>\n<li>响应时间策略：根据各个服务器的响应时间进行动态变更。</li>\n<li>会话保持类型的策略（长连接，有状态的情况）：\n<ul>\n<li>源地址 hash：通过 ip 进行固定的 hash</li>\n<li>Cookie 识别：在返回结果中加入特定字符串。</li>\n<li>基于 session：再负载均衡器中对历史链路进行缓存。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"配置管理\"><a class=\"anchor\" href=\"#配置管理\">#</a> 配置管理</h3>\n<ul>\n<li>基础设施的连接信息</li>\n<li>协作服务的地址信息</li>\n<li>业务行为的配置参数</li>\n<li>与特性相关的信息</li>\n</ul>\n<p>在代码中硬编码配置信息也是一种选择，不过往往维护成本和可读性就会有所下降。而且管理起来比较困难，改动也不太可控。</p>\n<h4 id=\"微服务配置管理的挑战\"><a class=\"anchor\" href=\"#微服务配置管理的挑战\">#</a> 微服务配置管理的挑战</h4>\n<ul>\n<li>对于涉及多个服务的配置信息的变更，如何有效的一次性完成配置。</li>\n<li>对于某个服务的多个实例的配置信息的变更，如何有效的一次性完成配置。</li>\n</ul>\n<h4 id=\"微服务的配置管理策略\"><a class=\"anchor\" href=\"#微服务的配置管理策略\">#</a> 微服务的配置管理策略</h4>\n<ul>\n<li>去中心式化的配置管理：各个服务团队单独维护自己服务的配置信息，对于服务较少的情况下较为有效，对于团队成员的能力和责任有一定要求。</li>\n<li>集中化的配置管理：转门的团队和人员，对所有服务的配置进行统一管理。</li>\n</ul>\n<h4 id=\"多实例的配置信息变更流程\"><a class=\"anchor\" href=\"#多实例的配置信息变更流程\">#</a> 多实例的配置信息变更流程</h4>\n<ul>\n<li>配置管理员修改配置提交到配置中心。</li>\n<li>配置中心检测配置信息变更后对其中一个实例进行配置变更请求。</li>\n<li>实例收到配置变更请求后，开始配置更新。</li>\n<li>更新完成后把更新请求存储在消息代理中通过广播的形式通知给其他实例。</li>\n<li>其他实例收到请求后开始配置更新。</li>\n</ul>\n<h3 id=\"容错机制\"><a class=\"anchor\" href=\"#容错机制\">#</a> 容错机制</h3>\n<h4 id=\"限流令牌算法\"><a class=\"anchor\" href=\"#限流令牌算法\">#</a> 限流（令牌算法）</h4>\n<ul>\n<li>设定阈值：超出部分拒绝提供服务。</li>\n<li>次要服务降级：通过禁用其他服务来提高某些重要服务的承载。</li>\n<li>消息队列：对峰值请求进行平滑处理。</li>\n<li>延迟执行优先级低的请求：和降级类似。</li>\n</ul>\n<h4 id=\"超时与重试\"><a class=\"anchor\" href=\"#超时与重试\">#</a> 超时与重试</h4>\n<ul>\n<li>取消。长期的超时表示服务可能失效，不如直接取消。</li>\n<li>重试。短期网络故障导致超时，可用重试。</li>\n<li>延迟后重试。故障原因是因为负载问题，则可用考虑延时重试。</li>\n</ul>\n<p>在明知道重试可能无果的情况下，不但不能解决问题，反而会使得服务器雪上加霜❄️。常见的引发服务器雪崩的原因：</p>\n<ul>\n<li>服务提供者不可用。</li>\n<li>服务过载，重试加大流量。</li>\n<li>服务消费者不可用。</li>\n</ul>\n<h4 id=\"隔离\"><a class=\"anchor\" href=\"#隔离\">#</a> 隔离</h4>\n<ul>\n<li>防止引发服务级联故障。减少一个服务异常，引发其他服务故障。</li>\n<li>发生服务故障时，保留部分功能。让其他服务能继续运转。</li>\n</ul>\n<h4 id=\"熔断和回退\"><a class=\"anchor\" href=\"#熔断和回退\">#</a> 熔断和回退</h4>\n<p>说到熔断，就不得不提及「断路器」:</p>\n<ul>\n<li>关闭状态：默认情况下处于关闭状态。在某条链路某段时间的失败请求数超过一定数量后开启。</li>\n<li>打开状态：此状态下，不再向服务提供者发送请求。并启动超时计时器。</li>\n<li>半开状态：计时器超时后，断路器变更为半开状态，能够允许少量的请求发送。如果依旧失败，则继续置为打开状态。如果成功次数超过阈值，则调整为关闭状态。更像是一颗墙头草🌱</li>\n</ul>\n<h2 id=\"服务运维\"><a class=\"anchor\" href=\"#服务运维\">#</a> 服务运维</h2>\n<h3 id=\"监控与告警️\"><a class=\"anchor\" href=\"#监控与告警️\">#</a> 监控与告警⚠️</h3>\n<h4 id=\"监控机制与实现\"><a class=\"anchor\" href=\"#监控机制与实现\">#</a> 监控机制与实现</h4>\n<p>面临的挑战：</p>\n<ul>\n<li>基础设施规模的增加：单点到集群，中控，调度，服务节点演化，节点数量和节点类型增加。</li>\n<li>监控数据来源的分散：从单个机器收集信息到服务器集群。</li>\n<li>监控指标的多样性：CPU 使用、性能、响应时间、其他节点状态等等。</li>\n<li>监控指标数据量大：节点数量增加直接导致监控数据量的增加。</li>\n</ul>\n<h4 id=\"微服务的监控策略\"><a class=\"anchor\" href=\"#微服务的监控策略\">#</a> 微服务的监控策略</h4>\n<p>组成部分：</p>\n<ul>\n<li>数据收集：采样监控信息，转发至聚合模块。</li>\n<li>数据聚合：对数据进行聚合，通常采用消息队列的形式。根据不同指标，分存在不同的存储模块。</li>\n<li>数据存储：可用采用时间序列数据库，对数据进行存储。</li>\n<li>数据展示：读取数据存储模块数据进行可视化。</li>\n</ul>\n<h4 id=\"监控所涉及的指标\"><a class=\"anchor\" href=\"#监控所涉及的指标\">#</a> 监控所涉及的指标</h4>\n<ul>\n<li>\n<p>服务器资源监控</p>\n<ul>\n<li>CPU</li>\n<li>内存</li>\n<li>磁盘 IO 等</li>\n</ul>\n</li>\n<li>\n<p>服务器性能监控</p>\n<ul>\n<li>响应时间</li>\n<li>健康状况</li>\n<li>负载情况等</li>\n</ul>\n</li>\n<li>\n<p>业务监控</p>\n<ul>\n<li>消息队列数量</li>\n<li>各功能模块访问次数</li>\n<li>用户留存率等</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"告警机制与实现\"><a class=\"anchor\" href=\"#告警机制与实现\">#</a> 告警机制与实现</h4>\n<ul>\n<li>告警策略\n<ul>\n<li>告警级别</li>\n<li>告警通知人</li>\n<li>告警通知方式</li>\n<li>告警服务</li>\n</ul>\n</li>\n<li>告警分级：根据警报的严重程度进行划分，例如内存泄漏导致内存吃满、磁盘空间不足等就较为严重，而显示错误，表现异常，乱码等就比较轻微。</li>\n<li>通知策略：常见方式有电话、短信、邮件等。</li>\n<li>消除策略：对于一些经常性的问题，如网络波动等，可能会造成短时间的请求超时，以致服务失效，这种情况下的报警可用进行选择性的屏蔽。</li>\n</ul>\n<h3 id=\"调用链跟踪\"><a class=\"anchor\" href=\"#调用链跟踪\">#</a> 调用链跟踪🔗</h3>\n<p>对于一些比较复杂的业务，中间会牵涉到多个服务节点之间的通信，常见的通信方法是通过 RPC，但是出错后往往很难定位源头。如何获取整个 RPC 的调用链路可用有效的提高调试成本。同时了解调用链路还可以用于分析各个节点的性能情况。</p>\n<h4 id=\"调用链跟踪原理\"><a class=\"anchor\" href=\"#调用链跟踪原理\">#</a> 调用链跟踪原理</h4>\n<p>对每个服务节点指定一个唯一的  <code>span_id</code> ，每次源头（客户端请求，某个服务节点发起）的调用会生成一个唯一的  <code>trace_id</code>  ，并记录下调用方和被调方的信息，通过日志的形式。后续会通过一个数据中心对所有调用的日志进行汇总，通过  <code>trace_id</code>  便可以对某一次的调用链路进行分析。</p>\n<h3 id=\"日志聚合\"><a class=\"anchor\" href=\"#日志聚合\">#</a> 日志聚合📟</h3>\n<p>解决问题：</p>\n<ul>\n<li>日志分散，查找困难。</li>\n<li>迁移繁琐，缺乏统一规范。</li>\n</ul>\n<h4 id=\"日志聚合服务的原理\"><a class=\"anchor\" href=\"#日志聚合服务的原理\">#</a> 日志聚合服务的原理</h4>\n<ul>\n<li>各个服务节点的 agent 系统通过收集各个节点的数据。</li>\n<li>将数据以事件流的方式发送给日志服务器。</li>\n<li>日志服务器对日志进行归纳整理，部分数据转交给大数据处理。</li>\n</ul>\n<div class=\"note warning\">\n<ul>\n<li>服务间传递请求的唯一标识（每个处理函数一个单独的标识 —— 函数名 / 函数名简写）</li>\n<li>服务本身的唯一标识（每个服务一个单独的服务标识 —— 服务名）</li>\n<li>日志收集工具（Fluentd、Logstash）</li>\n<li>日志聚合工具（ElasticSearch）</li>\n</ul>\n</div>\n<h2 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h2>\n<ul>\n<li>事件风暴（领域驱动设计的核心概念之一）</li>\n<li>令牌算法（常用于限流）</li>\n<li>HAL（Hypertext ApplicationLanguage），一种轻量级的超文本应用描述协议。</li>\n<li>时间序列数据库（Time Series DataBase，简称 TSDB）</li>\n<li>分布式链路跟踪</li>\n<li>探针（代码 hook，在特定情况下触发的埋点事件）<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb3ppbGxhemcuY29tLzIwMTYvMDQvYXBtLXB5dGhvbi1hZ2VudC1wcmluY2lwbGUuaHRtbA==\">探针实现原理</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务架构阅读笔记",
                "微服务"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%BA%8C%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/",
            "url": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%BA%8C%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/",
            "title": "二、微服务生态系统",
            "date_published": "2020-12-05T02:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"微服务生态系统\"><a class=\"anchor\" href=\"#微服务生态系统\">#</a> 微服务生态系统</h1>\n<h2 id=\"微服务生态\"><a class=\"anchor\" href=\"#微服务生态\">#</a> 微服务生态</h2>\n<h3 id=\"接入层\"><a class=\"anchor\" href=\"#接入层\">#</a> 接入层</h3>\n<ul>\n<li>升级成本高：后台服务多变，客户端如何配合调整。</li>\n<li>传输效率低：客户端和多个服务器建立链接 or 中心服务器转发。</li>\n<li>协议一致性：客户端需要适配不同服务的协议传输格式。</li>\n</ul>\n<h3 id=\"业务层\"><a class=\"anchor\" href=\"#业务层\">#</a> 业务层</h3>\n<ul>\n<li>服务拆分：如何有效的拆分各个服务，保证微服务优势前提下降低开发成本。</li>\n<li>服务实现：服务之间差异如何调配。</li>\n<li>服务间通信：服务与服务之间的通信（RPC、消息队列、REST）</li>\n<li>数据一致性：如何保证多个服务器的数据一致。</li>\n</ul>\n<h3 id=\"支撑层\"><a class=\"anchor\" href=\"#支撑层\">#</a> 支撑层</h3>\n<ul>\n<li>服务器地址频繁变更问题：伸缩扩展的微服务架构势必会让服务器 ip 频繁变更，如何可以让客户端和各个服务之间能够感知。</li>\n<li>如何做到负载均衡：保证每个服务器的负载合理分配。</li>\n<li>如何让降低服务器配置变更成本：合理利用服务器的配置，减少成本。</li>\n<li>如何监控系统稳定：保证系统的信息实时被监控。</li>\n<li>容灾问题如何解决：高负载情况下如何对服务进行降级，熔断等。</li>\n<li>如何管理日志：统筹各个服务器的日志信息。</li>\n</ul>\n<h3 id=\"基础设施\"><a class=\"anchor\" href=\"#基础设施\">#</a> 基础设施</h3>\n<ul>\n<li>快速构建可伸缩、自恢复的基础设施</li>\n<li>支持可用性、稳定性、可靠性、性能和安全。</li>\n</ul>\n<h4 id=\"基础设施抽象层\"><a class=\"anchor\" href=\"#基础设施抽象层\">#</a> 基础设施抽象层</h4>\n<ul>\n<li>IaaS（Infrastructure as a Service）以服务的形式提供服务器。</li>\n<li>PaaS 应用基础设施服务 —— 中间件。</li>\n<li>CaaS 容器即服务，通过容器部署复杂的多层次服务。</li>\n</ul>\n<h2 id=\"工程实践\"><a class=\"anchor\" href=\"#工程实践\">#</a> 工程实践</h2>\n<h3 id=\"交付流水线\"><a class=\"anchor\" href=\"#交付流水线\">#</a> 交付流水线</h3>\n<ul>\n<li>提交阶段：通过 hook 对提交代码进行规范检测。</li>\n<li>构建阶段：对代码编译，单元测试。</li>\n<li>验证阶段：生产环境下进行验证，包括但不限于性能、安全、功能等方面。</li>\n<li>发布阶段：代码更新到正式环境运行。</li>\n</ul>\n<h4 id=\"持续集成持续交付\"><a class=\"anchor\" href=\"#持续集成持续交付\">#</a> 持续集成 &amp;&amp; 持续交付</h4>\n<ul>\n<li>持续集成：一种软件开发实践，通过频繁的集成代码，并进行测试，快速发现问题。</li>\n<li>持续交付：提高持续集成的效率，使得持续集成自动化，快速、高效且可靠的推进。</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务架构阅读笔记",
                "微服务"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%B8%80%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BB%BC%E8%BF%B0/",
            "url": "https://allengx.gitee.io/computer-science/study/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E4%B8%80%E3%80%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BB%BC%E8%BF%B0/",
            "title": "一、微服务架构综述",
            "date_published": "2020-12-01T12:46:25.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"微服务架构综述\"><a class=\"anchor\" href=\"#微服务架构综述\">#</a> 微服务架构综述</h1>\n<h2 id=\"serverless无服务器架构\"><a class=\"anchor\" href=\"#serverless无服务器架构\">#</a> Serverless（无服务器架构）</h2>\n<ul>\n<li>BaaS（后端即服务）。完全依赖第三方应用程序管理服务端逻辑和状态的「应用程序」。</li>\n<li>FaaS（函数即服务）。以事件驱动、无状态的方式运行在第三方管理的容器的「应用逻辑」。</li>\n</ul>\n<h3 id=\"serverless优势\"><a class=\"anchor\" href=\"#serverless优势\">#</a> Serverless 优势：</h3>\n<ul>\n<li>自带简单的运行环境（Python/java/Ruby）。</li>\n<li>部署时间短。</li>\n<li>容器资源限量（内存 1.5G，磁盘 512M，生命周期 5 分钟）。</li>\n<li>事件驱动，灵活。</li>\n<li>自动伸缩。</li>\n<li>按照请求次数和资源用量收费，实惠。</li>\n<li>「零」维护成本。</li>\n<li>安全风险低。</li>\n</ul>\n<h2 id=\"service-mesh服务网格\"><a class=\"anchor\" href=\"#service-mesh服务网格\">#</a> Service Mesh (服务网格)</h2>\n<p>用于实现各个服务节点之间的可靠通信，基于 Sidecar 模式的轻量级部署。</p>\n<ul>\n<li>控制面：用于管理下层业务正常运转的控制链路。</li>\n<li>数据面：用于上层业务之间的通讯的传输链路。</li>\n</ul>\n<h3 id=\"istio\"><a class=\"anchor\" href=\"#istio\">#</a> Istio</h3>\n<p>目前公认的提供服务网格功能最为强大的开源工具。</p>\n<ul>\n<li>Pilot：流量管理，负责服务器间请求路由，注册发现和故障处理。</li>\n<li>Mixer：将策略和 Envoy 进行映射，收集日志，监控指标。</li>\n<li>Istio-Auth：身份认证，保证通讯安全。</li>\n</ul>\n<p><strong>Envoy：是专为大型现代 SOA（面向服务架构）架构设计的 L7 代理和通信总线。该项目源于以下理念：</strong></p>\n<blockquote>\n<p>网络对应用程序来说应该是透明的。当网络和应用程序出现问题时，应该很容易确定问题的根源。</p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "微服务架构阅读笔记",
                "微服务"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/python/Pydantic%E6%95%B0%E6%8D%AE%E6%9C%89%E6%95%88%E6%80%A7%E9%AA%8C%E8%AF%81/",
            "url": "https://allengx.gitee.io/computer-science/study/python/Pydantic%E6%95%B0%E6%8D%AE%E6%9C%89%E6%95%88%E6%80%A7%E9%AA%8C%E8%AF%81/",
            "title": "",
            "date_published": "2020-11-16T11:16:09.105Z",
            "content_html": "<h1 id=\"pydantic-数据有效性验证\"><a class=\"anchor\" href=\"#pydantic-数据有效性验证\">#</a> Pydantic 数据有效性验证</h1>\n<h2 id=\"性能不太好\"><a class=\"anchor\" href=\"#性能不太好\">#</a> 性能不太好</h2>\n<p>要做数据校验，就免不了多余的性能消耗，pydantic 也不例外（不过在这点上，pydantic 的性能表现也优于其他库）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> timeit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">id</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token string\">'Use(id=1,name=\"123\")'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">globals</span><span class=\"token operator\">=</span><span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token string\">'User(id=1,name=\"123\")'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">globals</span><span class=\"token operator\">=</span><span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>output<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">0.3781897000000001</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">2.9784895000000002</span></pre></td></tr></table></figure><blockquote>\n<p>对象创建速度差了将近十倍。</p>\n</blockquote>\n<h2 id=\"basemodel\"><a class=\"anchor\" href=\"#basemodel\">#</a> BaseModel</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>User<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>User<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%8D%81%E4%B8%89%E3%80%81%E5%9C%A8%E8%BE%B9%E7%95%8C%E5%A4%84%E6%80%9D%E8%80%83/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%8D%81%E4%B8%89%E3%80%81%E5%9C%A8%E8%BE%B9%E7%95%8C%E5%A4%84%E6%80%9D%E8%80%83/",
            "title": "十三、在边界处思考",
            "date_published": "2020-11-14T05:43:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"在边界处思考\"><a class=\"anchor\" href=\"#在边界处思考\">#</a> 在边界处思考🤔</h2>\n<p><mark>如何充分利用语言特性，更好的处理编码时的边界情况。</mark></p>\n<h3 id=\"化繁为简尽量统一你的代码逻辑减少不必要的-if\"><a class=\"anchor\" href=\"#化繁为简尽量统一你的代码逻辑减少不必要的-if\">#</a> 化繁为简，尽量统一你的代码逻辑，减少不必要的  <code>if</code></h3>\n<h4 id=\"获取原谅比许可简单eafp\"><a class=\"anchor\" href=\"#获取原谅比许可简单eafp\">#</a> 获取原谅比许可简单 (EAFP)</h4>\n<p>相比于担心犯错而对每个错误进行规避，尝试接受和处理错误往往显得更 Pythonic 。</p>\n<p>所以，每当你想凭直觉写下  <code>if else</code>  来处理边界情况时，先考虑下使用  <code>try</code>  来捕获异常是不是更合适。毕竟，Pythonista 们总是喜欢 “吃感冒药 💊” 胜过 “看天气预报”。😅</p>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">counter_ap</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"计算列表里面每个元素出现的数量\"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> l<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># 主流程：累加计数器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> key <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># 边界情况：当元素第一次出现时，先初始化值为 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 执行效率上也优于上一种方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">counter_af</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> l<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\"># 总是直接执行主流程：累加计数器</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\"># 边界情况：当元素第一次出现时会报错 KeyError，此时进行初始化</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr></table></figure></div></details>\n<h4 id=\"当容器内容不存在时-defaultdict-将是一个不错的选择\"><a class=\"anchor\" href=\"#当容器内容不存在时-defaultdict-将是一个不错的选择\">#</a> 当容器内容不存在时， defaultdict 将是一个不错的选择</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">counter_by_collections</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    result <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> l<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr></table></figure><h4 id=\"使用-setdefault-取值并修改\"><a class=\"anchor\" href=\"#使用-setdefault-取值并修改\">#</a> 使用 setdefault 取值并修改</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    d<span class=\"token punctuation\">[</span><span class=\"token string\">'values'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    d<span class=\"token punctuation\">[</span><span class=\"token string\">'values'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#------------ good ------------    </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>d<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">'values'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"使用-dictpop-删除不存在的键\"><a class=\"anchor\" href=\"#使用-dictpop-删除不存在的键\">#</a> 使用 dict.pop 删除不存在的键</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">del</span> d<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># 忽略 key 不存在的情况</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span> key <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\td<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#------------ good ------------  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>d<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"当列表切片越界时\"><a class=\"anchor\" href=\"#当列表切片越界时\">#</a> 当列表切片越界时</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sum_list</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"对列表的前 limit 个元素求和</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># 如果 limit 过大，设置为数组长度避免越界</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> limit <span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        limit <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>limit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#------------ good ------------   </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sum_list</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>limit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"好用又危险的-or-操作符\"><a class=\"anchor\" href=\"#好用又危险的-or-操作符\">#</a> 好用又危险的 “or” 操作符</h3>\n<p>因为  <code>a or b or c or ...</code>  这样的表达式，会返回这些变量里第一个布尔值为真的值，直到最后一个为止。如果都是假值那么返回最后一个假值。</p>\n<p>所以下面这种写法往往可以简化你的代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 仅当 extra_context 不为 None 时，将其追加进 context 中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> extra_context<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    context<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>extra_context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#------------ good ------------    </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>context<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>extra_context <span class=\"token keyword\">or</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"不要手动去做数据校验\"><a class=\"anchor\" href=\"#不要手动去做数据校验\">#</a> 不要手动去做数据校验</h3>\n<p>在数据校验这块，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9weWRhbnRpYy1kb2NzLmhlbHBtYW51YWwuaW8v\">pydantic</span> 模块是一个不错的选择。如果用它来做校验，代码可以被简化成这样:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">input_a_number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"要求用户输入一个 0-100 的数字，如果无效则重新输入</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        number <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please input a number (0-100): '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">#  此处往下的三条 if 语句都是输入值的边界校验代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> number<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input can not be empty!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> number<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your input is not a valid number!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please input a number between 0 and 100!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        number <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Your number is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>number<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#------------ good ------------   </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel<span class=\"token punctuation\">,</span> conint<span class=\"token punctuation\">,</span> ValidationError</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">NumberInput</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\"># 使用类型注解 conint 定义 number 属性的取值范围</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    number<span class=\"token punctuation\">:</span> conint<span class=\"token punctuation\">(</span>ge<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> le<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">input_a_number_with_pydantic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        number <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please input a number (0-100): '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\"># 实例化为 pydantic 模型，捕获校验错误异常</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            number_input <span class=\"token operator\">=</span> NumberInput<span class=\"token punctuation\">(</span>number<span class=\"token operator\">=</span>number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">except</span> ValidationError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        number <span class=\"token operator\">=</span> number_input<span class=\"token punctuation\">.</span>number</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Your number is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>number<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"不要忘记做数学计算\"><a class=\"anchor\" href=\"#不要忘记做数学计算\">#</a> 不要忘记做数学计算</h3>\n<p><mark>善于使用 Python 提供的数学库。</mark></p>\n<p>例如： <code>abs()</code> 、 <code>math.floor()</code>  等等。我们应该记住，不要写出  <code>if value &lt; 0: value = -value</code>  这种 “边界判断代码”，直接使用  <code>abs(value)</code>  就好，不要重新发明绝对值运算。</p>\n<h3 id=\"扩展阅读\"><a class=\"anchor\" href=\"#扩展阅读\">#</a> 扩展阅读</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qZWZma251cHAuY29tL2Jsb2cvMjAxMy8wMi8wNi93cml0ZS1jbGVhbmVyLXB5dGhvbi11c2UtZXhjZXB0aW9ucy8=\">Write Cleaner Python: Use Exceptions</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9weWRhbnRpYy1kb2NzLmhlbHBtYW51YWwuaW8v\">pydantic</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%8D%81%E4%BA%8C%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8E%9F%E5%88%99/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%8D%81%E4%BA%8C%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8E%9F%E5%88%99/",
            "title": "十二、面向对象代码的原则",
            "date_published": "2020-11-14T03:24:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"面向对象代码的原则\"><a class=\"anchor\" href=\"#面向对象代码的原则\">#</a> 面向对象代码的原则🐘</h2>\n<h3 id=\"python-对-oop-的支持\"><a class=\"anchor\" href=\"#python-对-oop-的支持\">#</a> Python 对 OOP 的支持：</h3>\n<p>Python 语言虽然拥有类、继承、多态等核心 OOP 特性，但和那些完全基于 OOP 思想设计的编程语言 *（比如 Java）* 相比，它在 OOP 支持方面做了很多简化工作。比如它 <strong>没有严格的类私有成员，没有接口（Interface）对象</strong> 等。</p>\n<p>而与此同时，Python 灵活的函数对象、鸭子类型等许多动态特性又让一些在其他语言中很难做到的事情变得非常简单。这些语言间的差异共同导致了一个结果：<em>很多经典的设计模式到了 Python 里，就丢失了那个 “味道”，实用性也大打折扣。</em></p>\n<p>拿大家最熟悉的单例模式来说。你可以花上一大把时间，来学习如何在 Python 中利用  <code>__new__</code>  方法或元类 *（metaclass）* 来实现单例设计模式，但最后你会发现，自己 95% 的需求都可以通过直接定义一个模块级全局变量来搞定。</p>\n<p>所以，与具体化的 <strong>设计模式</strong> 相比，我觉得一些更为抽象的 <strong>设计原则</strong> 适用性更广、更适合运用到 Python 开发工作中。而谈到关于 OOP 的设计原则，「SOLID」 是众多原则中最有名的一个。</p>\n<h3 id=\"solid-设计原则\"><a class=\"anchor\" href=\"#solid-设计原则\">#</a> SOLID 设计原则</h3>\n<h4 id=\"s单一职责原则\"><a class=\"anchor\" href=\"#s单一职责原则\">#</a> S：单一职责原则</h4>\n<p><mark>每个类都应该只有一种职责</mark></p>\n<p>如果某个类违反了 “单一职责原则”，那意味着我们经常会因为不同的原因去修改它。这可能会导致不同功能之间相互影响。比如，可能我在某天调整了页面解析逻辑，却发现输出的文件格式也全部乱掉了。</p>\n<h4 id=\"o开放-关闭原则\"><a class=\"anchor\" href=\"#o开放-关闭原则\">#</a> O：开放 - 关闭原则</h4>\n<p><mark>你应该可以在不修改某个类的前提下，扩展它的行为</mark></p>\n<h5 id=\"常用手段\"><a class=\"anchor\" href=\"#常用手段\">#</a> 常用手段</h5>\n<ul>\n<li>\n<p>使用类继承来改造代码：<strong>找到父类中会变动的部分，将其抽象成新的方法（或属性），最终允许新的子类来重写它以改变类的行为。</strong></p>\n</li>\n<li>\n<p>使用组合与依赖注入来改造代码：<strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGVwZW5kZW5jeV9pbmplY3Rpb24=\">依赖注入（Dependency injection）</span>把不断变化的逻辑以参数的形式传递，达到以不变应万变</strong>。</p>\n</li>\n<li>\n<p>使用数据驱动思想来改造代码：<strong>将经常变动的东西，完全以数据的方式抽离出来。当需求变动时，只改动数据，代码逻辑保持不动。</strong></p>\n</li>\n</ul>\n<h4 id=\"l里氏替换原则\"><a class=\"anchor\" href=\"#l里氏替换原则\">#</a> <strong>L：里氏替换原则</strong></h4>\n<p><mark>当你使用继承时，子类（派生类）对象应该可以在程序中替代父类（基类）对象使用，而不破坏程序原本的功能。</mark></p>\n<h5 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项：</h5>\n<ul>\n<li>子类返回值类型和父类请「保持一致」。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"普通用户模型类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">list_related_posts</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"查询所有与之相关的帖子 ID</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        \"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>post<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token keyword\">for</span> post <span class=\"token keyword\">in</span> session<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Admin</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"管理员用户类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">list_related_posts</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Iterable<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\"># 管理员与所有的帖子都有关，为了节约内存，使用生成器返回帖子 ID</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> post <span class=\"token keyword\">in</span> session<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">yield</span> post<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span></pre></td></tr></table></figure><ul>\n<li>子类的特殊特点需要能够在父类里体现。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"普通用户模型类\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">allow_deactivate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"是否允许被停用\"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">deactivate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"将当前用户停用\"\"\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>is_active <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Admin</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"管理员用户类\"\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">allow_deactivate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\"># 管理员用户不允许被停用</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr></table></figure><h4 id=\"d依赖倒置原则\"><a class=\"anchor\" href=\"#d依赖倒置原则\">#</a> D：依赖倒置原则</h4>\n<p><mark>高层模块不应该依赖于低层模块，二者都应该依赖于抽象。</mark></p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201114111158204.png\" alt=\"image-20201114111158204\" /></p>\n<p>依赖抽象就避免不了抽象类的使用：python 提供的 <a href=\"https://docs.python.org/3/library/abc.html\"> <code>abc</code> </a> 模块就可以轻松定义出一个抽象类。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> abc <span class=\"token keyword\">import</span> ABCMeta<span class=\"token punctuation\">,</span> abstractmethod</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HNWebPage</span><span class=\"token punctuation\">(</span>metaclass<span class=\"token operator\">=</span>ABCMeta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"抽象类：Hacker New 站点页面</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@abstractmethod</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get_text</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">raise</span> NotImplementedError</pre></td></tr></table></figure><p>但抽象类并不是唯一解，对于 Python 语言来说，你只要定义了有类似函数功能的模块，并遵守约定，那么它就可以正常工作，抽象类只是对规范的一个强限制。</p>\n<p>事实上，抽象的好处显而易见：<strong>它解耦了高层模块和低层模块间的依赖关系，让代码变得更灵活。</strong> 但抽象同时也带来了额外的编码与理解成本。所以，了解何时 <strong>不</strong> 抽象与何时抽象同样重要。<strong>只有对代码中那些现在或未来会发生变化的东西进行抽象，才能获得最大的收益。</strong></p>\n<h4 id=\"i接口隔离原则\"><a class=\"anchor\" href=\"#i接口隔离原则\">#</a> I：接口隔离原则</h4>\n<p><mark>客户（client）应该不依赖于它不使用的方法。</mark></p>\n<p>举个例子，当我们在 web 站点里判断用户请求的 Cookies 或头信息是否包含某个标记值时，我们经常直接写一个依赖整个  <code>request</code>  对象的函数：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">is_new_visitor</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> HttpRequest<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"从 Cookies 判断是否新访客</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span>COOKIES<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'is_new_visitor'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'y'</span></pre></td></tr></table></figure><p>但事实上，除了  <code>.COOKIES</code>  以外， <code>is_new_visitor</code>  根本就不需要  <code>request</code>  对象里面的任何其他内容。“用户请求对象（request）” 是一个比 “Cookie 字典（request.COOKIES）” 复杂得多的抽象。我们完全可以把函数改成只接收 cookies 字典。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">is_new_visitor</span><span class=\"token punctuation\">(</span>cookies<span class=\"token punctuation\">:</span> Dict<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"从 Cookies 判断是否新访客</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> cookies<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'is_new_visitor'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'y'</span></pre></td></tr></table></figure><h3 id=\"扩展阅读\"><a class=\"anchor\" href=\"#扩展阅读\">#</a> 扩展阅读</h3>\n<ul>\n<li>Python 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2NvbGxlY3Rpb25zLmFiYy5odG1s\">collections.abc</span> 模块里面有非常多的小接口</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%8D%81%E4%B8%80%E3%80%81%E9%AB%98%E6%95%88%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%8D%81%E4%B8%80%E3%80%81%E9%AB%98%E6%95%88%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/",
            "title": "十一、高效操作文件",
            "date_published": "2020-11-12T12:04:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"高效操作文件\"><a class=\"anchor\" href=\"#高效操作文件\">#</a> 高效操作文件📁</h2>\n<h3 id=\"使用-pathlib-模块\"><a class=\"anchor\" href=\"#使用-pathlib-模块\">#</a> 使用 pathlib 模块</h3>\n<p>正常的文件操作通常会用到 os 模块，但其实 Python 提供了一个更加高效的模块 ——pathlib</p>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os<span class=\"token punctuation\">.</span>path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">unify_ext_with_os_path</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"统一目录下的 .txt 文件名后缀为 .csv</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> filename <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        basename<span class=\"token punctuation\">,</span> ext <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> ext <span class=\"token operator\">==</span> <span class=\"token string\">'.txt'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            abs_filepath <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            os<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span>abs_filepath<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>basename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.csv'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#------------ good ------------     </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">unify_ext_with_pathlib</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> fpath <span class=\"token keyword\">in</span> Path<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'*.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        fpath<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span>fpath<span class=\"token punctuation\">.</span>with_suffix<span class=\"token punctuation\">(</span><span class=\"token string\">'.csv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h4 id=\"其他用法\"><a class=\"anchor\" href=\"#其他用法\">#</a> 其他用法</h4>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li>路径组合</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ old ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 😑 旧朋友：使用 os.path 模块</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> os<span class=\"token punctuation\">.</span>path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo.txt'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'/tmp/foo.txt'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#------------ new ------------ </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># ✨ 新潮流：使用 / 运算符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Path<span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token string\">'foo.txt'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>PosixPath<span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp/foo.txt'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>读取文件</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ old ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 标准做法，使用 with open (...) 打开文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#------------ new ------------ </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 使用 pathlib 可以让这件事情变得更简单</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">(</span><span class=\"token string\">'foo.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read_text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>os 路径的操作同样兼容 pathlib</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> p <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 可以直接对 Path 类型对象 p 进行 join</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token string\">'foo.txt'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'/tmp/foo.txt'</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"掌握如何流式读取大文件\"><a class=\"anchor\" href=\"#掌握如何流式读取大文件\">#</a> 掌握如何流式读取大文件</h3>\n<p>常规做法 with open read 三板斧可能已经被我们用烂了。但对于解决行数少，每行内容多的文件时，往往不够高效。</p>\n<p>例如：统计一个只有一行，且大小有 5G 的文件里的数字  <code>9</code>  的个数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">count_nine</span><span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"计算文件里包含多少个数字 '9'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#这一行的内容会有 5 个 G 的大小，想想就令人头大😑</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            count <span class=\"token operator\">+=</span> line<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> count</pre></td></tr></table></figure><p>通过按照固定字节大小的方式读取可以有效地提高性能。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI2l0ZXI=\">iter(iterable)</span> 是一个用来构造迭代器的内建函数。当我们使用  <code>iter(callable, sentinel)</code>  的方式调用它时，会返回一个特殊的对象，迭代它将不断产生可调用对象 callable 的调用结果，直到结果为 setinel 时，迭代终止。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">chunked_file_reader</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> block_size<span class=\"token operator\">=</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"生成器函数：分块读取文件内容，使用 iter 函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 首先使用 partial (fp.read, block_size) 构造一个新的无需参数的函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># 循环将不断返回 fp.read (block_size) 调用结果，直到其为 '' 时终止</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> chunk <span class=\"token keyword\">in</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>partial<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">,</span> block_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">yield</span> chunk</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">count_nine_v1</span><span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>fname<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> chunk <span class=\"token keyword\">in</span> chunked_file_reader<span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            count <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> count</pre></td></tr></table></figure><h3 id=\"设计接受文件对象的函数\"><a class=\"anchor\" href=\"#设计接受文件对象的函数\">#</a> 设计接受文件对象的函数</h3>\n<p>代码是否能够方便的编写单元测试，将反映出一个代码设计的好坏。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 这样的代码必须让我们依赖一个文件名，从而进行单元测试。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">count_vowels</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"统计某个文件中，包含元音字母(aeiou)的数量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    VOWELS_LETTERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> line<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> char<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> VOWELS_LETTERS<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> count</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># OUTPUT: 16</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count_vowels<span class=\"token punctuation\">(</span><span class=\"token string\">'small_file.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 脱离文件名的限制，只需要传入一个 file 对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">count_vowels_v2</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"统计某个文件中，包含元音字母(aeiou)的数量</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    VOWELS_LETTERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> line<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> char<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> VOWELS_LETTERS<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> count</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 修改函数后，打开文件的职责被移交给了上层函数调用者</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'small_file.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count_vowels_v2<span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>模拟测试将会变得更加方便，只需要模拟 file 对象而非真实文件</p>\n<ul>\n<li>StringIO 是一个不错的选择</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 注意：以下测试函数需要使用 pytest 执行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> pytest</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> io <span class=\"token keyword\">import</span> StringIO</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>parametrize</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">\"content,vowels_count\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># 使用 pytest 提供的参数化测试工具，定义测试参数列表</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># (文件内容，期待结果)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token string\">'HELLO WORLD!'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token string\">'你好，世界'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test_count_vowels_v2</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> vowels_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\"># 利用 StringIO 构造类文件对象 \"file\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> StringIO<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">assert</span> count_vowels_v2<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> vowels_count</pre></td></tr></table></figure><ul>\n<li>或者试试 subprocess 的 stdout</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> subprocess</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 统计 /tmp 下面所有一级子文件名（目录名）有多少元音字母</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/tmp'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># p.stdout 是一个流式类文件对象，可以直接传入函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># OUTPUT: 42</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count_vowels_v2<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"如何编写兼容二者的函数\"><a class=\"anchor\" href=\"#如何编写兼容二者的函数\">#</a> 如何编写兼容二者的函数</h4>\n<ul>\n<li>技能满足单元测试，有更能符合真实的使用 xml.etree.ElementTree 是个不错的选择</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> parser<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"*source* is a file name or file object, *parser* is an optional parser</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    close_source <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># 通过判断 source 是否有 \"read\" 属性来判定它是不是 “类文件对象”</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 如果不是，那么调用 open 函数打开它并负担起在函数末尾关闭它的责任</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        source <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        close_source <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%8D%81%E3%80%81%E5%81%9A%E4%B8%80%E4%B8%AA%E7%B2%BE%E9%80%9A%E8%A7%84%E5%88%99%E7%9A%84%E7%8E%A9%E5%AE%B6/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%8D%81%E3%80%81%E5%81%9A%E4%B8%80%E4%B8%AA%E7%B2%BE%E9%80%9A%E8%A7%84%E5%88%99%E7%9A%84%E7%8E%A9%E5%AE%B6/",
            "title": "十、做一个精通规则的玩家",
            "date_published": "2020-11-12T03:30:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"做一个精通规则的玩家\"><a class=\"anchor\" href=\"#做一个精通规则的玩家\">#</a> 做一个精通规则的玩家🎮</h2>\n<h3 id=\"python-里的规则\"><a class=\"anchor\" href=\"#python-里的规则\">#</a> Python 里的规则</h3>\n<p>Python 是一门初见简单、深入后愈觉复杂的语言。拿 Python 里最重要的「对象」概念来说，Python 为其定义了多到让你记不全的规则，比如：</p>\n<ul>\n<li>定义了  <code>__str__</code>  方法的对象，就可以使用  <code>str()</code>  函数来返回可读名称</li>\n<li>定义了  <code>__next__</code>  和  <code>__iter__</code>  方法的对象，就可以被循环迭代</li>\n<li>定义了  <code>__bool__</code>  方法的对象，在进行布尔判断时就会使用自定义的逻辑</li>\n<li>... ...</li>\n</ul>\n<p>** 熟悉规则，并让自己的代码适应这些规则，可以帮助我们写出更地道的代码，事半功倍的完成工作。** 下面，让我们来看一个有关适应规则的故事</p>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li>从一份去过 「普吉岛」 的名单中挑选出没有去过新西兰的人员联系方式</li>\n<li>为此，我们提供了两份人员名单 —— 去过「新西兰」、去过「普吉岛」</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 去过普吉岛的人员数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>users_visited_phuket = <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sirena\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Gross\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"phone_number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"650-568-0388\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"date_visited\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2018-03-14\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ashcraft\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"phone_number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"412-334-4380\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"date_visited\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2014-09-16\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ... ...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre># 去过新西兰的人员数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>users_visited_nz = <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Justin\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Malcom\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"phone_number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"267-282-1964\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"date_visited\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2011-03-13\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"first_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Albert\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"last_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Potter\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"phone_number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"702-249-3714\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"date_visited\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2013-09-11\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ... ...</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><blockquote>\n<p>通过直觉产生的代码⚡️</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_potential_customers_v1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"找到去过普吉岛但是没去过新西兰的人</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> phuket_record <span class=\"token keyword\">in</span> users_visited_phuket<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        is_potential <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> nz_record <span class=\"token keyword\">in</span> users_visited_nz<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> phuket_record<span class=\"token punctuation\">[</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nz_record<span class=\"token punctuation\">[</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> \\</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    phuket_record<span class=\"token punctuation\">[</span><span class=\"token string\">'last_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nz_record<span class=\"token punctuation\">[</span><span class=\"token string\">'last_name'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> \\</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    phuket_record<span class=\"token punctuation\">[</span><span class=\"token string\">'phone_number'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nz_record<span class=\"token punctuation\">[</span><span class=\"token string\">'phone_number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                is_potential <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> is_potential<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">yield</span> phuket_record</pre></td></tr></table></figure><blockquote>\n<p>通过集合进行查询优化💡</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_potential_customers_v2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"找到去过普吉岛但是没去过新西兰的人，性能改进版</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 首先，遍历所有新西兰访问记录，创建查找索引</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    nz_records_idx <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">[</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">[</span><span class=\"token string\">'last_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">[</span><span class=\"token string\">'phone_number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> rec <span class=\"token keyword\">in</span> users_visited_nz</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> rec <span class=\"token keyword\">in</span> users_visited_phuket<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        key <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rec<span class=\"token punctuation\">[</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">[</span><span class=\"token string\">'last_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rec<span class=\"token punctuation\">[</span><span class=\"token string\">'phone_number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> key <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> nz_records_idx<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">yield</span> rec</pre></td></tr></table></figure><blockquote>\n<p>利用集合特性简化规则📏</p>\n</blockquote>\n<p>对去过「新西兰」、去过「普吉岛」的人员名单取差集。 <code>set(「新西兰」) - set(「普吉岛」)</code></p>\n<blockquote>\n<p>通过 dataclass 实现  <code>__hash__</code>  和  <code>__eq__</code>  后的最终效果👍</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclass</span><span class=\"token punctuation\">(</span>unsafe_hash<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">VisitRecordDC</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    first_name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    last_name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    phone_number<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 跳过 “访问时间” 字段，不作为任何对比条件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    date_visited<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> field<span class=\"token punctuation\">(</span><span class=\"token builtin\">hash</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> compare<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_potential_customers_v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>VisitRecordDC<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> users_visited_phuket<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> \\</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>VisitRecordDC<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> users_visited_nz<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"其他规则如何影响我们\"><a class=\"anchor\" href=\"#其他规则如何影响我们\">#</a> 其他规则如何影响我们</h3>\n<h4 id=\"使用-__format__-做对象字符串格式化\"><a class=\"anchor\" href=\"#使用-__format__-做对象字符串格式化\">#</a> 使用  <code>__format__</code>  做对象字符串格式化</h4>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__format__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> format_spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> format_spec <span class=\"token operator\">==</span> <span class=\"token string\">'long'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old.'</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">elif</span> format_spec <span class=\"token operator\">==</span> <span class=\"token string\">'simple'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">)'</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'invalid format spec'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>piglei <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'piglei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'18'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0:simple&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>piglei<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0:long&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>piglei<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># ----- Output -----</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>piglei<span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>piglei <span class=\"token keyword\">is</span> <span class=\"token number\">18</span> years old<span class=\"token punctuation\">.</span></pre></td></tr></table></figure></div></details>\n<h4 id=\"使用-__getitem__-定义对象切片操作\"><a class=\"anchor\" href=\"#使用-__getitem__-定义对象切片操作\">#</a> 使用  <code>__getitem__</code>  定义对象切片操作</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Events</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> events<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> events</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">list_events_by_range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>end<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>events <span class=\"token operator\">=</span> Events<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token string\">'computer started'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token string\">'os launched'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token string\">'docker started'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'os stopped'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 判断是否有内容，打印第二个和第三个对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> events<span class=\"token punctuation\">.</span>is_empty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">.</span>list_events_by_range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Events</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> events<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> events</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"自定义长度，将会被用来做布尔判断\"\"\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"自定义切片方法\"\"\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\"># 直接将 slice 切片对象透传给 events 处理</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 判断是否有内容，打印第二个和第三个对象</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">if</span> events<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"链接\"><a class=\"anchor\" href=\"#链接\">#</a> 链接</h3>\n<p>Raymond Hettinger 在 PyCon 2015 上有过一次非常精彩的演讲： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj13Zi1CcUFqWmI4TQ==\">“Beyond PEP8 - Best practices for beautiful intelligible code”</span></p>\n<p>Python 对象模型规则可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9yZWZlcmVuY2UvZGF0YW1vZGVsLmh0bWw=\">官方文档</span> 找到，有点难读，但值得一读。</p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B9%9D%E3%80%81%E6%A8%A1%E5%9D%97/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B9%9D%E3%80%81%E6%A8%A1%E5%9D%97/",
            "title": "九、模块",
            "date_published": "2020-11-12T03:02:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"模块\"><a class=\"anchor\" href=\"#模块\">#</a> 模块📦</h2>\n<h3 id=\"环形依赖问题\"><a class=\"anchor\" href=\"#环形依赖问题\">#</a> 环形依赖问题</h3>\n<p>很多时候，模块间的相互依赖会导致 环 import。即：模块 A 里面 import 了模块 B. 同时，模块 B 里也 import 了模块 A。这时候问题便产生了。</p>\n<p><code>ImportError: cannot import name xx from xxx</code></p>\n<p>解决办法有很多，最常见的手段是把 import 放在某个需要用到的函数内，但往往这种方式也是最坏的。</p>\n<p>它纵容了一个不好的结构设计得以存活，当模块之间的依赖关系变得错综复杂，代码的可读性也随之下降 —— 代码产生了坏味道。</p>\n<p>较好的解决办法是重新审视你的代码结构，并寻求改变。</p>\n<details class=\"info\"><summary>示例</summary><div>\n<div class=\"note danger\">\n<p>问题结构：</p>\n</div>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>├── fancy_site</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>│   ├── __init__.py</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│   ├── marketing.py        # 与市场活动有关的内容</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│   └── users.py            # 与用户有关的内容</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>└── notify_users.py     # 脚本：发送积分通知</pre></td></tr></table></figure><p><span class=\"label success\">📜notify_users.py</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> fancy_site<span class=\"token punctuation\">.</span>users <span class=\"token keyword\">import</span> list_active_users</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> fancy_site<span class=\"token punctuation\">.</span>marketing <span class=\"token keyword\">import</span> query_user_points</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># do something...</span></pre></td></tr></table></figure><p><span class=\"label danger\">📜fancy_site/marketing.py</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>users <span class=\"token keyword\">import</span> User</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># do something...</span></pre></td></tr></table></figure><p><span class=\"label danger\">📜fancy_site/users.py</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>marketing <span class=\"token keyword\">import</span> send_sms</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># do something...</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201112103224285.png\" alt=\"image-20201112103224285\" /></p>\n<div class=\"note success\">\n<p>调整后的结构</p>\n</div>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>├── fancy_site</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>│   ├── __init__.py</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│   ├── msg_utils.py        # 发送通知相关的内容</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│   ├── marketing.py        # 与市场活动有关的内容</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>│   └── users.py            # 与用户有关的内容</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>└── notify_users.py     # 脚本：发送积分通知</pre></td></tr></table></figure><p><span class=\"label success\">📜fancy_site/users.py</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>msg_utils <span class=\"token keyword\">import</span> send_sms</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># do something...</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201112104427153.png\" alt=\"image-20201112104427153\" /></p>\n<p>我们仅仅只是把一个放置在 marketing 模块内的函数，迁移到了一个新的地方（msg_utils），便解决了这个严峻的问题。</p>\n</div></details>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%BA%8C%E3%80%81%E5%B0%8F%E6%9D%8E%E7%9A%84%E5%85%AC%E5%8F%B8%E7%94%9F%E6%B4%BB%E2%91%A0/",
            "url": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%BA%8C%E3%80%81%E5%B0%8F%E6%9D%8E%E7%9A%84%E5%85%AC%E5%8F%B8%E7%94%9F%E6%B4%BB%E2%91%A0/",
            "title": "二、小李的公司生活①",
            "date_published": "2020-11-11T15:50:15.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"二-小李的公司生活1\"><a class=\"anchor\" href=\"#二-小李的公司生活1\">#</a> 二、小李的公司生活①</h1>\n<h2 id=\"第5课-森もりさんは-七時しちじに-起おきます\"><a class=\"anchor\" href=\"#第5课-森もりさんは-七時しちじに-起おきます\">#</a> 第⑤课  <ruby>森<rp> (</rp><rt>もり</rt><rp>)</rp></ruby> さんは　 <ruby>七時<rp> (</rp><rt>しちじ</rt><rp>)</rp></ruby> に　 <ruby>起<rp> (</rp><rt>お</rt><rp>)</rp></ruby> きます</h2>\n<h3 id=\"语法解释\"><a class=\"anchor\" href=\"#语法解释\">#</a> 语法解释</h3>\n<h4 id=\"今いま-~-時じ-~-分ふんです\"><a class=\"anchor\" href=\"#今いま-~-時じ-~-分ふんです\">#</a> <ruby>今<rp> (</rp><rt>いま</rt><rp>)</rp></ruby>　～ <ruby>時<rp> (</rp><rt>じ</rt><rp>)</rp></ruby>　～ <ruby>分<rp> (</rp><rt>ふん</rt><rp>)</rp></ruby> です</h4>\n<p>意为现在是～时候</p>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li><ruby>今<rp> (</rp><rt>いま</rt><rp>)</rp></ruby>　 <ruby>四時<rp> (</rp><rt>よじ</rt><rp>)</rp></ruby>　 <ruby>三十分<rp> (</rp><rt>さんじゅっぷん</rt><rp>)</rp></ruby> です。（现在是 4 点 30 分）</li>\n</ul>\n</div></details>\n<h4 id=\"动ます动ません-动ました动ませんでした\"><a class=\"anchor\" href=\"#动ます动ません-动ました动ませんでした\">#</a> 「动」ます／「动」ません　❘「动」ました／「动」ませんでした</h4>\n<ul>\n<li>「动」ます／「动」ません：用于修饰现在、习惯性、未来的动作。前者表示肯定，后者表示否定</li>\n<li>「动」ました／「动」ませんでした：用于修饰过去的动作。前者表示肯定，后者表示否定</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li><ruby>森<rp> (</rp><rt>もり</rt><rp>)</rp></ruby> さんは　 <ruby>毎日<rp> (</rp><rt>まいにち</rt><rp>)</rp></ruby>　 <ruby>働<rp> (</rp><rt>はたら</rt><rp>)</rp></ruby> き　ます。（森先生每天工作）</li>\n<li><ruby>田中<rp> (</rp><rt>たなか</rt><rp>)</rp></ruby> さんは　 <ruby>今日<rp> (</rp><rt>きょう</rt><rp>)</rp></ruby>　<ruby>働<rp> (</rp><rt>はたら</rt><rp>)</rp></ruby> き　ません。（田中先生今天不工作）</li>\n<li><ruby>森<rp> (</rp><rt>もり</rt><rp>)</rp></ruby> さんは　 <ruby>先週<rp> (</rp><rt>せんしゅう</rt><rp>)</rp></ruby>　 <ruby>休<rp> (</rp><rt>やす</rt><rp>)</rp></ruby> み　ました。（森先生上周休息）</li>\n<li>わたしは　 <ruby>昨日<rp> (</rp><rt>きのう</rt><rp>)</rp></ruby>　<ruby>働<rp> (</rp><rt>はたら</rt><rp>)</rp></ruby> き　ませんでした。（我昨天没上班）</li>\n</ul>\n</div></details>\n<h4 id=\"名时间に-动\"><a class=\"anchor\" href=\"#名时间に-动\">#</a> 名「时间」に　「动」</h4>\n<p>表示动作发生的具体时间时，要用　 <code>に</code> 　来修饰</p>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li><ruby>森<rp> (</rp><rt>もり</rt><rp>)</rp></ruby> さんは　 <ruby>七時<rp> (</rp><rt>しちじ</rt><rp>)</rp></ruby> に　 <ruby>起<rp> (</rp><rt>お</rt><rp>)</rp></ruby> きます。（森先生七点起床）</li>\n<li><ruby>学校<rp> (</rp><rt>がっこう</rt><rp>)</rp></ruby> は　 <ruby>八時半<rp> (</rp><rt>はちじはん</rt><rp>)</rp></ruby> に　 <ruby>始<rp> (</rp><rt>はじ</rt><rp>)</rp></ruby> まります。（学校八点半开始上课）</li>\n</ul>\n</div></details>\n<h4 id=\"名时间から-名时间まで-动\"><a class=\"anchor\" href=\"#名时间から-名时间まで-动\">#</a> 名「时间」から　名「时间」まで 　「动」</h4>\n<p>表示某个动作发生在某个时间段。</p>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li>\n<p><ruby>森<rp> (</rp><rt>もり</rt><rp>)</rp></ruby> さんは　 <ruby>月曜日<rp> (</rp><rt>げつうび</rt><rp>)</rp></ruby> から　 <ruby>水曜日<rp> (</rp><rt>すいようび</rt><rp>)</rp></ruby> まで　 <ruby>休<rp> (</rp><rt>やす</rt><rp>)</rp></ruby> みました。</p>\n<p>——（森先生这个星期一到星期三已经休息了）</p>\n</li>\n</ul>\n</div></details>\n<h4 id=\"いつ-动ますか\"><a class=\"anchor\" href=\"#いつ-动ますか\">#</a> いつ　「动」ますか</h4>\n<p>用于询问某个动作发生的时间。如果想要询问具体的时间（具体到某年某月某日），需要在时间后面加　 <code>に</code></p>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li><ruby>試験<rp> (</rp><rt>しけん</rt><rp>)</rp></ruby> は　いつ　 <ruby>初<rp> (</rp><rt>はじ</rt><rp>)</rp></ruby> まりますか。（考试什么时候开始）</li>\n<li><ruby>仕事<rp> (</rp><rt>しごと</rt><rp>)</rp></ruby> は　 <ruby>何時<rp> (</rp><rt>なん</rt><rp>)</rp></ruby> じ　 <ruby>終<rp> (</rp><rt>お</rt><rp>)</rp></ruby> わりますか。（工作几点结束）</li>\n</ul>\n</div></details>\n<blockquote>\n<p>如询问持续性动作的开始或结束时间时， <code>いつ</code>  改用   <code>いつから</code> ， <code>に</code>  改用  <code>まで</code></p>\n</blockquote>\n<h4 id=\"は对比\"><a class=\"anchor\" href=\"#は对比\">#</a> は「对比」</h4>\n<p>隐含和以前或者和平常做对比</p>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li><ruby>小野<rp> (</rp><rt>おの</rt><rp>)</rp></ruby> さんは　 <ruby>今日<rp> (</rp><rt>きょう</rt><rp>)</rp></ruby> は　 <ruby>休<rp> (</rp><rt>やす</rt><rp>)</rp></ruby> みます。（小野女生今天休息）这里暗含昨天不休息，和昨天对比</li>\n<li><ruby>森<rp> (</rp><rt>もり</rt><rp>)</rp></ruby> さんは　 <ruby>毎日<rp> (</rp><rt>まいにち</rt><rp>)</rp></ruby>　 <ruby>何時<rp> (</rp><rt>なんじに</rt><rp>)</rp></ruby>　おけますか。（森先生你每天早晨几点起床）</li>\n</ul>\n<p>—— いつもは　 <ruby>七時<rp> (</rp><rt>しちじ</rt><rp>)</rp></ruby> ごろです。（我一般是 7 点左右起床）暗含和其他人对比，有相比于其他人之意</p>\n</div></details>\n<h3 id=\"词语讲解\"><a class=\"anchor\" href=\"#词语讲解\">#</a> 词语讲解</h3>\n<h4 id=\"人称在工作单位\"><a class=\"anchor\" href=\"#人称在工作单位\">#</a> 人称「在工作单位」</h4>\n<p>工作单位上的称呼，如：「上司」、「领导」、「经理」等...</p>\n<p>如果称呼别人公司员工的时候，需要在工作单位人称后面加上  <code>さん</code>  表示尊敬。</p>\n<h4 id=\"~-です\"><a class=\"anchor\" href=\"#~-です\">#</a> ~ です</h4>\n<p>已经明确的内容，可以用  <code>~ です</code>  进行简化。</p>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li><ruby>北京支社<rp> (</rp><rt>ぺきんししゃ</rt><rp>)</rp></ruby> は　 <ruby>何時<rp> (</rp><rt>なんじ</rt><rp>)</rp></ruby> に　 <ruby>始<rp> (</rp><rt>はじ</rt><rp>)</rp></ruby> まります。（北京分公司几点下班）</li>\n</ul>\n<p>—— <ruby>八時<rp> (</rp><rt>はちじ</rt><rp>)</rp></ruby> です。（八点「下班」。）</p>\n</div></details>\n<h4 id=\"毎朝まいあさ-何時なんじに-动\"><a class=\"anchor\" href=\"#毎朝まいあさ-何時なんじに-动\">#</a> <ruby>毎朝<rp> (</rp><rt>まいあさ</rt><rp>)</rp></ruby>　 <ruby>何時<rp> (</rp><rt>なんじ</rt><rp>)</rp></ruby> に　「动」</h4>\n<p>表示每天几天干...，如果  <code>每</code>  换成其他 比如  <code>前天，昨天，明天 </code> 等。可以在后面加上  <code>の</code>  修饰。否则不行。</p>\n<h4 id=\"~ごろ\"><a class=\"anchor\" href=\"#~ごろ\">#</a> ~ ごろ</h4>\n<p><code>ごろ</code> 和时间搭配的时候可以表示一个大概值，意为左右的意思</p>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li><ruby>昨日<rp> (</rp><rt>きのう</rt><rp>)</rp></ruby>　 <ruby>十二時半<rp> (</rp><rt>じゅうにじはん</rt><rp>)</rp></ruby> ごろ　 <ruby>寝<rp> (</rp><rt>ね</rt><rp>)</rp></ruby> ました。（昨晚，12 点半左右睡觉）</li>\n</ul>\n</div></details>\n<h3 id=\"时\"><a class=\"anchor\" href=\"#时\">#</a> 时</h3>\n<table>\n<thead>\n<tr>\n<th>1 時</th>\n<th>いちじ</th>\n<th>4 時</th>\n<th>よじ</th>\n<th>7 時</th>\n<th>しちじ</th>\n<th>10 時</th>\n<th>しゅうじ</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2 時</td>\n<td>にじ</td>\n<td>5 時</td>\n<td>ごじ</td>\n<td>8 時</td>\n<td>はちじ</td>\n<td>11 時</td>\n<td>しゅういちじ</td>\n</tr>\n<tr>\n<td>3 時</td>\n<td>さんじ</td>\n<td>6 時</td>\n<td>ろくじ</td>\n<td>9 時</td>\n<td>くじ</td>\n<td>12 時</td>\n<td>しゅうにじ</td>\n</tr>\n<tr>\n<td>0 時</td>\n<td>れいじ</td>\n<td>何時</td>\n<td>なんじ</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"分\"><a class=\"anchor\" href=\"#分\">#</a> 分</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">１分</th>\n<th style=\"text-align:center\">いちぷん</th>\n<th style=\"text-align:center\">4 分</th>\n<th style=\"text-align:center\">よんぷん</th>\n<th style=\"text-align:center\">7 分</th>\n<th style=\"text-align:center\">ななふん</th>\n<th style=\"text-align:center\">10 分</th>\n<th style=\"text-align:center\">じゅっぷん</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2 分</td>\n<td style=\"text-align:center\">にふん</td>\n<td style=\"text-align:center\">5 分</td>\n<td style=\"text-align:center\">ごふん</td>\n<td style=\"text-align:center\">8 分</td>\n<td style=\"text-align:center\">はっぷん</td>\n<td style=\"text-align:center\">11 分</td>\n<td style=\"text-align:center\">じゅういっぷん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3 分</td>\n<td style=\"text-align:center\">さんぷん</td>\n<td style=\"text-align:center\">6 分</td>\n<td style=\"text-align:center\">ろっぷん</td>\n<td style=\"text-align:center\">9 分</td>\n<td style=\"text-align:center\">きゅうふん</td>\n<td style=\"text-align:center\">15 分</td>\n<td style=\"text-align:center\">じゅうごふん</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30 分</td>\n<td style=\"text-align:center\">さんじゅっぷん／はん</td>\n<td style=\"text-align:center\">45 分</td>\n<td style=\"text-align:center\">よんじゅうごふん</td>\n<td style=\"text-align:center\">何分</td>\n<td style=\"text-align:center\">なんぷん</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"星期\"><a class=\"anchor\" href=\"#星期\">#</a> 星期</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">日曜日</th>\n<th style=\"text-align:center\">月曜日</th>\n<th style=\"text-align:center\">火曜日</th>\n<th style=\"text-align:center\">水曜日</th>\n<th style=\"text-align:center\">木曜日</th>\n<th style=\"text-align:center\">金曜日</th>\n<th style=\"text-align:center\">土曜日</th>\n<th style=\"text-align:center\">何曜日</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">にちようび</td>\n<td style=\"text-align:center\">げつようび</td>\n<td style=\"text-align:center\">かようび</td>\n<td style=\"text-align:center\">すいようび</td>\n<td style=\"text-align:center\">もくようび</td>\n<td style=\"text-align:center\">きんようび</td>\n<td style=\"text-align:center\">どようび</td>\n<td style=\"text-align:center\">なにょうび</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">星期日</td>\n<td style=\"text-align:center\">星期一</td>\n<td style=\"text-align:center\">星期二</td>\n<td style=\"text-align:center\">星期三</td>\n<td style=\"text-align:center\">星期四</td>\n<td style=\"text-align:center\">星期五</td>\n<td style=\"text-align:center\">星期六</td>\n<td style=\"text-align:center\">星期几</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其他时间名词\"><a class=\"anchor\" href=\"#其他时间名词\">#</a> 其他时间名词</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">おととい<br />前天</th>\n<th style=\"text-align:center\"><ruby>昨日<rp> (</rp><rt>きのう</rt><rp>)</rp></ruby><br />昨天</th>\n<th style=\"text-align:center\"><ruby>今日<rp> (</rp><rt>きょう</rt><rp>)</rp></ruby><br />今天</th>\n<th style=\"text-align:center\"><ruby>明日<rp> (</rp><rt>あした</rt><rp>)</rp></ruby><br />明天</th>\n<th style=\"text-align:center\"><ruby>明後日<rp> (</rp><rt>あさって</rt><rp>)</rp></ruby><br />后天</th>\n<th style=\"text-align:center\"><ruby>毎日<rp> (</rp><rt>まいにち</rt><rp>)</rp></ruby><br /></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">おとといの <ruby>朝<rp> (</rp><rt>あさ</rt><rp>)</rp></ruby><br />前天早晨</td>\n<td style=\"text-align:center\"><ruby>昨日<rp> (</rp><rt>きのう</rt><rp>)</rp></ruby> の<ruby>朝<rp> (</rp><rt>あさ</rt><rp>)</rp></ruby><br />昨天早上</td>\n<td style=\"text-align:center\"><ruby>今朝<rp> (</rp><rt>けさ</rt><rp>)</rp></ruby><br />今天早上</td>\n<td style=\"text-align:center\"><ruby>明日<rp> (</rp><rt>あした</rt><rp>)</rp></ruby> の <ruby>朝<rp> (</rp><rt>あさ</rt><rp>)</rp></ruby><br />明天早上</td>\n<td style=\"text-align:center\"><ruby>明後日<rp> (</rp><rt>あさって</rt><rp>)</rp></ruby> の <ruby>朝<rp> (</rp><rt>あさ</rt><rp>)</rp></ruby><br />后天早上</td>\n<td style=\"text-align:center\"><ruby>毎朝<rp> (</rp><rt>まいあさ</rt><rp>)</rp></ruby><br />每天早上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">おとといの <ruby>晩<rp> (</rp><rt>ばん</rt><rp>)</rp></ruby><br />前天晚上</td>\n<td style=\"text-align:center\"><ruby>昨夜<rp> (</rp><rt>ゆうべ</rt><rp>)</rp></ruby><br />昨天晚上</td>\n<td style=\"text-align:center\"><ruby>今晩<rp> (</rp><rt>こんばん</rt><rp>)</rp></ruby><br />今天晚上</td>\n<td style=\"text-align:center\"><ruby>明日<rp> (</rp><rt>あした</rt><rp>)</rp></ruby> の<ruby>晩<rp> (</rp><rt>ばん</rt><rp>)</rp></ruby><br />明天晚上</td>\n<td style=\"text-align:center\"><ruby>明後日<rp> (</rp><rt>あさって</rt><rp>)</rp></ruby> の<ruby>晩<rp> (</rp><rt>ばん</rt><rp>)</rp></ruby><br />后天晚上</td>\n<td style=\"text-align:center\"><ruby>毎晩<rp> (</rp><rt>まいばん</rt><rp>)</rp></ruby><br />每天晚上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><ruby>先<rp> (</rp><rt>せんせんしゅ</rt><rp>)</rp>々<rt></rt>週<rp> (</rp><rt>う</rt><rp>)</rp></ruby><br />上上周</td>\n<td style=\"text-align:center\"><ruby>先週<rp> (</rp><rt>せんしゅう</rt><rp>)</rp></ruby><br />上个周</td>\n<td style=\"text-align:center\"><ruby>今週<rp> (</rp><rt>こんしゅう</rt><rp>)</rp></ruby><br />这个周</td>\n<td style=\"text-align:center\"><ruby>来週<rp> (</rp><rt>らいしゅう</rt><rp>)</rp></ruby><br />下个周</td>\n<td style=\"text-align:center\">さ<ruby>来週<rp> (</rp><rt>らいしゅう</rt><rp>)</rp></ruby><br />下下个周</td>\n<td style=\"text-align:center\"><ruby>毎週<rp> (</rp><rt>まいしゅう</rt><rp>)</rp></ruby><br />每个星期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><ruby>先<rp> (</rp><rt>せんせんげ</rt><rp>)</rp>々<rt></rt>月<rp> (</rp><rt>つ</rt><rp>)</rp></ruby><br />上上月</td>\n<td style=\"text-align:center\"><ruby>先月<rp> (</rp><rt>せんげつ</rt><rp>)</rp></ruby><br />上个月</td>\n<td style=\"text-align:center\"><ruby>今月<rp> (</rp><rt>こんげつ</rt><rp>)</rp></ruby><br />这个月</td>\n<td style=\"text-align:center\"><ruby>来月<rp> (</rp><rt>らいげつ</rt><rp>)</rp></ruby><br />下个月</td>\n<td style=\"text-align:center\">さ<ruby>来月<rp> (</rp><rt>らいげつ</rt><rp>)</rp></ruby><br />下下个月</td>\n<td style=\"text-align:center\"><ruby>毎月<rp> (</rp><rt>まいつき</rt><rp>)</rp></ruby><br />每个月</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">おととし<br />前年</td>\n<td style=\"text-align:center\"><ruby>去年<rp> (</rp><rt>きょねん</rt><rp>)</rp></ruby><br />去年</td>\n<td style=\"text-align:center\"><ruby>今年<rp> (</rp><rt>ことし</rt><rp>)</rp></ruby><br />今年</td>\n<td style=\"text-align:center\"><ruby>来年<rp> (</rp><rt>らいなん</rt><rp>)</rp></ruby><br />明年</td>\n<td style=\"text-align:center\">さ<ruby>来年<rp> (</rp><rt>らいなん</rt><rp>)</rp></ruby><br />后年</td>\n<td style=\"text-align:center\"><ruby>毎年<rp> (</rp><rt>まいとし</rt><rp>)</rp></ruby><br />每年</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "日语",
                "学习笔记",
                "日语语法初级（上）",
                "日语语法"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%85%AB%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E6%8A%80%E5%B7%A7/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%85%AB%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E6%8A%80%E5%B7%A7/",
            "title": "八、装饰器的技巧",
            "date_published": "2020-11-11T12:55:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"装饰器的技巧\"><a class=\"anchor\" href=\"#装饰器的技巧\">#</a> 装饰器的技巧🎩</h2>\n<h3 id=\"尝试用类来实现装饰器\"><a class=\"anchor\" href=\"#尝试用类来实现装饰器\">#</a> 尝试用类来实现装饰器</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> functools</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DelayFunc</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>  duration<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">=</span> duration</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>func <span class=\"token operator\">=</span> func</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Wait for </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds...'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eager_call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Call without delay'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"装饰器：推迟某个函数的执行。同时提供 .eager_call 方法立即执行</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># 此处为了避免定义额外函数，直接使用 functools.partial 帮助构造</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\"># DelayFunc 实例</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> functools<span class=\"token punctuation\">.</span>partial<span class=\"token punctuation\">(</span>DelayFunc<span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token decorator annotation punctuation\">@delay</span><span class=\"token punctuation\">(</span>duration<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 这次调用将会延迟 2 秒</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 这次调用将会立即执行</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>add<span class=\"token punctuation\">.</span>eager_call<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"使用-wrapt-模块编写更扁平的装饰器\"><a class=\"anchor\" href=\"#使用-wrapt-模块编写更扁平的装饰器\">#</a> 使用 wrapt 模块编写更扁平的装饰器</h3>\n<p>有时候装饰器需要修饰 function、method、classmethod 时，我们不得不对装饰器进行调整，来适应新类型的函数。</p>\n<p>而  <code>wrapt</code>  可以快速地帮助我们改造装饰器以达到效果。此外，他还额外附加了 @functools.wraps () 的功能，能够保证正确的函数签名。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> wrapt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">provide_number</span><span class=\"token punctuation\">(</span>min_num<span class=\"token punctuation\">,</span> max_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@wrapt<span class=\"token punctuation\">.</span>decorator</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span>wrapped<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># 参数含义：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># - wrapped：被装饰的函数或类方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># - instance：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">#   - 如果被装饰者为普通类方法，该值为类实例</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">#   - 如果被装饰者为 classmethod 类方法，该值为类</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#   - 如果被装饰者为类 / 函数 / 静态方法，该值为 None</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\"># - args：调用时的位置参数（注意没有 * 符号）</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\"># - kwargs：调用时的关键字参数（注意没有 ** 符号）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        num <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span>min_num<span class=\"token punctuation\">,</span> max_num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\"># 无需关注 wrapped 是类方法或普通函数，直接在头部追加参数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        args <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> args</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> wrapper</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token decorator annotation punctuation\">@provide_number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">print_random_number</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@provide_number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">print_random_number</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo_1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@provide_number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">print_random_number</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>print_random_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>print_random_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Foo_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>print_random_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"装饰器并不是-装饰器模式\"><a class=\"anchor\" href=\"#装饰器并不是-装饰器模式\">#</a> 「装饰器」并不是 「装饰器模式」</h3>\n<p>装饰器只是语法糖，装饰器模式更像是 golang 里的中间件。通过函数的层层包裹达到扩展功能的目的。</p>\n<p>这是因为对象正在包围其他对象，它们共享相似的接口，并且装饰对象似乎掩盖或修改或注释了所包围的对象。</p>\n<blockquote>\n<p>Hint: 在 Python 官网上有一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9EZWNvcmF0b3JQYXR0ZXJu\">实现了装饰器模式的例子</span>，你可以读读这个例子来更好的了解它。</p>\n</blockquote>\n<h3 id=\"记得用-functoolswraps-装饰内层函数\"><a class=\"anchor\" href=\"#记得用-functoolswraps-装饰内层函数\">#</a> 记得用 functools.wraps () 装饰内层函数</h3>\n<p>保证函数保留正确的签名有时候可以避免不必要的麻烦。</p>\n<h3 id=\"修改外层变量时记得使用-nonlocal\"><a class=\"anchor\" href=\"#修改外层变量时记得使用-nonlocal\">#</a> 修改外层变量时记得使用 nonlocal</h3>\n<p>nonlocal 可以用来什么不属于 local 作用域内的变量，解析器会遵循 LEGB 的顺序进行查找。</p>\n<p>而默认不在 local 作用域的变量是只读的，修改则会创建一个新的对象。</p>\n<p>nonlocal 可以显示的把变量声明为「外层函数的局部变量」（E）。从而让修改得以生效。</p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B8%83%E3%80%81%E5%9C%B0%E9%81%93%E7%9A%84%E5%BE%AA%E7%8E%AF/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B8%83%E3%80%81%E5%9C%B0%E9%81%93%E7%9A%84%E5%BE%AA%E7%8E%AF/",
            "title": "七、地道的循环",
            "date_published": "2020-11-11T11:54:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"地道的循环️\"><a class=\"anchor\" href=\"#地道的循环️\">#</a> 地道的循环♻️</h2>\n<h3 id=\"使用函数修饰被迭代对象来优化循环\"><a class=\"anchor\" href=\"#使用函数修饰被迭代对象来优化循环\">#</a> 使用函数修饰被迭代对象来优化循环</h3>\n<ul>\n<li>使用 product 扁平化多层嵌套循环： <code>product()</code>  可以接收多个可迭代对象，然后根据它们的笛卡尔积不断生成结果</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    pools <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> pool <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> repeat</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> pool <span class=\"token keyword\">in</span> pools<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> result <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> pool<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> prod <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>prod<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_twelve</span><span class=\"token punctuation\">(</span>num_list1<span class=\"token punctuation\">,</span> num_list2<span class=\"token punctuation\">,</span> num_list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"从 3 个数字列表中，寻找是否存在和为 12 的 3 个数\"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> num1 <span class=\"token keyword\">in</span> num_list1<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> num2 <span class=\"token keyword\">in</span> num_list2<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">for</span> num3 <span class=\"token keyword\">in</span> num_list3<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> num1 <span class=\"token operator\">+</span> num2 <span class=\"token operator\">+</span> num3 <span class=\"token operator\">==</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token keyword\">return</span> num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> num3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> product</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_twelve_v2</span><span class=\"token punctuation\">(</span>num_list1<span class=\"token punctuation\">,</span> num_list2<span class=\"token punctuation\">,</span> num_list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> num3 <span class=\"token keyword\">in</span> product<span class=\"token punctuation\">(</span>num_list1<span class=\"token punctuation\">,</span> num_list2<span class=\"token punctuation\">,</span> num_list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> num1 <span class=\"token operator\">+</span> num2 <span class=\"token operator\">+</span> num3 <span class=\"token operator\">==</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> num3</pre></td></tr></table></figure></div></details>\n<ul>\n<li>使用 islice 实现循环内隔行处理： <code>islice(seq, start, end, step)</code>  函数和数组切片操作（ list [start:stop:step] ），有点像 C 风格里的 <code>for</code></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">islice</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># islice('ABCDEFG', 2) --> A B</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># islice('ABCDEFG', 2, 4) --> C D</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># islice('ABCDEFG', 2, None) --> C D E F G</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># islice('ABCDEFG', 0, None, 2) --> A C E G</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    start<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">,</span> step <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>start <span class=\"token keyword\">or</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>stop <span class=\"token keyword\">or</span> sys<span class=\"token punctuation\">.</span>maxsize<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>step <span class=\"token keyword\">or</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    it <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        nexti <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\"># Consume *iterable* up to the *start* position.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> element <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> element <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> nexti<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">yield</span> element</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                nexti <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\"># Consume to *stop*.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> element <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">pass</span></pre></td></tr></table></figure><details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">parse_titles</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"从隔行数据文件中读取内容 \"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">yield</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#------------ good ------------          </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> islice</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">parse_titles_v2</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> islice<span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">yield</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<ul>\n<li>使用 takewhile 替代 break 语句： <code>takewhile(predicate, iterable)</code>  会在迭代  <code>iterable</code>  的过程中不断使用当前对象作为参数调用  <code>predicate</code>  函数并测试返回结果，如果函数返回值为真，则生成当前对象，循环继续。否则立即中断当前循环。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">takewhile</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># takewhile(lambda x: x&lt;5, [1,4,6,4,1]) --> 1 4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> iterable<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> predicate<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">yield</span> x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr></table></figure><details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> user <span class=\"token keyword\">in</span> users<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 当第一个不合格的用户出现后，不再进行后面的处理</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_qualified<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># do something...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#------------ good ------------  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> takewhile</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> user <span class=\"token keyword\">in</span> takewhile<span class=\"token punctuation\">(</span>is_qualified<span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># do something...</span></pre></td></tr></table></figure></div></details>\n<ul>\n<li>使用生成器编写自己的修饰函数</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sum_even_only</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"对 numbers 里面所有的偶数求和\"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            result <span class=\"token operator\">+=</span> num</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">even_only</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">yield</span> num</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sum_even_only_v2</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"对 numbers 里面所有的偶数求和\"\"\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> even_only<span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        result <span class=\"token operator\">+=</span> num</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr></table></figure></div></details>\n<h3 id=\"按职责拆解循环体内复杂代码块\"><a class=\"anchor\" href=\"#按职责拆解循环体内复杂代码块\">#</a> 按职责拆解循环体内复杂代码块</h3>\n<p>循环内的很多操作，可能毫无关系，甚至循环本身和里面的操作关系也不大，这种时候可以考虑进行逻辑解耦。</p>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> datetime</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">award_active_users_in_last_30days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"获取所有在过去 30 天周末晚上 8 点到 10 点登录过的用户，为其发送奖励积分和通知\"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    days <span class=\"token operator\">=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> days_delta <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        dt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span>days_delta<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># 5: Saturday, 6: Sunday</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> dt<span class=\"token punctuation\">.</span>weekday<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        time_start <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        time_end <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\"># 转换为 unix 时间戳，之后的 ORM 查询需要</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ts_start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>mktime<span class=\"token punctuation\">(</span>time_start<span class=\"token punctuation\">.</span>timetuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ts_end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>mktime<span class=\"token punctuation\">(</span>time_end<span class=\"token punctuation\">.</span>timetuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\"># 查询用户并挨个发送 1000 奖励积分和通知</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> LoginRecord<span class=\"token punctuation\">.</span>filter_by_range<span class=\"token punctuation\">(</span>ts_start<span class=\"token punctuation\">,</span> ts_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\"># 这里可以添加复杂逻辑</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            send_awarding_points<span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            notify_nonsleep_users<span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">gen_weekend_ts_ranges</span><span class=\"token punctuation\">(</span>days_ago<span class=\"token punctuation\">,</span> hour_start<span class=\"token punctuation\">,</span> hour_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"生成过去一段时间内周六日特定时间段范围，并以 UNIX 时间戳返回\"\"\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> days_delta <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>days_ago<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        dt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span>days_delta<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\"># 5: Saturday, 6: Sunday</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> dt<span class=\"token punctuation\">.</span>weekday<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        time_start <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">,</span> hour_start<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        time_end <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">,</span> hour_end<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\"># 转换为 unix 时间戳，之后的 ORM 查询需要</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        ts_start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>mktime<span class=\"token punctuation\">(</span>time_start<span class=\"token punctuation\">.</span>timetuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        ts_end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>mktime<span class=\"token punctuation\">(</span>time_end<span class=\"token punctuation\">.</span>timetuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">yield</span> ts_start<span class=\"token punctuation\">,</span> ts_end</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">award_active_users_in_last_30days_v2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"发送奖励积分\"\"\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">for</span> ts_start<span class=\"token punctuation\">,</span> ts_end <span class=\"token keyword\">in</span> gen_weekend_ts_ranges<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> hour_start<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> hour_end<span class=\"token operator\">=</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> LoginRecord<span class=\"token punctuation\">.</span>filter_by_range<span class=\"token punctuation\">(</span>ts_start<span class=\"token punctuation\">,</span> ts_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            send_awarding_points<span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">notify_nonsleep_users_in_last_30days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"发送通知\"\"\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">for</span> ts_start<span class=\"token punctuation\">,</span> ts_end <span class=\"token keyword\">in</span> gen_weekend_ts_range<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> hour_start<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> hour_end<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> LoginRecord<span class=\"token punctuation\">.</span>filter_by_range<span class=\"token punctuation\">(</span>ts_start<span class=\"token punctuation\">,</span> ts_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            notify_user<span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'You should sleep more'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%85%AD%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%85%AD%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "六、异常处理",
            "date_published": "2020-11-11T08:39:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"异常处理️\"><a class=\"anchor\" href=\"#异常处理️\">#</a> 异常处理❗️</h2>\n<h3 id=\"只做最精确的异常捕获\"><a class=\"anchor\" href=\"#只做最精确的异常捕获\">#</a> 只做最精确的异常捕获</h3>\n<p>捕获异常并不是为了让你的代码不提示异常，而是为了解决你已经设想过的异常。</p>\n<p>如果一个异常并不在你的思考范围内，那么对异常的处理手段往往也会不那么有效，所以尽早暴露出来为好。</p>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\"># ... 其他逻辑代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tfp<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'save failed: unable to save title of </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>url<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> to </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>filename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tfp<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">except</span> IOError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'save failed: unable to write to file </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>filename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"别让异常破坏抽象一致性\"><a class=\"anchor\" href=\"#别让异常破坏抽象一致性\">#</a> 别让异常破坏抽象一致性</h3>\n<p>异常的内容或者说异常本身的抽象应该符合当时的使用场景。</p>\n<p>例如一个加载文件操作返回的异常最好是文件加载失败而不是 IO 失败。</p>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">process_image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>INVALID_IMAGE_UPLOADED</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">process_image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">raise</span> ImageOpenError<span class=\"token punctuation\">(</span>exc<span class=\"token operator\">=</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">foo_view_function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        process_image<span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">except</span> ImageOpenError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>INVALID_IMAGE_UPLOADED</pre></td></tr></table></figure></div></details>\n<h3 id=\"异常处理不应该喧宾夺主\"><a class=\"anchor\" href=\"#异常处理不应该喧宾夺主\">#</a> 异常处理不应该喧宾夺主</h3>\n<p>对不同的异常进行处理，会导致<strong>异常处理逻辑太多，以至于扰乱了代码核心逻辑</strong></p>\n<p>可以通过上下文管理器（context manager）来进行解决，通过 with 关键字。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">raise_api_error</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> captures<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>captures <span class=\"token operator\">=</span> captures</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\"># 该方法将在进入上下文时调用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> self</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_val<span class=\"token punctuation\">,</span> exc_tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\"># 该方法将在退出上下文时调用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\"># exc_type, exc_val, exc_tb 分别表示该上下文内抛出的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\"># 异常类型、异常值、错误栈</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> exc_type <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> exc_type <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>captures<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">raise</span> self<span class=\"token punctuation\">.</span>code <span class=\"token keyword\">from</span> exc_val</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">with</span> raise_api_error<span class=\"token punctuation\">(</span>KeyError<span class=\"token punctuation\">,</span> MyException<span class=\"token punctuation\">(</span><span class=\"token string\">\"do something fail with KeyError\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\"># do something...</span></pre></td></tr></table></figure><details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">upload_avatar</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"用户上传新头像\"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        avatar_file <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>FILES<span class=\"token punctuation\">[</span><span class=\"token string\">'avatar'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>AVATAR_FILE_NOT_PROVIDED</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       resized_avatar_file <span class=\"token operator\">=</span> resize_avatar<span class=\"token punctuation\">(</span>avatar_file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">except</span> FileTooLargeError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>AVATAR_FILE_TOO_LARGE</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">except</span> ResizeAvatarError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>AVATAR_FILE_INVALID</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatar <span class=\"token operator\">=</span> resized_avatar_file</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>INTERNAL_SERVER_ERROR</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">upload_avatar</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"用户上传新头像\"\"\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">with</span> raise_api_error<span class=\"token punctuation\">(</span>KeyError<span class=\"token punctuation\">,</span> <span class=\"token string\">'AVATAR_FILE_NOT_PROVIDED'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        avatar_file <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>FILES<span class=\"token punctuation\">[</span><span class=\"token string\">'avatar'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">with</span> raise_api_error<span class=\"token punctuation\">(</span>ResizeAvatarError<span class=\"token punctuation\">,</span> <span class=\"token string\">'AVATAR_FILE_INVALID'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            raise_api_error<span class=\"token punctuation\">(</span>FileTooLargeError<span class=\"token punctuation\">,</span> <span class=\"token string\">'AVATAR_FILE_TOO_LARGE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        resized_avatar_file <span class=\"token operator\">=</span> resize_avatar<span class=\"token punctuation\">(</span>avatar_file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">with</span> raise_api_error<span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">,</span> <span class=\"token string\">'INTERNAL_SERVER_ERROR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatar <span class=\"token operator\">=</span> resized_avatar_file</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%BA%94%E3%80%81%E8%AE%A9%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E6%8A%80%E5%B7%A7/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%BA%94%E3%80%81%E8%AE%A9%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E6%8A%80%E5%B7%A7/",
            "title": "五、让函数返回结果的技巧",
            "date_published": "2020-11-10T13:39:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"函数返回结果\"><a class=\"anchor\" href=\"#函数返回结果\">#</a> 函数返回结果💎</h2>\n<h3 id=\"单个函数只返回单个类型结果\"><a class=\"anchor\" href=\"#单个函数只返回单个类型结果\">#</a> 单个函数只返回单个类型结果</h3>\n<ul>\n<li>一个函数的返回类型如果无法确定，那么不如拆成多个。</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_users</span><span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> user_id <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>is_active<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_one_user</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_users</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>is_active<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"适当-partial-构造新函数\"><a class=\"anchor\" href=\"#适当-partial-构造新函数\">#</a> 适当 partial 构造新函数</h3>\n<ul>\n<li>partial 可以帮助我们更好的包装函数和参数，使得一些参数内容可以通过函数传递。</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 返回另一个函数调用结果</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> multiply<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> functools</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>double <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span>partial<span class=\"token punctuation\">(</span>multiply<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<blockquote>\n<p>需要热更新的情况下，尽量避免使用 partial，因为 partial 包裹的函数参数往往无法被更新到。</p>\n</blockquote>\n<h3 id=\"抛出异常-or-返回错误码\"><a class=\"anchor\" href=\"#抛出异常-or-返回错误码\">#</a> 抛出异常 or 返回错误码</h3>\n<p>返回值里包含返回内容和执行结果往往是一个不错的选择，但这种做法不够 pythonic，使用异常有时候能够让代码变得更统一</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ goic ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_LENGTH_OF_NAME<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name of item is too long'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>CURRENT_ITEMS<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_ITEMS_QUOTA<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'items is full'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> Item<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#------------ pythonic ------------</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_LENGTH_OF_NAME<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">raise</span> CreateItemError<span class=\"token punctuation\">(</span><span class=\"token string\">'name of item is too long'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>CURRENT_ITEMS<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_ITEMS_QUOTA<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">raise</span> CreateItemError<span class=\"token punctuation\">(</span><span class=\"token string\">'items is full'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> Item<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"使用生成器函数代替返回列表\"><a class=\"anchor\" href=\"#使用生成器函数代替返回列表\">#</a> 使用生成器函数代替返回列表</h3>\n<p>这个仁者见仁智者见智了，最开始使用可能会有些变扭，不过确实能够让代码变得更加美观。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">foo_func</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\"># ... 处理 item 后直接使用 yield 返回</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">yield</span> item</pre></td></tr></table></figure><h3 id=\"限制递归的使用\"><a class=\"anchor\" href=\"#限制递归的使用\">#</a> 限制递归的使用</h3>\n<ul>\n<li>python 对于递归的支持有限，Python 语言不支持<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGFpbF9jYWxs\"> “尾递归优化”</span>，且对于递归层数有限制。</li>\n<li>递归本身对于代码的阅读和调试也是令人头疼的问题。</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%9B%9B%E3%80%81%E5%AE%B9%E5%99%A8%E7%9A%84%E9%97%A8%E9%81%93/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%9B%9B%E3%80%81%E5%AE%B9%E5%99%A8%E7%9A%84%E9%97%A8%E9%81%93/",
            "title": "四、容器的门道",
            "date_published": "2020-11-09T08:04:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"容器的门道\"><a class=\"anchor\" href=\"#容器的门道\">#</a> 容器的门道🍼</h2>\n<h3 id=\"迭代器替代列表\"><a class=\"anchor\" href=\"#迭代器替代列表\">#</a> 迭代器替代列表</h3>\n<p>相比于列表在每次遍历前，把所有数据准备好来说。使用迭代器就像是「赶鸭子」，你的鞭策是它前进的动力。这样可以让代码的运行变得平滑（减小峰值），并且降低内存消耗。</p>\n<ul>\n<li>\n<p>生成器表达式： <code>(i for i in range(100))</code>  👍</p>\n</li>\n<li>\n<p>列表推导表达式： <code>[i for i in range(100)]</code></p>\n</li>\n</ul>\n<h3 id=\"合理使用双端队列deque\"><a class=\"anchor\" href=\"#合理使用双端队列deque\">#</a> 合理使用双端队列「deque」</h3>\n<ul>\n<li>对头部的插入删除时间复杂度都是 O (1)，比  <code>list</code>  可划算多了</li>\n</ul>\n<h3 id=\"查找操作建议使用-setdict\"><a class=\"anchor\" href=\"#查找操作建议使用-setdict\">#</a> 查找操作建议使用  <code>set/dict</code></h3>\n<ul>\n<li>两者都是基于  <code>hashtable</code>  ，查找时复杂度是 O (1)，相比于  <code>list</code>  来说可快太多了。</li>\n<li>有关各个数据结构时间复杂度的描述： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9UaW1lQ29tcGxleGl0eQ==\">TimeComplexity - Python Wiki</span></li>\n<li>Raymond Hettinger 的演讲 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1wMzNDVlYyOU9HOCZhbXA7dD0xNDAzcw==\">Modern Dictionaries(YouTube)</span></li>\n</ul>\n<h3 id=\"高层看容器\"><a class=\"anchor\" href=\"#高层看容器\">#</a> 高层看容器</h3>\n<ul>\n<li>容器其实就是多个接口实现的集合：\n<ul>\n<li><strong>列表（list）</strong>：满足  <code>Iterable</code> 、 <code>Sequence</code> 、 <code>MutableSequence</code>  等接口</li>\n<li><strong>元组（tuple）</strong>：满足  <code>Iterable</code> 、 <code>Sequence</code></li>\n<li><strong>字典（dict）</strong>：满足  <code>Iterable</code> 、 <code>Mapping</code> 、 <code>MutableMapping</code></li>\n<li><strong>集合（set）</strong>：满足  <code>Iterable</code> 、 <code>Set</code> 、 <code>MutableSet</code></li>\n</ul>\n</li>\n<li>面向接口编程，<strong>更多的关注容器的抽象属性，而非容器类型本身</strong>。</li>\n</ul>\n<h3 id=\"使用元组改善分支代码\"><a class=\"anchor\" href=\"#使用元组改善分支代码\">#</a> 使用元组改善分支代码</h3>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_now</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"接收一个过去的时间戳，返回距离当前时间的相对时间文字描述</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    seconds_delta <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> ts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> seconds_delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"less than 1 second ago\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">elif</span> seconds_delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;&#125; seconds ago\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>seconds_delta<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">elif</span> seconds_delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;&#125; minutes ago\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>seconds_delta <span class=\"token operator\">//</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">elif</span> seconds_delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;&#125; hours ago\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>seconds_delta <span class=\"token operator\">//</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;&#125; days ago\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>seconds_delta <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> bisect</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># BREAKPOINTS 必须是已经排好序的，不然无法进行二分查找</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>BREAKPOINTS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>TMPLS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\"># unit, template</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"less than 1 second ago\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&#123;units&#125; seconds ago\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&#123;units&#125; minutes ago\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token number\">3600</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&#123;units&#125; hours ago\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&#123;units&#125; days ago\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_now</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"接收一个过去的时间戳，返回距离当前时间的相对时间文字描述</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    seconds_delta <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> ts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    unit<span class=\"token punctuation\">,</span> tmpl <span class=\"token operator\">=</span> TMPLS<span class=\"token punctuation\">[</span>bisect<span class=\"token punctuation\">.</span>bisect<span class=\"token punctuation\">(</span>BREAKPOINTS<span class=\"token punctuation\">,</span> seconds_delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> tmpl<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>units<span class=\"token operator\">=</span>seconds_delta <span class=\"token operator\">//</span> unit<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"合理使用\"><a class=\"anchor\" href=\"#合理使用\">#</a> 合理使用  <code>*</code> 、 <code>**</code></h3>\n<ul>\n<li>快速合并两个字典   <code>dict(**dict_1, **dict_2)</code></li>\n</ul>\n<h3 id=\"使用-next-来进行遍历\"><a class=\"anchor\" href=\"#使用-next-来进行遍历\">#</a> 使用 next () 来进行遍历</h3>\n<ul>\n<li><code>next()</code>  接收一个迭代器作为参数，然后返回该迭代器的下一个元素。可以实现高效的查询。</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># OUTPUT: 8</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"使用有序字段实现去重\"><a class=\"anchor\" href=\"#使用有序字段实现去重\">#</a> 使用有序字段实现去重</h3>\n<ul>\n<li>常规去重过程中会把成员原本的顺序打乱，这里可以考虑使用有序字典来避免该问题产生</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># OUTPUT: &#123;3, 10, 2, 21&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> OrderedDict</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>OrderedDict<span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># OUTPUT: [10, 2, 3, 21]</span></pre></td></tr></table></figure></div></details>\n<blockquote>\n<p>在 Python 3.6 中，字典已经变成有序的了。并且在 Python 3.7 中，该功能已经从 <strong>语言的实现细节</strong> 变成了为 <strong>可依赖的正式语言特性</strong>。</p>\n</blockquote>\n<h2 id=\"生词表\"><a class=\"anchor\" href=\"#生词表\">#</a> 生词表</h2>\n<ul>\n<li>siphash 算法</li>\n<li>compact dict</li>\n<li>key-sharing dict</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B8%89%E3%80%81%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B8%89%E3%80%81%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "三、数字与字符串",
            "date_published": "2020-11-06T08:04:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"数字与字符串️\"><a class=\"anchor\" href=\"#数字与字符串️\">#</a> 数字与字符串✒️</h2>\n<h3 id=\"少写数字字面量用enum取而代之\"><a class=\"anchor\" href=\"#少写数字字面量用enum取而代之\">#</a> 少写数字字面量，用「Enum」取而代之</h3>\n<h3 id=\"避免大规模使用字符串拼接去构造指令\"><a class=\"anchor\" href=\"#避免大规模使用字符串拼接去构造指令\">#</a> 避免大规模使用字符串拼接去构造指令</h3>\n<ul>\n<li>请考虑使用面向对象的编程思想对其优化</li>\n<li>或者看看有没有已经能够帮你完成这项任务的代码库</li>\n<li>模板引擎有时也是一个不错的选择，相比于「拼接」，「选词填空」才是好选择🙂</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fetch_users</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> min_level<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> has_membership<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> sort_field<span class=\"token operator\">=</span><span class=\"token string\">\"created\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"获取用户列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    :param int min_level: 要求的最低用户级别，默认为所有级别</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    :param int gender: 筛选用户性别，默认为所有性别</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    :param int has_membership: 筛选所有会员/非会员用户，默认非会员</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    :param str sort_field: 排序字段，默认为按 created \"用户创建日期\"</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    :returns: 列表：[(User ID, User Name), ...]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 一种古老的 SQL 拼接技巧，使用 \"WHERE 1=1\" 来简化字符串拼接操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 区分查询 params 来避免 SQL 注入问题</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    statement <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT id, name FROM users WHERE 1=1\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> min_level <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        statement <span class=\"token operator\">+=</span> <span class=\"token string\">\" AND level >= ?\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        params<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>min_level<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> gender <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        statement <span class=\"token operator\">+=</span> <span class=\"token string\">\" AND gender >= ?\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        params<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>gender<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> has_membership<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        statement <span class=\"token operator\">+=</span> <span class=\"token string\">\" AND has_membership == true\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        statement <span class=\"token operator\">+=</span> <span class=\"token string\">\" AND has_membership == false\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    statement <span class=\"token operator\">+=</span> <span class=\"token string\">\" ORDER BY ?\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    params<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>sort_field<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>statement<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fetch_users_v2</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> min_level<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> has_membership<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> sort_field<span class=\"token operator\">=</span><span class=\"token string\">\"created\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"获取用户列表</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    query <span class=\"token operator\">=</span> select<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> min_level <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>level <span class=\"token operator\">>=</span> min_level<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> gender <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">==</span> gender<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>has_membership <span class=\"token operator\">==</span> has_membership<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span>sort_field<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"不必预计算字面量表达式\"><a class=\"anchor\" href=\"#不必预计算字面量表达式\">#</a> 不必预计算字面量表达式</h3>\n<ul>\n<li>你所担心的性能问题，在编译的时候就已经解决了</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>day_11 <span class=\"token operator\">=</span> <span class=\"token number\">950400</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>day_11 <span class=\"token operator\">=</span> <span class=\"token number\">11</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"布尔值也是数字\"><a class=\"anchor\" href=\"#布尔值也是数字\">#</a> 布尔值也是数字</h3>\n<ul>\n<li>有时候再需要统计序列内多少成员符合要求的时候比较好用</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>output<span class=\"token punctuation\">:</span><span class=\"token number\">2</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"处理超长字符\"><a class=\"anchor\" href=\"#处理超长字符\">#</a> 处理超长字符</h3>\n<ul>\n<li>（）包裹字符串可以实现随意折行</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>long_str <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"使用无穷大\"><a class=\"anchor\" href=\"#使用无穷大\">#</a> 使用 “无穷大”</h3>\n<ul>\n<li>无穷大： <code>float(&quot;inf&quot;)</code></li>\n<li>无穷小： <code>float(&quot;-inf&quot;)</code></li>\n</ul>\n<h3 id=\"字符串拼接并不慢\"><a class=\"anchor\" href=\"#字符串拼接并不慢\">#</a> 字符串拼接并不慢</h3>\n<ul>\n<li>如今使用  <code>+=</code>  的方式来拼接字符串，效率已经非常接近  <code>&quot;&quot;.join(str_list)</code>  了。所以，该拼接时就拼接吧，不必担心任何性能问题。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> timeit</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test_str_add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\ts <span class=\"token operator\">+=</span> long_str</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test_str_join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>long_str <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token string\">'test_str_join()'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'from __main__ import test_str_join'</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token string\">'test_str_add()'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'from __main__ import test_str_add'</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Output<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">0.0724546069977805</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">0.07129737001378089</span></pre></td></tr></table></figure><h3 id=\"value-1-并非线程安全\"><a class=\"anchor\" href=\"#value-1-并非线程安全\">#</a> “value += 1” 并非线程安全</h3>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        }
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "鑫酱",
    "subtitle": "笔记本",
    "icon": "https://allengx.gitee.io/images/favicon.ico",
    "description": "整天摸鱼，却妄想拯救世界的技术宅",
    "home_page_url": "https://allengx.gitee.io",
    "items": [
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%85%AB%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E6%8A%80%E5%B7%A7/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%85%AB%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E6%8A%80%E5%B7%A7/",
            "title": "八、装饰器的技巧",
            "date_published": "2020-11-11T12:55:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"装饰器的技巧\"><a class=\"anchor\" href=\"#装饰器的技巧\">#</a> 装饰器的技巧🎩</h2>\n<h3 id=\"尝试用类来实现装饰器\"><a class=\"anchor\" href=\"#尝试用类来实现装饰器\">#</a> 尝试用类来实现装饰器</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> functools</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DelayFunc</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>  duration<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">=</span> duration</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>func <span class=\"token operator\">=</span> func</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Wait for </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> seconds...'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>duration<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eager_call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Call without delay'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"装饰器：推迟某个函数的执行。同时提供 .eager_call 方法立即执行</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># 此处为了避免定义额外函数，直接使用 functools.partial 帮助构造</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\"># DelayFunc 实例</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> functools<span class=\"token punctuation\">.</span>partial<span class=\"token punctuation\">(</span>DelayFunc<span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token decorator annotation punctuation\">@delay</span><span class=\"token punctuation\">(</span>duration<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 这次调用将会延迟 2 秒</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 这次调用将会立即执行</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>add<span class=\"token punctuation\">.</span>eager_call<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"使用-wrapt-模块编写更扁平的装饰器\"><a class=\"anchor\" href=\"#使用-wrapt-模块编写更扁平的装饰器\">#</a> 使用 wrapt 模块编写更扁平的装饰器</h3>\n<p>有时候装饰器需要修饰 function、method、classmethod 时，我们不得不对装饰器进行调整，来适应新类型的函数。</p>\n<p>而  <code>wrapt</code>  可以快速地帮助我们改造装饰器以达到效果。此外，他还额外附加了 @functools.wraps () 的功能，能够保证正确的函数签名。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> wrapt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">provide_number</span><span class=\"token punctuation\">(</span>min_num<span class=\"token punctuation\">,</span> max_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@wrapt<span class=\"token punctuation\">.</span>decorator</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">wrapper</span><span class=\"token punctuation\">(</span>wrapped<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># 参数含义：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># - wrapped：被装饰的函数或类方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># - instance：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">#   - 如果被装饰者为普通类方法，该值为类实例</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">#   - 如果被装饰者为 classmethod 类方法，该值为类</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#   - 如果被装饰者为类 / 函数 / 静态方法，该值为 None</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\"># - args：调用时的位置参数（注意没有 * 符号）</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\"># - kwargs：调用时的关键字参数（注意没有 ** 符号）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        num <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span>min_num<span class=\"token punctuation\">,</span> max_num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\"># 无需关注 wrapped 是类方法或普通函数，直接在头部追加参数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        args <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> args</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> wrapper</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token decorator annotation punctuation\">@provide_number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">print_random_number</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@provide_number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">print_random_number</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo_1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@provide_number</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">print_random_number</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>print_random_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>print_random_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Foo_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>print_random_number<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"装饰器并不是-装饰器模式\"><a class=\"anchor\" href=\"#装饰器并不是-装饰器模式\">#</a> 「装饰器」并不是 「装饰器模式」</h3>\n<p>装饰器只是语法糖，装饰器模式更像是 golang 里的中间件。通过函数的层层包裹达到扩展功能的目的。</p>\n<p>这是因为对象正在包围其他对象，它们共享相似的接口，并且装饰对象似乎掩盖或修改或注释了所包围的对象。</p>\n<blockquote>\n<p>Hint: 在 Python 官网上有一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9EZWNvcmF0b3JQYXR0ZXJu\">实现了装饰器模式的例子</span>，你可以读读这个例子来更好的了解它。</p>\n</blockquote>\n<h3 id=\"记得用-functoolswraps-装饰内层函数\"><a class=\"anchor\" href=\"#记得用-functoolswraps-装饰内层函数\">#</a> 记得用 functools.wraps () 装饰内层函数</h3>\n<p>保证函数保留正确的签名有时候可以避免不必要的麻烦。</p>\n<h3 id=\"修改外层变量时记得使用-nonlocal\"><a class=\"anchor\" href=\"#修改外层变量时记得使用-nonlocal\">#</a> 修改外层变量时记得使用 nonlocal</h3>\n<p>nonlocal 可以用来什么不属于 local 作用域内的变量，解析器会遵循 LEGB 的顺序进行查找。</p>\n<p>而默认不在 local 作用域的变量是只读的，修改则会创建一个新的对象。</p>\n<p>nonlocal 可以显示的把变量声明为「外层函数的局部变量」（E）。从而让修改得以生效。</p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B8%83%E3%80%81%E5%9C%B0%E9%81%93%E7%9A%84%E5%BE%AA%E7%8E%AF/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B8%83%E3%80%81%E5%9C%B0%E9%81%93%E7%9A%84%E5%BE%AA%E7%8E%AF/",
            "title": "七、地道的循环",
            "date_published": "2020-11-11T11:54:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"地道的循环️\"><a class=\"anchor\" href=\"#地道的循环️\">#</a> 地道的循环♻️</h2>\n<h3 id=\"使用函数修饰被迭代对象来优化循环\"><a class=\"anchor\" href=\"#使用函数修饰被迭代对象来优化循环\">#</a> 使用函数修饰被迭代对象来优化循环</h3>\n<ul>\n<li>使用 product 扁平化多层嵌套循环： <code>product()</code>  可以接收多个可迭代对象，然后根据它们的笛卡尔积不断生成结果</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    pools <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> pool <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> repeat</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> pool <span class=\"token keyword\">in</span> pools<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> result <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> pool<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> prod <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>prod<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_twelve</span><span class=\"token punctuation\">(</span>num_list1<span class=\"token punctuation\">,</span> num_list2<span class=\"token punctuation\">,</span> num_list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"从 3 个数字列表中，寻找是否存在和为 12 的 3 个数\"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> num1 <span class=\"token keyword\">in</span> num_list1<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> num2 <span class=\"token keyword\">in</span> num_list2<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">for</span> num3 <span class=\"token keyword\">in</span> num_list3<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> num1 <span class=\"token operator\">+</span> num2 <span class=\"token operator\">+</span> num3 <span class=\"token operator\">==</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token keyword\">return</span> num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> num3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> product</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_twelve_v2</span><span class=\"token punctuation\">(</span>num_list1<span class=\"token punctuation\">,</span> num_list2<span class=\"token punctuation\">,</span> num_list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> num3 <span class=\"token keyword\">in</span> product<span class=\"token punctuation\">(</span>num_list1<span class=\"token punctuation\">,</span> num_list2<span class=\"token punctuation\">,</span> num_list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> num1 <span class=\"token operator\">+</span> num2 <span class=\"token operator\">+</span> num3 <span class=\"token operator\">==</span> <span class=\"token number\">12</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> num3</pre></td></tr></table></figure></div></details>\n<ul>\n<li>使用 islice 实现循环内隔行处理： <code>islice(seq, start, end, step)</code>  函数和数组切片操作（ list [start:stop:step] ），有点像 C 风格里的 <code>for</code></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">islice</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># islice('ABCDEFG', 2) --> A B</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># islice('ABCDEFG', 2, 4) --> C D</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># islice('ABCDEFG', 2, None) --> C D E F G</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># islice('ABCDEFG', 0, None, 2) --> A C E G</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    start<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">,</span> step <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>start <span class=\"token keyword\">or</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>stop <span class=\"token keyword\">or</span> sys<span class=\"token punctuation\">.</span>maxsize<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>step <span class=\"token keyword\">or</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    it <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        nexti <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\"># Consume *iterable* up to the *start* position.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> element <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> element <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> nexti<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">yield</span> element</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                nexti <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\"># Consume to *stop*.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> element <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">pass</span></pre></td></tr></table></figure><details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">parse_titles</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"从隔行数据文件中读取内容 \"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">yield</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#------------ good ------------          </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> islice</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">parse_titles_v2</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> islice<span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">yield</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<ul>\n<li>使用 takewhile 替代 break 语句： <code>takewhile(predicate, iterable)</code>  会在迭代  <code>iterable</code>  的过程中不断使用当前对象作为参数调用  <code>predicate</code>  函数并测试返回结果，如果函数返回值为真，则生成当前对象，循环继续。否则立即中断当前循环。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">takewhile</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># takewhile(lambda x: x&lt;5, [1,4,6,4,1]) --> 1 4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> iterable<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> predicate<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">yield</span> x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr></table></figure><details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> user <span class=\"token keyword\">in</span> users<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 当第一个不合格的用户出现后，不再进行后面的处理</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_qualified<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># do something...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#------------ good ------------  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> takewhile</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> user <span class=\"token keyword\">in</span> takewhile<span class=\"token punctuation\">(</span>is_qualified<span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># do something...</span></pre></td></tr></table></figure></div></details>\n<ul>\n<li>使用生成器编写自己的修饰函数</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sum_even_only</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"对 numbers 里面所有的偶数求和\"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            result <span class=\"token operator\">+=</span> num</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">even_only</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">yield</span> num</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sum_even_only_v2</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"对 numbers 里面所有的偶数求和\"\"\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> even_only<span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        result <span class=\"token operator\">+=</span> num</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr></table></figure></div></details>\n<h3 id=\"按职责拆解循环体内复杂代码块\"><a class=\"anchor\" href=\"#按职责拆解循环体内复杂代码块\">#</a> 按职责拆解循环体内复杂代码块</h3>\n<p>循环内的很多操作，可能毫无关系，甚至循环本身和里面的操作关系也不大，这种时候可以考虑进行逻辑解耦。</p>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> datetime</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">award_active_users_in_last_30days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"获取所有在过去 30 天周末晚上 8 点到 10 点登录过的用户，为其发送奖励积分和通知\"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    days <span class=\"token operator\">=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> days_delta <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        dt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span>days_delta<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># 5: Saturday, 6: Sunday</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> dt<span class=\"token punctuation\">.</span>weekday<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        time_start <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        time_end <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\"># 转换为 unix 时间戳，之后的 ORM 查询需要</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ts_start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>mktime<span class=\"token punctuation\">(</span>time_start<span class=\"token punctuation\">.</span>timetuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ts_end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>mktime<span class=\"token punctuation\">(</span>time_end<span class=\"token punctuation\">.</span>timetuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\"># 查询用户并挨个发送 1000 奖励积分和通知</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> LoginRecord<span class=\"token punctuation\">.</span>filter_by_range<span class=\"token punctuation\">(</span>ts_start<span class=\"token punctuation\">,</span> ts_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\"># 这里可以添加复杂逻辑</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            send_awarding_points<span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            notify_nonsleep_users<span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">gen_weekend_ts_ranges</span><span class=\"token punctuation\">(</span>days_ago<span class=\"token punctuation\">,</span> hour_start<span class=\"token punctuation\">,</span> hour_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"生成过去一段时间内周六日特定时间段范围，并以 UNIX 时间戳返回\"\"\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> days_delta <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>days_ago<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        dt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span>today<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> datetime<span class=\"token punctuation\">.</span>timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span>days_delta<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\"># 5: Saturday, 6: Sunday</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> dt<span class=\"token punctuation\">.</span>weekday<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        time_start <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">,</span> hour_start<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        time_end <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> dt<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">,</span> hour_end<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\"># 转换为 unix 时间戳，之后的 ORM 查询需要</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        ts_start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>mktime<span class=\"token punctuation\">(</span>time_start<span class=\"token punctuation\">.</span>timetuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        ts_end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>mktime<span class=\"token punctuation\">(</span>time_end<span class=\"token punctuation\">.</span>timetuple<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">yield</span> ts_start<span class=\"token punctuation\">,</span> ts_end</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">award_active_users_in_last_30days_v2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"发送奖励积分\"\"\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">for</span> ts_start<span class=\"token punctuation\">,</span> ts_end <span class=\"token keyword\">in</span> gen_weekend_ts_ranges<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> hour_start<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> hour_end<span class=\"token operator\">=</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> LoginRecord<span class=\"token punctuation\">.</span>filter_by_range<span class=\"token punctuation\">(</span>ts_start<span class=\"token punctuation\">,</span> ts_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            send_awarding_points<span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">notify_nonsleep_users_in_last_30days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"发送通知\"\"\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">for</span> ts_start<span class=\"token punctuation\">,</span> ts_end <span class=\"token keyword\">in</span> gen_weekend_ts_range<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> hour_start<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> hour_end<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> LoginRecord<span class=\"token punctuation\">.</span>filter_by_range<span class=\"token punctuation\">(</span>ts_start<span class=\"token punctuation\">,</span> ts_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            notify_user<span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">,</span> <span class=\"token string\">'You should sleep more'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%85%AD%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%85%AD%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",
            "title": "六、异常处理",
            "date_published": "2020-11-11T08:39:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"异常处理️\"><a class=\"anchor\" href=\"#异常处理️\">#</a> 异常处理❗️</h2>\n<h3 id=\"只做最精确的异常捕获\"><a class=\"anchor\" href=\"#只做最精确的异常捕获\">#</a> 只做最精确的异常捕获</h3>\n<p>捕获异常并不是为了让你的代码不提示异常，而是为了解决你已经设想过的异常。</p>\n<p>如果一个异常并不在你的思考范围内，那么对异常的处理手段往往也会不那么有效，所以尽早暴露出来为好。</p>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\"># ... 其他逻辑代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tfp<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'save failed: unable to save title of </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>url<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> to </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>filename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tfp<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">except</span> IOError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'save failed: unable to write to file </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>filename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"别让异常破坏抽象一致性\"><a class=\"anchor\" href=\"#别让异常破坏抽象一致性\">#</a> 别让异常破坏抽象一致性</h3>\n<p>异常的内容或者说异常本身的抽象应该符合当时的使用场景。</p>\n<p>例如一个加载文件操作返回的异常最好是文件加载失败而不是 IO 失败。</p>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">process_image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>INVALID_IMAGE_UPLOADED</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">process_image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">raise</span> ImageOpenError<span class=\"token punctuation\">(</span>exc<span class=\"token operator\">=</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">foo_view_function</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        process_image<span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">except</span> ImageOpenError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>INVALID_IMAGE_UPLOADED</pre></td></tr></table></figure></div></details>\n<h3 id=\"异常处理不应该喧宾夺主\"><a class=\"anchor\" href=\"#异常处理不应该喧宾夺主\">#</a> 异常处理不应该喧宾夺主</h3>\n<p>对不同的异常进行处理，会导致<strong>异常处理逻辑太多，以至于扰乱了代码核心逻辑</strong></p>\n<p>可以通过上下文管理器（context manager）来进行解决，通过 with 关键字。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">raise_api_error</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> captures<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>captures <span class=\"token operator\">=</span> captures</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\"># 该方法将在进入上下文时调用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> self</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_val<span class=\"token punctuation\">,</span> exc_tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\"># 该方法将在退出上下文时调用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\"># exc_type, exc_val, exc_tb 分别表示该上下文内抛出的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\"># 异常类型、异常值、错误栈</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> exc_type <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> exc_type <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>captures<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">raise</span> self<span class=\"token punctuation\">.</span>code <span class=\"token keyword\">from</span> exc_val</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">with</span> raise_api_error<span class=\"token punctuation\">(</span>KeyError<span class=\"token punctuation\">,</span> MyException<span class=\"token punctuation\">(</span><span class=\"token string\">\"do something fail with KeyError\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\"># do something...</span></pre></td></tr></table></figure><details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">upload_avatar</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"用户上传新头像\"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        avatar_file <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>FILES<span class=\"token punctuation\">[</span><span class=\"token string\">'avatar'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>AVATAR_FILE_NOT_PROVIDED</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       resized_avatar_file <span class=\"token operator\">=</span> resize_avatar<span class=\"token punctuation\">(</span>avatar_file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">except</span> FileTooLargeError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>AVATAR_FILE_TOO_LARGE</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">except</span> ResizeAvatarError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>AVATAR_FILE_INVALID</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatar <span class=\"token operator\">=</span> resized_avatar_file</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">raise</span> error_codes<span class=\"token punctuation\">.</span>INTERNAL_SERVER_ERROR</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">upload_avatar</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"用户上传新头像\"\"\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">with</span> raise_api_error<span class=\"token punctuation\">(</span>KeyError<span class=\"token punctuation\">,</span> <span class=\"token string\">'AVATAR_FILE_NOT_PROVIDED'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        avatar_file <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>FILES<span class=\"token punctuation\">[</span><span class=\"token string\">'avatar'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">with</span> raise_api_error<span class=\"token punctuation\">(</span>ResizeAvatarError<span class=\"token punctuation\">,</span> <span class=\"token string\">'AVATAR_FILE_INVALID'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\\</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            raise_api_error<span class=\"token punctuation\">(</span>FileTooLargeError<span class=\"token punctuation\">,</span> <span class=\"token string\">'AVATAR_FILE_TOO_LARGE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        resized_avatar_file <span class=\"token operator\">=</span> resize_avatar<span class=\"token punctuation\">(</span>avatar_file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">with</span> raise_api_error<span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">,</span> <span class=\"token string\">'INTERNAL_SERVER_ERROR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>avatar <span class=\"token operator\">=</span> resized_avatar_file</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        request<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%BA%94%E3%80%81%E8%AE%A9%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E6%8A%80%E5%B7%A7/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%BA%94%E3%80%81%E8%AE%A9%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E6%8A%80%E5%B7%A7/",
            "title": "五、让函数返回结果的技巧",
            "date_published": "2020-11-10T13:39:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"函数返回结果\"><a class=\"anchor\" href=\"#函数返回结果\">#</a> 函数返回结果💎</h2>\n<h3 id=\"单个函数只返回单个类型结果\"><a class=\"anchor\" href=\"#单个函数只返回单个类型结果\">#</a> 单个函数只返回单个类型结果</h3>\n<ul>\n<li>一个函数的返回类型如果无法确定，那么不如拆成多个。</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_users</span><span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> user_id <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>is_active<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_one_user</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_users</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>is_active<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"适当-partial-构造新函数\"><a class=\"anchor\" href=\"#适当-partial-构造新函数\">#</a> 适当 partial 构造新函数</h3>\n<ul>\n<li>partial 可以帮助我们更好的包装函数和参数，使得一些参数内容可以通过函数传递。</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 返回另一个函数调用结果</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> multiply<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> functools</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>double <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span>partial<span class=\"token punctuation\">(</span>multiply<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<blockquote>\n<p>需要热更新的情况下，尽量避免使用 partial，因为 partial 包裹的函数参数往往无法被更新到。</p>\n</blockquote>\n<h3 id=\"抛出异常-or-返回错误码\"><a class=\"anchor\" href=\"#抛出异常-or-返回错误码\">#</a> 抛出异常 or 返回错误码</h3>\n<p>返回值里包含返回内容和执行结果往往是一个不错的选择，但这种做法不够 pythonic，使用异常有时候能够让代码变得更统一</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ goic ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_LENGTH_OF_NAME<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name of item is too long'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>CURRENT_ITEMS<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_ITEMS_QUOTA<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'items is full'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> Item<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#------------ pythonic ------------</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_LENGTH_OF_NAME<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">raise</span> CreateItemError<span class=\"token punctuation\">(</span><span class=\"token string\">'name of item is too long'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>CURRENT_ITEMS<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_ITEMS_QUOTA<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">raise</span> CreateItemError<span class=\"token punctuation\">(</span><span class=\"token string\">'items is full'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> Item<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"使用生成器函数代替返回列表\"><a class=\"anchor\" href=\"#使用生成器函数代替返回列表\">#</a> 使用生成器函数代替返回列表</h3>\n<p>这个仁者见仁智者见智了，最开始使用可能会有些变扭，不过确实能够让代码变得更加美观。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">foo_func</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\"># ... 处理 item 后直接使用 yield 返回</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">yield</span> item</pre></td></tr></table></figure><h3 id=\"限制递归的使用\"><a class=\"anchor\" href=\"#限制递归的使用\">#</a> 限制递归的使用</h3>\n<ul>\n<li>python 对于递归的支持有限，Python 语言不支持<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGFpbF9jYWxs\"> “尾递归优化”</span>，且对于递归层数有限制。</li>\n<li>递归本身对于代码的阅读和调试也是令人头疼的问题。</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%9B%9B%E3%80%81%E5%AE%B9%E5%99%A8%E7%9A%84%E9%97%A8%E9%81%93/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E5%9B%9B%E3%80%81%E5%AE%B9%E5%99%A8%E7%9A%84%E9%97%A8%E9%81%93/",
            "title": "四、容器的门道",
            "date_published": "2020-11-09T08:04:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"容器的门道\"><a class=\"anchor\" href=\"#容器的门道\">#</a> 容器的门道🍼</h2>\n<h3 id=\"迭代器替代列表\"><a class=\"anchor\" href=\"#迭代器替代列表\">#</a> 迭代器替代列表</h3>\n<p>相比于列表在每次遍历前，把所有数据准备好来说。使用迭代器就像是「赶鸭子」，你的鞭策是它前进的动力。这样可以让代码的运行变得平滑（减小峰值），并且降低内存消耗。</p>\n<ul>\n<li>\n<p>生成器表达式： <code>(i for i in range(100))</code>  👍</p>\n</li>\n<li>\n<p>列表推导表达式： <code>[i for i in range(100)]</code></p>\n</li>\n</ul>\n<h3 id=\"合理使用双端队列deque\"><a class=\"anchor\" href=\"#合理使用双端队列deque\">#</a> 合理使用双端队列「deque」</h3>\n<ul>\n<li>对头部的插入删除时间复杂度都是 O (1)，比  <code>list</code>  可划算多了</li>\n</ul>\n<h3 id=\"查找操作建议使用-setdict\"><a class=\"anchor\" href=\"#查找操作建议使用-setdict\">#</a> 查找操作建议使用  <code>set/dict</code></h3>\n<ul>\n<li>两者都是基于  <code>hashtable</code>  ，查找时复杂度是 O (1)，相比于  <code>list</code>  来说可快太多了。</li>\n<li>有关各个数据结构时间复杂度的描述： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLnB5dGhvbi5vcmcvbW9pbi9UaW1lQ29tcGxleGl0eQ==\">TimeComplexity - Python Wiki</span></li>\n<li>Raymond Hettinger 的演讲 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1wMzNDVlYyOU9HOCZhbXA7dD0xNDAzcw==\">Modern Dictionaries(YouTube)</span></li>\n</ul>\n<h3 id=\"高层看容器\"><a class=\"anchor\" href=\"#高层看容器\">#</a> 高层看容器</h3>\n<ul>\n<li>容器其实就是多个接口实现的集合：\n<ul>\n<li><strong>列表（list）</strong>：满足  <code>Iterable</code> 、 <code>Sequence</code> 、 <code>MutableSequence</code>  等接口</li>\n<li><strong>元组（tuple）</strong>：满足  <code>Iterable</code> 、 <code>Sequence</code></li>\n<li><strong>字典（dict）</strong>：满足  <code>Iterable</code> 、 <code>Mapping</code> 、 <code>MutableMapping</code></li>\n<li><strong>集合（set）</strong>：满足  <code>Iterable</code> 、 <code>Set</code> 、 <code>MutableSet</code></li>\n</ul>\n</li>\n<li>面向接口编程，<strong>更多的关注容器的抽象属性，而非容器类型本身</strong>。</li>\n</ul>\n<h3 id=\"使用元组改善分支代码\"><a class=\"anchor\" href=\"#使用元组改善分支代码\">#</a> 使用元组改善分支代码</h3>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_now</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"接收一个过去的时间戳，返回距离当前时间的相对时间文字描述</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    seconds_delta <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> ts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> seconds_delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"less than 1 second ago\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">elif</span> seconds_delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;&#125; seconds ago\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>seconds_delta<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">elif</span> seconds_delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;&#125; minutes ago\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>seconds_delta <span class=\"token operator\">//</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">elif</span> seconds_delta <span class=\"token operator\">&lt;</span> <span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;&#125; hours ago\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>seconds_delta <span class=\"token operator\">//</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;&#125; days ago\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>seconds_delta <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> bisect</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># BREAKPOINTS 必须是已经排好序的，不然无法进行二分查找</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>BREAKPOINTS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>TMPLS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\"># unit, template</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"less than 1 second ago\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&#123;units&#125; seconds ago\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&#123;units&#125; minutes ago\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token number\">3600</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&#123;units&#125; hours ago\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&#123;units&#125; days ago\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">from_now</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"接收一个过去的时间戳，返回距离当前时间的相对时间文字描述</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    seconds_delta <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> ts<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    unit<span class=\"token punctuation\">,</span> tmpl <span class=\"token operator\">=</span> TMPLS<span class=\"token punctuation\">[</span>bisect<span class=\"token punctuation\">.</span>bisect<span class=\"token punctuation\">(</span>BREAKPOINTS<span class=\"token punctuation\">,</span> seconds_delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> tmpl<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>units<span class=\"token operator\">=</span>seconds_delta <span class=\"token operator\">//</span> unit<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"合理使用\"><a class=\"anchor\" href=\"#合理使用\">#</a> 合理使用  <code>*</code> 、 <code>**</code></h3>\n<ul>\n<li>快速合并两个字典   <code>dict(**dict_1, **dict_2)</code></li>\n</ul>\n<h3 id=\"使用-next-来进行遍历\"><a class=\"anchor\" href=\"#使用-next-来进行遍历\">#</a> 使用 next () 来进行遍历</h3>\n<ul>\n<li><code>next()</code>  接收一个迭代器作为参数，然后返回该迭代器的下一个元素。可以实现高效的查询。</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># OUTPUT: 8</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"使用有序字段实现去重\"><a class=\"anchor\" href=\"#使用有序字段实现去重\">#</a> 使用有序字段实现去重</h3>\n<ul>\n<li>常规去重过程中会把成员原本的顺序打乱，这里可以考虑使用有序字典来避免该问题产生</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># OUTPUT: &#123;3, 10, 2, 21&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> OrderedDict</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>OrderedDict<span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># OUTPUT: [10, 2, 3, 21]</span></pre></td></tr></table></figure></div></details>\n<blockquote>\n<p>在 Python 3.6 中，字典已经变成有序的了。并且在 Python 3.7 中，该功能已经从 <strong>语言的实现细节</strong> 变成了为 <strong>可依赖的正式语言特性</strong>。</p>\n</blockquote>\n<h2 id=\"生词表\"><a class=\"anchor\" href=\"#生词表\">#</a> 生词表</h2>\n<ul>\n<li>siphash 算法</li>\n<li>compact dict</li>\n<li>key-sharing dict</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B8%89%E3%80%81%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B8%89%E3%80%81%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "三、数字与字符串",
            "date_published": "2020-11-06T08:04:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"数字与字符串️\"><a class=\"anchor\" href=\"#数字与字符串️\">#</a> 数字与字符串✒️</h2>\n<h3 id=\"少写数字字面量用enum取而代之\"><a class=\"anchor\" href=\"#少写数字字面量用enum取而代之\">#</a> 少写数字字面量，用「Enum」取而代之</h3>\n<h3 id=\"避免大规模使用字符串拼接去构造指令\"><a class=\"anchor\" href=\"#避免大规模使用字符串拼接去构造指令\">#</a> 避免大规模使用字符串拼接去构造指令</h3>\n<ul>\n<li>请考虑使用面向对象的编程思想对其优化</li>\n<li>或者看看有没有已经能够帮你完成这项任务的代码库</li>\n<li>模板引擎有时也是一个不错的选择，相比于「拼接」，「选词填空」才是好选择🙂</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fetch_users</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> min_level<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> has_membership<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> sort_field<span class=\"token operator\">=</span><span class=\"token string\">\"created\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"获取用户列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    :param int min_level: 要求的最低用户级别，默认为所有级别</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    :param int gender: 筛选用户性别，默认为所有性别</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    :param int has_membership: 筛选所有会员/非会员用户，默认非会员</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    :param str sort_field: 排序字段，默认为按 created \"用户创建日期\"</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    :returns: 列表：[(User ID, User Name), ...]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 一种古老的 SQL 拼接技巧，使用 \"WHERE 1=1\" 来简化字符串拼接操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 区分查询 params 来避免 SQL 注入问题</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    statement <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT id, name FROM users WHERE 1=1\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> min_level <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        statement <span class=\"token operator\">+=</span> <span class=\"token string\">\" AND level >= ?\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        params<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>min_level<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> gender <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        statement <span class=\"token operator\">+=</span> <span class=\"token string\">\" AND gender >= ?\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        params<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>gender<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> has_membership<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        statement <span class=\"token operator\">+=</span> <span class=\"token string\">\" AND has_membership == true\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        statement <span class=\"token operator\">+=</span> <span class=\"token string\">\" AND has_membership == false\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    statement <span class=\"token operator\">+=</span> <span class=\"token string\">\" ORDER BY ?\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    params<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>sort_field<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>statement<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fetch_users_v2</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> min_level<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> gender<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> has_membership<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> sort_field<span class=\"token operator\">=</span><span class=\"token string\">\"created\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"获取用户列表</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    query <span class=\"token operator\">=</span> select<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> min_level <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>level <span class=\"token operator\">>=</span> min_level<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> gender <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">==</span> gender<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    query <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>has_membership <span class=\"token operator\">==</span> has_membership<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">[</span>sort_field<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"不必预计算字面量表达式\"><a class=\"anchor\" href=\"#不必预计算字面量表达式\">#</a> 不必预计算字面量表达式</h3>\n<ul>\n<li>你所担心的性能问题，在编译的时候就已经解决了</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>day_11 <span class=\"token operator\">=</span> <span class=\"token number\">950400</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>day_11 <span class=\"token operator\">=</span> <span class=\"token number\">11</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"布尔值也是数字\"><a class=\"anchor\" href=\"#布尔值也是数字\">#</a> 布尔值也是数字</h3>\n<ul>\n<li>有时候再需要统计序列内多少成员符合要求的时候比较好用</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>output<span class=\"token punctuation\">:</span><span class=\"token number\">2</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"处理超长字符\"><a class=\"anchor\" href=\"#处理超长字符\">#</a> 处理超长字符</h3>\n<ul>\n<li>（）包裹字符串可以实现随意折行</li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>long_str <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"使用无穷大\"><a class=\"anchor\" href=\"#使用无穷大\">#</a> 使用 “无穷大”</h3>\n<ul>\n<li>无穷大： <code>float(&quot;inf&quot;)</code></li>\n<li>无穷小： <code>float(&quot;-inf&quot;)</code></li>\n</ul>\n<h3 id=\"字符串拼接并不慢\"><a class=\"anchor\" href=\"#字符串拼接并不慢\">#</a> 字符串拼接并不慢</h3>\n<ul>\n<li>如今使用  <code>+=</code>  的方式来拼接字符串，效率已经非常接近  <code>&quot;&quot;.join(str_list)</code>  了。所以，该拼接时就拼接吧，不必担心任何性能问题。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> timeit</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test_str_add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\ts <span class=\"token operator\">+=</span> long_str</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test_str_join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>long_str <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token string\">'test_str_join()'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'from __main__ import test_str_join'</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token string\">'test_str_add()'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'from __main__ import test_str_add'</span><span class=\"token punctuation\">,</span> number<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Output<span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">0.0724546069977805</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">0.07129737001378089</span></pre></td></tr></table></figure><h3 id=\"value-1-并非线程安全\"><a class=\"anchor\" href=\"#value-1-并非线程安全\">#</a> “value += 1” 并非线程安全</h3>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%BA%8C%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%BA%8C%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF/",
            "title": "二、条件分支",
            "date_published": "2020-11-04T08:04:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"条件分支\"><a class=\"anchor\" href=\"#条件分支\">#</a> 条件分支🍴</h2>\n<h3 id=\"避免分支嵌套可以使用条件拆分\"><a class=\"anchor\" href=\"#避免分支嵌套可以使用条件拆分\">#</a> 避免分支嵌套，可以使用「条件拆分」</h3>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> is_ok_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> is_ok_2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> is_ok_3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> is_ok_4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_ok_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_ok_2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_ok_3<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> is_ok_4<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"复杂条件判断可以考虑使用函数封装\"><a class=\"anchor\" href=\"#复杂条件判断可以考虑使用函数封装\">#</a> 复杂条件判断可以考虑使用「函数封装」</h3>\n<h3 id=\"提取分支中的重复代码凸显不同\"><a class=\"anchor\" href=\"#提取分支中的重复代码凸显不同\">#</a> 提取分支中的重复代码，「凸显不同」</h3>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 对于新用户，创建新的用户资料，否则更新旧资料</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> user<span class=\"token punctuation\">.</span>no_profile_exists<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    create_user_profile<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        username<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        email<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        age<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        address<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\"># 对于新建用户，将用户的积分置为 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        points<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        created<span class=\"token operator\">=</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    update_user_profile<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        username<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        email<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        age<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        address<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        updated<span class=\"token operator\">=</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">if</span> user<span class=\"token punctuation\">.</span>no_profile_exists<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    profile_func <span class=\"token operator\">=</span> create_user_profile</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    extra_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'points'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'created'</span><span class=\"token punctuation\">:</span> now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    profile_func <span class=\"token operator\">=</span> update_user_profile</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    extra_args <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'updated'</span><span class=\"token punctuation\">:</span> now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>profile_func<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    username<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    email<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    age<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    address<span class=\"token operator\">=</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token operator\">**</span>extra_args</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"谨慎使用三元表达式\"><a class=\"anchor\" href=\"#谨慎使用三元表达式\">#</a> 谨慎使用三元表达式</h3>\n<h3 id=\"自定义对象的-布尔真假\"><a class=\"anchor\" href=\"#自定义对象的-布尔真假\">#</a> 自定义对象的 「布尔真假」</h3>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li>布尔「假」\n<ul>\n<li>None</li>\n<li>0</li>\n<li>False</li>\n<li>{}</li>\n<li>()</li>\n<li>[]</li>\n<li>...</li>\n</ul>\n</li>\n<li>布尔「真」\n<ul>\n<li>非 0 数值</li>\n<li>非空序列</li>\n<li>True</li>\n<li>用户类和类实例</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n<p>自定义类可以通过定义  <code>__bool__</code> 、 <code>__len__</code>  来决定类的真假。</p>\n</div></details>\n<h3 id=\"在条件判断中使用-all-any\"><a class=\"anchor\" href=\"#在条件判断中使用-all-any\">#</a> 在条件判断中使用 all () /any ()</h3>\n<ul>\n<li><code>all(seq)</code> ：仅当  <code>seq</code>  中所有对象都为布尔真时返回  <code>True</code> ，否则返回  <code>False</code></li>\n<li><code>any(seq)</code> ：只要  <code>seq</code>  中任何一个对象为布尔真就返回  <code>True</code> ，否则返回  <code>False</code></li>\n</ul>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">all_numbers_gt_10</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"仅当序列中所有数字大于 10 时，返回 True</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> numbers<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">all_numbers_gt_10_2</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">10</span> <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"使用-trywhilefor-中-else-分支\"><a class=\"anchor\" href=\"#使用-trywhilefor-中-else-分支\">#</a> 使用 try/while/for 中 else 分支</h3>\n<ul>\n<li><code>try</code>  ：try 后跟 else 表示 try 中的代码正常执行</li>\n<li><code>while/for</code> ：后面根 else 表示 for 和 while 的循环正常执行。没有被 <code>break</code> 、 <code>return</code>  打断， <code>continun</code>  不算。</li>\n</ul>\n<h3 id=\"和-is-比较操作\"><a class=\"anchor\" href=\"#和-is-比较操作\">#</a>  <code>==</code>  和  <code>is</code>  比较操作</h3>\n<ul>\n<li><code>==</code> ：值比较</li>\n<li><code>is</code> ：内存地址比较</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B8%80%E3%80%81%E5%8F%98%E9%87%8F/",
            "url": "https://allengx.gitee.io/computer-science/study/Python%E3%80%8C%E5%B7%A5%E5%8C%A0%E3%80%8D/%E4%B8%80%E3%80%81%E5%8F%98%E9%87%8F/",
            "title": "一、变量",
            "date_published": "2020-11-02T08:04:34.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h2 id=\"变量️\"><a class=\"anchor\" href=\"#变量️\">#</a> 变量⭐️</h2>\n<h3 id=\"通过变量名能够体现变量类型\"><a class=\"anchor\" href=\"#通过变量名能够体现变量类型\">#</a> 通过变量名能够体现变量「类型」</h3>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>person_lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>host_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>info_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tranform_set <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>arg_tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>item_obj <span class=\"token operator\">=</span> CItem<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"保持变量名一致不论何时何地相同的对象请用同样的变量名\"><a class=\"anchor\" href=\"#保持变量名一致不论何时何地相同的对象请用同样的变量名\">#</a> 保持变量名「一致」，不论何时何地，相同的对象请用同样的变量名</h3>\n<h3 id=\"变量名尽量短但不要短的离谱\"><a class=\"anchor\" href=\"#变量名尽量短但不要短的离谱\">#</a> 变量名尽量「短」，但不要短的离谱</h3>\n<details class=\"info\"><summary>示例</summary><div>\n<ul>\n<li>i -&gt; idx</li>\n<li>information -&gt; info</li>\n</ul>\n</div></details>\n<h3 id=\"变量定义尽量靠近使用\"><a class=\"anchor\" href=\"#变量定义尽量靠近使用\">#</a> 变量定义尽量「靠近使用」</h3>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>info_lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>data_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># logic .....</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>info_lst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># logic .....</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>data_dict<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># logic .....</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>info_lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>info_lst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># logic .....</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>data_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>data_dict<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data</pre></td></tr></table></figure></div></details>\n<h3 id=\"一个函数的变量数量最好不超过十个\"><a class=\"anchor\" href=\"#一个函数的变量数量最好不超过十个\">#</a> 一个函数的变量数量最好不超过「十」个</h3>\n<h3 id=\"不要定义不使用的变量\"><a class=\"anchor\" href=\"#不要定义不使用的变量\">#</a> 不要定义不使用的变量</h3>\n<h3 id=\"临时变量代替复杂的表达式\"><a class=\"anchor\" href=\"#临时变量代替复杂的表达式\">#</a> 临时变量代替复杂的表达式</h3>\n<details class=\"info\"><summary>示例</summary><div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------ bad ------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> user<span class=\"token punctuation\">.</span>is_active <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">==</span> <span class=\"token string\">'female'</span> <span class=\"token keyword\">or</span> user<span class=\"token punctuation\">.</span>level <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> user<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># logic ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#------------ good ------------</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>user_is_eligible <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>is_active <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">==</span> <span class=\"token string\">'female'</span> <span class=\"token keyword\">or</span> user<span class=\"token punctuation\">.</span>level <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> user_is_eligible<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token comment\"># logic ...</span></pre></td></tr></table></figure></div></details>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python「工匠」",
                "Python「工匠」"
            ]
        },
        {
            "id": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%B8%89%E3%80%81%E5%B0%8F%E6%9D%8E%E5%9C%A8%E7%AE%B1%E6%A0%B9/",
            "url": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%B8%89%E3%80%81%E5%B0%8F%E6%9D%8E%E5%9C%A8%E7%AE%B1%E6%A0%B9/",
            "title": "标准日本语初级-上",
            "date_published": "2020-10-25T05:48:15.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"标准日本语初级上\"><a class=\"anchor\" href=\"#标准日本语初级上\">#</a> 标准日本语初级（上）</h1>\n",
            "tags": [
                "日语",
                "学习笔记",
                "日语语法初级（上）",
                "日语语法"
            ]
        },
        {
            "id": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%BA%94%E3%80%81%E5%B0%8F%E6%9D%8E%E5%9C%A8%E6%97%A5%E6%9C%AC%E8%BF%8E%E6%96%B0%E6%98%A5/",
            "url": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%BA%94%E3%80%81%E5%B0%8F%E6%9D%8E%E5%9C%A8%E6%97%A5%E6%9C%AC%E8%BF%8E%E6%96%B0%E6%98%A5/",
            "title": "标准日本语初级-上",
            "date_published": "2020-10-25T05:48:15.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"标准日本语初级上\"><a class=\"anchor\" href=\"#标准日本语初级上\">#</a> 标准日本语初级（上）</h1>\n",
            "tags": [
                "日语",
                "学习笔记",
                "日语语法初级（上）",
                "日语语法"
            ]
        },
        {
            "id": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%BA%8C%E3%80%81%E5%B0%8F%E6%9D%8E%E7%9A%84%E5%85%AC%E5%8F%B8%E7%94%9F%E6%B4%BB%E2%91%A0/",
            "url": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%BA%8C%E3%80%81%E5%B0%8F%E6%9D%8E%E7%9A%84%E5%85%AC%E5%8F%B8%E7%94%9F%E6%B4%BB%E2%91%A0/",
            "title": "标准日本语初级-上",
            "date_published": "2020-10-25T05:48:15.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"标准日本语初级上\"><a class=\"anchor\" href=\"#标准日本语初级上\">#</a> 标准日本语初级（上）</h1>\n",
            "tags": [
                "日语",
                "学习笔记",
                "日语语法初级（上）",
                "日语语法"
            ]
        },
        {
            "id": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E5%85%AD%E3%80%81%E5%86%8D%E8%A7%81%EF%BC%81%E6%97%A5%E6%9C%AC/",
            "url": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E5%85%AD%E3%80%81%E5%86%8D%E8%A7%81%EF%BC%81%E6%97%A5%E6%9C%AC/",
            "title": "标准日本语初级-上",
            "date_published": "2020-10-25T05:48:15.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"标准日本语初级上\"><a class=\"anchor\" href=\"#标准日本语初级上\">#</a> 标准日本语初级（上）</h1>\n",
            "tags": [
                "日语",
                "学习笔记",
                "日语语法初级（上）",
                "日语语法"
            ]
        },
        {
            "id": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/",
            "url": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE/",
            "title": "基本标签",
            "date_published": "2020-10-25T05:48:15.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"常见的标签含义\"><a class=\"anchor\" href=\"#常见的标签含义\">#</a> 常见的标签含义</h1>\n<p><span class=\"label danger\">名</span> ：名词。</p>\n<p><span class=\"label danger\">叹词</span> ：语气词。</p>\n<p><span class=\"label danger\">寒暄语</span> ：日常问候的语言。</p>\n<p><span class=\"label danger\">外来語</span> ：非本土翻译得来的语言，用片假名书写。</p>\n<p><span class=\"label danger\">名场所</span> ：表示地方的名词。</p>\n<p><span class=\"label danger\">量词</span> ：和数词搭配表示数量。</p>\n",
            "tags": [
                "日语",
                "学习笔记",
                "日语语法初级（上）",
                "日语语法"
            ]
        },
        {
            "id": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E5%9B%9B%E3%80%81%E5%B0%8F%E6%9D%8E%E7%9A%84%E5%85%AC%E5%8F%B8%E7%94%9F%E6%B4%BB%E2%91%A1/",
            "url": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E5%9B%9B%E3%80%81%E5%B0%8F%E6%9D%8E%E7%9A%84%E5%85%AC%E5%8F%B8%E7%94%9F%E6%B4%BB%E2%91%A1/",
            "title": "标准日本语初级-上",
            "date_published": "2020-10-25T05:48:15.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"标准日本语初级上\"><a class=\"anchor\" href=\"#标准日本语初级上\">#</a> 标准日本语初级（上）</h1>\n",
            "tags": [
                "日语",
                "学习笔记",
                "日语语法初级（上）",
                "日语语法"
            ]
        },
        {
            "id": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%B8%80%E3%80%81%E5%B0%8F%E6%9D%8E%E8%B5%B4%E6%97%A5/",
            "url": "https://allengx.gitee.io/%E6%97%A5%E6%9C%AC%E8%AA%9E/study/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E6%96%87%E6%B3%95%E5%88%9D%E7%BA%A7%EF%BC%88%E4%B8%8A%EF%BC%89/%E4%B8%80%E3%80%81%E5%B0%8F%E6%9D%8E%E8%B5%B4%E6%97%A5/",
            "title": "一、小李赴日",
            "date_published": "2020-10-25T05:48:15.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"一-小李赴日\"><a class=\"anchor\" href=\"#一-小李赴日\">#</a> 一、小李赴日</h1>\n<h2 id=\"第1课-李りさん中国人ちゅうごくじんです\"><a class=\"anchor\" href=\"#第1课-李りさん中国人ちゅうごくじんです\">#</a> 第①课 <ruby>李<rp> (</rp><rt>り</rt><rp>)</rp> さん<rt></rt></ruby>\t<ruby>中国人<rp> (</rp><rt>ちゅうごくじん</rt><rp>)</rp> です<rt></rt></ruby></h2>\n<h3 id=\"语法解释\"><a class=\"anchor\" href=\"#语法解释\">#</a> 语法解释</h3>\n<h4 id=\"名-はわ-名-です\"><a class=\"anchor\" href=\"#名-はわ-名-です\">#</a>  <code>「名」</code>   <ruby>は<rp> (</rp><rt>わ</rt><rp>)</rp></ruby>   <code>「名」</code>   です</h4>\n<p>意为 <code>...是...</code> 。 <code>...は</code> 是主语的部分， <code>...です</code> 是谓语的部分。助词 <code>は</code> 用于提示主题。读作 <code>わ</code> 。</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><ruby>李<rp> (</rp><rt>り</rt><rp>)</rp></ruby> さん　 <code>は</code> 　<ruby>中国人<rp> (</rp><rt>ちゅうごくじん</rt><rp>)</rp></ruby>　 <code>です</code> 。（小李是中国人）</li>\n<li>わたし　 <code>は</code> 　<ruby>日本<rp> (</rp><rt>にほん</rt><rp>)</rp></ruby> じん　 <code>です</code> 。（我是日本人）</li>\n<li>わたし　 <code>は</code> 　<ruby>王<rp> (</rp><rt>おう</rt><rp>)</rp></ruby>　 <code>です</code> 。（我姓王）</li>\n</ul>\n</div></details>\n<hr />\n<h4 id=\"名-はわ-名-です-ありません\"><a class=\"anchor\" href=\"#名-はわ-名-です-ありません\">#</a>  <code>「名」</code>   <ruby>は<rp> (</rp><rt>わ</rt><rp>)</rp></ruby>   <code>「名」</code>   です　ありません</h4>\n<p>意为 <code>...不是...</code> 。 <code>です　ありません</code> 的  <code>です</code>  也可以用  <code>じゃ</code>  代替。</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><ruby>森<rp> (</rp><rt>もり</rt><rp>)</rp></ruby> さん　 <code>は</code> 　<ruby>学生<rp> (</rp><rt>がくせい</rt><rp>)</rp></ruby>　 <code>です　ありません</code> 。（森先生不是学生）</li>\n<li>わたし　 <code>は</code> 　<ruby>日本<rp> (</rp><rt>にほん</rt><rp>)</rp> じん<rt></rt></ruby>　 <code>です　ありません</code> 。（我不是日本人）</li>\n<li>わたし　 <code>は</code> 　<ruby>田中<rp> (</rp><rt>たなか</rt><rp>)</rp></ruby>　 <code>じゃ　ありません</code> 。（我不是田中）</li>\n</ul>\n</div></details>\n<hr />\n<h4 id=\"名-はわ-名-ですか\"><a class=\"anchor\" href=\"#名-はわ-名-ですか\">#</a>  <code>「名」</code>   <ruby>は<rp> (</rp><rt>わ</rt><rp>)</rp></ruby>   <code>「名」</code>   ですか？</h4>\n<p>意为 <code>...是...吗？</code> 。 <code>か</code> 有标识疑问的意思</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li>あなた　 <code>は</code> 　 <ruby>小野<rp> (</rp><rt>おの</rt><rp>)</rp></ruby> さん　 <code>ですか</code> 。（您是小野女生吗？）</li>\n<li>キムさん　 <code>は</code> 　<ruby>中国人<rp> (</rp><rt>ちゅうごくじん</rt><rp>)</rp></ruby>　 <code>ですか</code> 。（金女士是中国人吗？）</li>\n</ul>\n</div></details>\n<hr />\n<h4 id=\"名-の-名-从属机构-国家属性\"><a class=\"anchor\" href=\"#名-の-名-从属机构-国家属性\">#</a>  <code>「名」</code>  の   <code>「名」</code>   「从属机构、国家」「属性」</h4>\n<p>助词 <code>の</code> 连接两个名词，表示前面名词是后面的「从属机构、国家」或者「属性」</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><ruby>李<rp> (</rp><rt>り</rt><rp>)</rp></ruby> さんは　 <ruby>JC<rt></rt> 企画<rp> (</rp><rt>ジェーシーきかく</rt><rp>)</rp></ruby>　 <code>の</code> 　 <ruby>社員<rp> (</rp><rt>しゃいん</rt><rp>)</rp></ruby> です。（小李是 JC 策划公司的职员）</li>\n<li><ruby>北京旅行社<rp> (</rp><rt>ペキンりょこうしゃ</rt><rp>)</rp></ruby> は　<ruby>中国<rp> (</rp><rt>ちゅうご</rt><rp>)</rp></ruby>　 <code>の</code> 　 <ruby>企業<rp> (</rp><rt>きぎょう</rt><rp>)</rp></ruby> です。（北京旅行社是中国的企业）</li>\n<li>デュボンさんは　 <ruby>大学<rp> (</rp><rt>だいがく</rt><rp>)</rp></ruby>　 <code>の</code> 　 <ruby>先生<rp> (</rp><rt>せんせい</rt><rp>)</rp></ruby> です。（迪蓬先生是大学老师）</li>\n</ul>\n<div class=\"note danger\">\n<p>日语中名词和名词之前一般用  <code>の</code>  来连接。</p>\n</div>\n</div></details>\n<hr />\n<h3 id=\"词语讲解\"><a class=\"anchor\" href=\"#词语讲解\">#</a> 词语讲解</h3>\n<h4 id=\"人称\"><a class=\"anchor\" href=\"#人称\">#</a>  <code>人称</code></h4>\n<ul>\n<li>「わたし」：第一人称</li>\n<li>「あなた」：第二人称</li>\n<li>「あの <ruby>人<rp> (</rp><rt>ひと</rt><rp>)</rp></ruby>」：第三人称</li>\n<li>「~ さん」：用于他人姓名后</li>\n<li>「~ ちゃん」：多用于称呼小孩</li>\n<li>「~ <ruby>君<rp> (</rp><rt>くん</rt><rp>)</rp></ruby>」：多用于称呼比自己年轻的男性</li>\n<li>「 <ruby>先生<rp> (</rp><rt>せんせい</rt><rp>)</rp></ruby>」：指代老师</li>\n</ul>\n<h4 id=\"人称省略\"><a class=\"anchor\" href=\"#人称省略\">#</a>  <code>人称省略</code></h4>\n<p>可以通过上下文推测出的人称一般可以省略，并且听上去更有礼貌。多省略第一、第二人称主语。</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><code>（あなたは）</code>  <ruby>吉田<rp> (</rp><rt>よしだ</rt><rp>)</rp></ruby> さんですが。<br />\n—— いいえ， <code>（わたしは）</code>  <ruby>吉田<rp> (</rp><rt>よしだ</rt><rp>)</rp></ruby> じゃ　ありません。 <code>（わたしは）</code> 　 <ruby>森<rp> (</rp><rt>もり</rt><rp>)</rp></ruby> です。<br />\n（你是吉田先生吗？—— 不，我不是吉田。我是森。）</li>\n</ul>\n</div></details>\n<h4 id=\"叹词\"><a class=\"anchor\" href=\"#叹词\">#</a>  <code>「叹词」</code></h4>\n<ul>\n<li>あっ：哎，啊。表示惊叹的意思</li>\n</ul>\n<h4 id=\"寒暄语\"><a class=\"anchor\" href=\"#寒暄语\">#</a>  <code>「寒暄语」</code></h4>\n<ul>\n<li>どうぞ　よろしく　お願いします：请多关照的意思，可以省略部分内容，效果也是一致的。例如：\n<ul>\n<li>どうぞ　よろしく</li>\n<li>よろしく　お願いします</li>\n</ul>\n</li>\n<li>こちらこそ：我才是，我才要、您请～的意思</li>\n</ul>\n<h2 id=\"第2课-これわ-本ほんです\"><a class=\"anchor\" href=\"#第2课-これわ-本ほんです\">#</a> 第②课 これわ　 <ruby>本<rp> (</rp><rt>ほん</rt><rp>)</rp></ruby> です</h2>\n<h3 id=\"语法解释-2\"><a class=\"anchor\" href=\"#语法解释-2\">#</a> 语法解释</h3>\n<h4 id=\"これそれあれは名です\"><a class=\"anchor\" href=\"#これそれあれは名です\">#</a> 「これ／それ／あれ」は <code>「名」</code> です</h4>\n<p>意为 <code>「这／那／那个」是...</code> 。 <code>「これ／それ／あれ」</code> 区别：</p>\n<ul>\n<li><code>「これ」</code> ：这的意思，通常指代距离说话人较近的事物，或者距离两者都近</li>\n<li><code>「それ」</code> ：那的意思，通常指代距离听话人较近的事物，或者距离两者稍微远一些</li>\n<li><code>「あれ」</code> ：那个的意思，通常指代距离说话人和听话人都较远的事物，或者距离两者比较远</li>\n</ul>\n<details class=\"info\"><summary>示例：</summary><div>\n<p>-　 <code>ごれ</code> 　は　 <ruby>本<rp> (</rp><rt>ほん</rt><rp>)</rp></ruby> です。（这是书）<br />\n-　 <code>それ</code> 　は　かばん　です。（那是包）<br />\n-　 <code>あれ</code> 　は　テレビ　です。（那是电视机）</p>\n</div></details>\n<hr />\n<h4 id=\"だれですが-何なんですが\"><a class=\"anchor\" href=\"#だれですが-何なんですが\">#</a> 「だれですが／ <ruby>何<rp> (</rp><rt>なん</rt><rp>)</rp></ruby> ですが」</h4>\n<p>意为 <code>「谁/什么」</code> 。一个指代人，一个指代物</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<p>-　それは　<ruby>何<rp> (</rp><rt>なん</rt><rp>)</rp></ruby>　ですが。（那是什么？）<br />\n-　あの 　<ruby>人<rp> (</rp><rt>ひと</rt><rp>)</rp></ruby> は　だれ　ですが。（那个人是谁？）</p>\n</div></details>\n<hr />\n<h4 id=\"名-の-名-所属\"><a class=\"anchor\" href=\"#名-の-名-所属\">#</a>  <code>「名」</code>  の   <code>「名」</code>   「所属」</h4>\n<p><code>の</code> 连接名词和名词，表示所属关系</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<p>-　わたし　の　かぎ。（我的钥匙）<br />\n-　 <ruby>田中<rp> (</rp><rt>たなか</rt><rp>)</rp></ruby> さん　の　 <ruby>車<rp> (</rp><rt>くるま</rt><rp>)</rp></ruby>。（田中先生的车）</p>\n</div></details>\n<hr />\n<h4 id=\"ごの-そのあの名-は-名-です\"><a class=\"anchor\" href=\"#ごの-そのあの名-は-名-です\">#</a> 「ごの／ その／あの」 <code>「名」</code>   は   <code>「名」</code>  です</h4>\n<p>意为 <code>「这/那/那个」</code> 「名」是 「名」的。</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<p>-　 <code>この</code> 　カメラ　は　スミスさんの（カメラ）です。（这个照相机是史密斯先生的）<br />\n-　 <code>その</code> 　 <ruby>自転車<rp> (</rp><rt>じてんしゃ</rt><rp>)</rp></ruby>　は　 <ruby>森<rp> (</rp><rt>もり</rt><rp>)</rp></ruby> さんのせす。（那辆自行车是森先生的）<br />\n-　 <code>あの</code> 　ノート　は　だれのですが。（那个笔记比是谁的？）</p>\n</div></details>\n<hr />\n<h4 id=\"どの-どれ名\"><a class=\"anchor\" href=\"#どの-どれ名\">#</a> 「どの／ どれ」 <code>「名」</code></h4>\n<p>意为 <code>「哪个/哪个（三者以上）」</code> 「名」</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<p>-　 <ruby>森<rp> (</rp><rt>もり</rt><rp>)</rp></ruby> さんの　かばんは　 <code>どれ</code> （かばん）　ですが。（森先生的包是哪个？）<br />\n-　  <ruby>長島<rp> (</rp><rt>ながしま</rt><rp>)</rp></ruby> さんの　 <ruby>傘<rp> (</rp><rt>かさ</rt><rp>)</rp></ruby>　 <code>どれ</code> 　ですが。（长岛先生的伞是哪把？）<br />\n-　  <ruby>小野<rp> (</rp><rt>おの</rt><rp>)</rp></ruby> さんの　 <ruby>机<rp> (</rp><rt>つくえ</rt><rp>)</rp></ruby> は　 <code>どの</code> 　 <ruby>机<rp> (</rp><rt>つくえ</rt><rp>)</rp></ruby>　ですが。（小野女士的桌子是哪一张？）</p>\n</div></details>\n<hr />\n<h3 id=\"100以下数字\"><a class=\"anchor\" href=\"#100以下数字\">#</a> 「100」以下数字</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">0~9</th>\n<th style=\"text-align:left\">日语表示</th>\n<th style=\"text-align:center\">10~19</th>\n<th style=\"text-align:left\">日语表示</th>\n<th style=\"text-align:center\">10 的整数倍</th>\n<th style=\"text-align:left\">日语表示</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">れい／ぜろ</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:left\">じゅう</td>\n<td style=\"text-align:center\">20</td>\n<td style=\"text-align:left\">にじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">いち</td>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:left\">じゅういち</td>\n<td style=\"text-align:center\">30</td>\n<td style=\"text-align:left\">さんじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">に</td>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:left\">じゅうに</td>\n<td style=\"text-align:center\">40</td>\n<td style=\"text-align:left\">よんじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">さん</td>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:left\">じゅうさん</td>\n<td style=\"text-align:center\">50</td>\n<td style=\"text-align:left\">ごじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">し／よん</td>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:left\">じゅうし／じゅうよん</td>\n<td style=\"text-align:center\">60</td>\n<td style=\"text-align:left\">ろくじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">ご</td>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:left\">じゅうご</td>\n<td style=\"text-align:center\">70</td>\n<td style=\"text-align:left\">なｎじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">ろく</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:left\">じゅうろく</td>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:left\">はちじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">しち／なな</td>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:left\">じゅうしち／じゅうなな</td>\n<td style=\"text-align:center\">90</td>\n<td style=\"text-align:left\">きゅうじゅう</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">はち</td>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:left\">じゅうはち</td>\n<td style=\"text-align:center\">100</td>\n<td style=\"text-align:left\">ひゃく</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\">く／きゅう</td>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:left\">じゅうく／じゅうきゅう</td>\n<td style=\"text-align:center\">／</td>\n<td style=\"text-align:left\">／</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0.1</td>\n<td style=\"text-align:left\">れいてんいち</td>\n<td style=\"text-align:center\">2/3</td>\n<td style=\"text-align:left\">さんぶんのに</td>\n<td style=\"text-align:center\">／</td>\n<td style=\"text-align:left\">／</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"词语讲解-2\"><a class=\"anchor\" href=\"#词语讲解-2\">#</a> 词语讲解</h3>\n<h4 id=\"方かた-礼貌语言\"><a class=\"anchor\" href=\"#方かた-礼貌语言\">#</a> <ruby>方<rp> (</rp><rt>かた</rt><rp>)</rp></ruby>　「礼貌语言」</h4>\n<p>对  <ruby>人<rp> (</rp><rt>ひと</rt><rp>)</rp></ruby>　的一种尊称，常用于以下几种情况：</p>\n<ul>\n<li>长辈、上司</li>\n<li>初次见面、交往不多的人</li>\n<li>会议或者公开场合</li>\n</ul>\n<h4 id=\"询问年龄-礼貌语言\"><a class=\"anchor\" href=\"#询问年龄-礼貌语言\">#</a> 询问年龄　「礼貌语言」</h4>\n<ul>\n<li><ruby>何歳<rp> (</rp><rt>なんさい</rt><rp>)</rp></ruby> ですが（多大了）</li>\n<li>おいくつですか（多大年纪了，更礼貌一些）</li>\n<li>いくつ（多大了，询问小孩）</li>\n<li><ruby>何歳<rp> (</rp><rt>なんさい</rt><rp>)</rp></ruby>（多大了，询问小孩）</li>\n</ul>\n<h4 id=\"どうぞ\"><a class=\"anchor\" href=\"#どうぞ\">#</a>  <code>どうぞ</code></h4>\n<p>意为：「请收下／请用餐」，常用于给对方物品或者劝对方进餐。</p>\n<h4 id=\"叹词-2\"><a class=\"anchor\" href=\"#叹词-2\">#</a>  <code>「叹词」</code></h4>\n<ul>\n<li>えっ：意为「啊？／啥？」，表示惊叹，意外，吃惊或者没有听懂对方说话的反问，重复说会显得不礼貌。</li>\n<li>わあ：意为「哇～！」，表示感动，吃惊或者心情激动是发出的声音。</li>\n<li>はい：意为「嗯／是的」，表示赞同对方的观点。被别人交到的时候要用  <code>はい</code>  不能用  <code>ええ</code></li>\n<li>ええ：意为「嗯／是的」，表示赞同对方的观点。</li>\n</ul>\n<h4 id=\"外来語がいらいご\"><a class=\"anchor\" href=\"#外来語がいらいご\">#</a> 「<ruby>外来語<rp> (</rp><rt>がいらいご</rt><rp>)</rp></ruby>」</h4>\n<p>外来词，大部分来自欧美语言，用片假名书写。</p>\n<ul>\n<li>スワトウ：汕头</li>\n<li>ロンドン：伦敦</li>\n<li>シルク：丝绸</li>\n</ul>\n<h4 id=\"どうも-ありがとう-ございます-寒暄语\"><a class=\"anchor\" href=\"#どうも-ありがとう-ございます-寒暄语\">#</a>  <code>どうも　ありがとう　ございます</code> 　「寒暄语」</h4>\n<p>常用于表达对对方的谢意，也可以简化版的   <code>どうも</code> ，情感没有原来那么强烈。</p>\n<h3 id=\"亲属称谓\"><a class=\"anchor\" href=\"#亲属称谓\">#</a> 亲属称谓</h3>\n<table>\n<thead>\n<tr>\n<th>自己的亲属</th>\n<th>别人的亲属</th>\n<th>自己的亲属</th>\n<th>别人的亲属</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><ruby>祖父<rp> (</rp><rt>そふ</rt><rp>)</rp></ruby>　祖父／外祖父</td>\n<td>おじいさん</td>\n<td><ruby>兄弟<rp> (</rp><rt>きょうだい</rt><rp>)</rp></ruby> 兄弟／兄弟姐妹</td>\n<td>ご<ruby>兄弟<rp> (</rp><rt>きょうだい</rt><rp>)</rp></ruby></td>\n</tr>\n<tr>\n<td><ruby>祖母<rp> (</rp><rt>そぼ</rt><rp>)</rp></ruby>　祖母／外祖母</td>\n<td>おばあさん</td>\n<td><ruby>兄<rp> (</rp><rt>あに</rt><rp>)</rp></ruby> 　哥哥</td>\n<td>お<ruby>兄<rp> (</rp><rt>にい</rt><rp>)</rp></ruby> さん</td>\n</tr>\n<tr>\n<td><ruby>両親<rp> (</rp><rt>りょうしん</rt><rp>)</rp></ruby>　父母</td>\n<td>ご<ruby>両親<rp> (</rp><rt>りょうしん</rt><rp>)</rp></ruby></td>\n<td><ruby>姉<rp> (</rp><rt>あね</rt><rp>)</rp></ruby>　姐姐</td>\n<td>お<ruby>姉<rp> (</rp><rt>ねえ</rt><rp>)</rp></ruby> さん</td>\n</tr>\n<tr>\n<td><ruby>父親<rp> (</rp><rt>ちち</rt><rp>)</rp></ruby>　父亲</td>\n<td>お <ruby>父<rp> (</rp><rt>とう</rt><rp>)</rp></ruby> さん</td>\n<td><ruby>弟<rp> (</rp><rt>おとうと</rt><rp>)</rp></ruby>　弟弟</td>\n<td><ruby>弟<rp> (</rp><rt>おとうと</rt><rp>)</rp></ruby> さん</td>\n</tr>\n<tr>\n<td><ruby>母親<rp> (</rp><rt>はは</rt><rp>)</rp></ruby>　母亲</td>\n<td>お <ruby>母<rp> (</rp><rt>かあ</rt><rp>)</rp></ruby> さん</td>\n<td><ruby>妹<rp> (</rp><rt>いもうと</rt><rp>)</rp></ruby>　妹妹</td>\n<td><ruby>妹<rp> (</rp><rt>いもうと</rt><rp>)</rp></ruby> さん</td>\n</tr>\n<tr>\n<td><ruby>息子<rp> (</rp><rt>むすこ</rt><rp>)</rp></ruby>　儿子</td>\n<td><ruby>息子<rp> (</rp><rt>むすこ</rt><rp>)</rp></ruby> さん</td>\n<td>おじ　伯伯／叔叔／舅舅／姑父</td>\n<td>おじさん</td>\n</tr>\n<tr>\n<td><ruby>娘<rp> (</rp><rt>むすめ</rt><rp>)</rp></ruby>　女儿</td>\n<td><ruby>娘<rp> (</rp><rt>むすめ</rt><rp>)</rp></ruby> さん／お <ruby>嬢<rp> (</rp><rt>じょう</rt><rp>)</rp></ruby> さん</td>\n<td>おば　伯母／婶婶／姑姑／舅妈</td>\n<td>おばさん</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"第3课-ここは-デパートです\"><a class=\"anchor\" href=\"#第3课-ここは-デパートです\">#</a> 第③课 ここは　デパートです</h2>\n<h3 id=\"语法解释-3\"><a class=\"anchor\" href=\"#语法解释-3\">#</a> 语法解释</h3>\n<h4 id=\"ここそこあそこ-は-名です\"><a class=\"anchor\" href=\"#ここそこあそこ-は-名です\">#</a>  <code>「ここ／そこ／あそこ」</code> 　は　「名」です</h4>\n<p>意为「这里是／那里是／那儿是」</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><code>ここ</code> 　は　デパートです。（这里是百货商店）</li>\n<li><code>そこ</code> 　は　 <ruby>図書館<rp> (</rp><rt>としょかん</rt><rp>)</rp></ruby> です。（那里是图书馆）</li>\n<li><code>あそこ</code> 　は　 <ruby>入口<rp> (</rp><rt>いりくち</rt><rp>)</rp></ruby> です。（那儿是入口）</li>\n</ul>\n</div></details>\n<h4 id=\"名-は-名场所です\"><a class=\"anchor\" href=\"#名-は-名场所です\">#</a> 「名」　は　 <code>名「场所」</code> です</h4>\n<p>表示前面的名词在后面的场所</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><ruby>食堂<rp> (</rp><rt>しょくどう</rt><rp>)</rp></ruby>　は　デパートの　 <ruby>七階<rp> (</rp><rt>ななかい</rt><rp>)</rp></ruby>　です。（食堂在百货商店的七楼）</li>\n</ul>\n</div></details>\n<h4 id=\"名-は-どこですが\"><a class=\"anchor\" href=\"#名-は-どこですが\">#</a> 「名」　は　どこですが</h4>\n<p>表示询问前面的名词在哪</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li>トイレ　は　どこですが。（厕所在哪？）</li>\n</ul>\n</div></details>\n<h4 id=\"名-も-名-です\"><a class=\"anchor\" href=\"#名-も-名-です\">#</a> 「名」　も　「名」　です</h4>\n<p><code>も</code> 　表示  <code>也</code>  的意思</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li>あなた　も　 <ruby>中国人<rp> (</rp><rt>ちゅうごくじん</rt><rp>)</rp></ruby> ですが。（你也是中国人吗？）</li>\n</ul>\n</div></details>\n<h4 id=\"名-は-名-ですか名-ですか\"><a class=\"anchor\" href=\"#名-は-名-ですか名-ですか\">#</a> 「名」　は　「名」　ですか，「名」　ですか</h4>\n<p>向别人询问答案是否是其中的一种，回答的时候不能用  <code>はい</code>  或者  <code>いいえ</code></p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><ruby>林<rp> (</rp><rt>はやし</rt><rp>)</rp></ruby> さんは　 <ruby>韓国人<rp> (</rp><rt>かんこくじん</rt><rp>)</rp></ruby> ですか， <ruby>日本人<rp> (</rp><rt>にほんじん</rt><rp>)</rp></ruby> ですか， <ruby>中国人<rp> (</rp><rt>ちゅうごくじん</rt><rp>)</rp></ruby> ですが。</li>\n<li><ruby>日本人<rp> (</rp><rt>にほんじん</rt><rp>)</rp></ruby> です。<br />\n—— 林先生是韩国人，日本人，还是中国人。<br />\n—— 是日本人。</li>\n</ul>\n</div></details>\n<h3 id=\"100以上数字\"><a class=\"anchor\" href=\"#100以上数字\">#</a> 100 以上数字</h3>\n<table>\n<thead>\n<tr>\n<th>100</th>\n<th>ひゃく</th>\n<th>1000</th>\n<th>せん</th>\n<th>10,000</th>\n<th>いちまん</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>にひゃく</td>\n<td>2000</td>\n<td>にせん</td>\n<td>100,000</td>\n<td>じゅうまん</td>\n</tr>\n<tr>\n<td>300</td>\n<td>さん <code>び</code> ゃく</td>\n<td>3000</td>\n<td>さんぜん</td>\n<td>1,000,000</td>\n<td>ひゃくまん</td>\n</tr>\n<tr>\n<td>400</td>\n<td>よんひゃく</td>\n<td>4000</td>\n<td>よんせん</td>\n<td>10,000,000</td>\n<td>いっせんまん</td>\n</tr>\n<tr>\n<td>500</td>\n<td>ごひゃく</td>\n<td>5000</td>\n<td>ごせん</td>\n<td>100,000,000</td>\n<td>いちおく</td>\n</tr>\n<tr>\n<td>600</td>\n<td>ろっぴゃく</td>\n<td>6000</td>\n<td>ろくせん</td>\n<td>9002</td>\n<td>きゅうせんに</td>\n</tr>\n<tr>\n<td>700</td>\n<td>ななひゃく</td>\n<td>7000</td>\n<td>ななせん</td>\n<td>9020</td>\n<td>きゅうせんにじゅう</td>\n</tr>\n<tr>\n<td>800</td>\n<td>はっぴゃく</td>\n<td>8000</td>\n<td>はっせん</td>\n<td>9200</td>\n<td>きゅうせんにひゃく</td>\n</tr>\n<tr>\n<td>900</td>\n<td>きゅうひゃく</td>\n<td>9000</td>\n<td>きゅうせん</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>一百、一千前面不需要加  <code>「1」</code> ，但是一万、一千万、一亿需要。</p>\n</blockquote>\n<h3 id=\"词语讲解-3\"><a class=\"anchor\" href=\"#词语讲解-3\">#</a> 词语讲解</h3>\n<h4 id=\"一階いっかい-量词一楼\"><a class=\"anchor\" href=\"#一階いっかい-量词一楼\">#</a> <ruby>一階<rp> (</rp><rt>いっかい</rt><rp>)</rp></ruby> 「量词」：一楼</h4>\n<h4 id=\"谓语省略\"><a class=\"anchor\" href=\"#谓语省略\">#</a> 谓语省略</h4>\n<p>进一步询问时，有时候只是简单的替换主语，可以把谓语省略</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li>これは　いくらですか</li>\n<li>あれは</li>\n</ul>\n<p>—— 这个多少钱？<br />\n—— 那个呢？</p>\n</div></details>\n<h4 id=\"礼貌语言\"><a class=\"anchor\" href=\"#礼貌语言\">#</a> 礼貌语言</h4>\n<p>-　こちら／そちら／あちら／どちら：这里／那里／那儿／哪儿</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><ruby>受付<rp> (</rp><rt>うけつけ</rt><rp>)</rp></ruby> は　どこですか。（接待处在哪？）</li>\n<li>あそこです。（在那儿。）</li>\n</ul>\n</div></details>\n<h4 id=\"缩略词\"><a class=\"anchor\" href=\"#缩略词\">#</a> 缩略词</h4>\n<ul>\n<li>パソコン（パーソナルコンピューター）：个人电脑</li>\n</ul>\n<h4 id=\"あのう搭话\"><a class=\"anchor\" href=\"#あのう搭话\">#</a> あのう「搭话」</h4>\n<p>引起对方注意，开启一段对话。</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li>あのう， <ruby>課長<rp> (</rp><rt>かちょう</rt><rp>)</rp></ruby>。（对不起，科长）</li>\n<li><ruby>何<rp> (</rp><rt>なん</rt><rp>)</rp></ruby> ですか。（什么？）</li>\n</ul>\n</div></details>\n<h4 id=\"~ですか确认\"><a class=\"anchor\" href=\"#~ですか确认\">#</a> ～ですか「确认」</h4>\n<p>が（↗）表示不确定的询问，が（↘）表示肯定</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li>\n<p>あのう， <ruby>東京<rp> (</rp><rt>とうきょう</rt><rp>)</rp></ruby>　 <ruby>地図<rp> (</rp><rt>ちず</rt><rp>)</rp></ruby> は　どこですか。（请问，东京地图在什么地方？）</p>\n</li>\n<li>\n<p><ruby>地図<rp> (</rp><rt>ちず</rt><rp>)</rp></ruby> ですか（↗）。そちらです。（地图？在那儿。）</p>\n</li>\n<li>\n<p>これは　パソコンです。（那个是个人电脑）</p>\n</li>\n<li>\n<p>パソコンですか（↘）。（是个人电脑啊）</p>\n</li>\n</ul>\n</div></details>\n<h3 id=\"英文字母\"><a class=\"anchor\" href=\"#英文字母\">#</a> 英文字母</h3>\n<table>\n<thead>\n<tr>\n<th>A a</th>\n<th>エー</th>\n<th>B b</th>\n<th>ビー</th>\n<th>C c</th>\n<th>シー</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D d</td>\n<td>ディー</td>\n<td>E e</td>\n<td>イー</td>\n<td>F f</td>\n<td>エフ</td>\n</tr>\n<tr>\n<td>G g</td>\n<td>ジー</td>\n<td>H h</td>\n<td>エイチ／エッチ</td>\n<td>I i</td>\n<td>アイ</td>\n</tr>\n<tr>\n<td>J j</td>\n<td>ジェイ</td>\n<td>K k</td>\n<td>ケー</td>\n<td>L l</td>\n<td>エル</td>\n</tr>\n<tr>\n<td>M m</td>\n<td>エム</td>\n<td>N n</td>\n<td>エヌ</td>\n<td>O o</td>\n<td>オー</td>\n</tr>\n<tr>\n<td>P p</td>\n<td>ピー</td>\n<td>Q q</td>\n<td>キュー</td>\n<td>R r</td>\n<td>アール</td>\n</tr>\n<tr>\n<td>S s</td>\n<td>エス</td>\n<td>T t</td>\n<td>ティー</td>\n<td>U u</td>\n<td>ユー</td>\n</tr>\n<tr>\n<td>V v</td>\n<td>ブー</td>\n<td>W w</td>\n<td>ダブリュー</td>\n<td>X x</td>\n<td>エックス</td>\n</tr>\n<tr>\n<td>Y y</td>\n<td>ワイ</td>\n<td>Z z</td>\n<td>ゼット／ズィー</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"第4课-部屋へやに-机つくえと-いすが-あります\"><a class=\"anchor\" href=\"#第4课-部屋へやに-机つくえと-いすが-あります\">#</a> 第④课  <ruby>部屋<rp> (</rp><rt>へや</rt><rp>)</rp></ruby> に　 <ruby>机<rp> (</rp><rt>つくえ</rt><rp>)</rp></ruby> と　いすが　あります</h2>\n<h3 id=\"语法解释-4\"><a class=\"anchor\" href=\"#语法解释-4\">#</a> 语法解释</h3>\n<h4 id=\"あります-和-います\"><a class=\"anchor\" href=\"#あります-和-います\">#</a> あります　和　います</h4>\n<p>两者都表示事物存在， <code>あります</code>  表示不具有意识的死物， <code>います</code>  表示动物或昆虫</p>\n<ul>\n<li>名「场所」  <code>に</code> 　名「物／人」 <code>が</code> 　 <code>あります／います</code> ：表示  <code>~有~</code></li>\n</ul>\n<details class=\"info\"><summary>示例：</summary><div>\n<p><ruby>部屋<rp> (</rp><rt>へや</rt><rp>)</rp></ruby> に　<ruby>机<rp> (</rp><rt>つくえ</rt><rp>)</rp></ruby> が　あります。（房间里有桌子）</p>\n<p><ruby>公園<rp> (</rp><rt>こうえん</rt><rp>)</rp></ruby> に　 <ruby>子供<rp> (</rp><rt>こども</rt><rp>)</rp></ruby> が　います。（公园里有小孩）</p>\n</div></details>\n<ul>\n<li>名「物／人」  <code>は</code> 　名「场所」 <code>に</code> 　 <code>あります／います</code> ：表示  <code>~在~</code></li>\n</ul>\n<details class=\"info\"><summary>示例：</summary><div>\n<p>いす　は　<ruby>部屋<rp> (</rp><rt>へや</rt><rp>)</rp></ruby> に　あります。（椅子在房间里）</p>\n<p><ruby>子供<rp> (</rp><rt>こども</rt><rp>)</rp></ruby>　は　 <ruby>公園<rp> (</rp><rt>こうえん</rt><rp>)</rp></ruby> に　います。（小孩在公园）</p>\n</div></details>\n<ul>\n<li>疑问句</li>\n</ul>\n<details class=\"info\"><summary>示例：</summary><div>\n<p><ruby>小野<rp> (</rp><rt>おの</rt><rp>)</rp></ruby> さんの　 <ruby>家<rp> (</rp><rt>いえ</rt><rp>)</rp></ruby> は　どごに　ありますか。（小野女士的家在哪里）</p>\n<p><ruby>林<rp> (</rp><rt>はやし</rt><rp>)</rp></ruby> さんは　どごに　いますか。（林先生在哪）</p>\n</div></details>\n<h4 id=\"名と名并列\"><a class=\"anchor\" href=\"#名と名并列\">#</a> 「名」と「名」「并列」</h4>\n<p>意思和汉语的「和」相近</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><ruby>時計<rp> (</rp><rt>とけい</rt><rp>)</rp></ruby>　 <code>と</code> 　 <ruby>眼鏡<rp> (</rp><rt>めがね</rt><rp>)</rp></ruby>。（表和眼镜）</li>\n</ul>\n</div></details>\n<h4 id=\"上うえ-下した-前まえ-後うしろ-隣となり-中なか-外そと\"><a class=\"anchor\" href=\"#上うえ-下した-前まえ-後うしろ-隣となり-中なか-外そと\">#</a> <ruby>上<rp> (</rp><rt>うえ</rt><rp>)</rp></ruby>／ <ruby>下<rp> (</rp><rt>した</rt><rp>)</rp></ruby>／ <ruby>前<rp> (</rp><rt>まえ</rt><rp>)</rp></ruby>／ <ruby>後<rp> (</rp><rt>うし</rt><rp>)</rp></ruby> ろ／ <ruby>隣<rp> (</rp><rt>となり</rt><rp>)</rp></ruby>／ <ruby>中<rp> (</rp><rt>なか</rt><rp>)</rp></ruby>／ <ruby>外<rp> (</rp><rt>そと</rt><rp>)</rp></ruby></h4>\n<p>意为 上／下／前／后／旁边／里面／外面。</p>\n<p>表示具体位置时，用 「名词」+  <code>の</code>  + <ruby>上<rp> (</rp><rt>うえ</rt><rp>)</rp></ruby>／ <ruby>下<rp> (</rp><rt>した</rt><rp>)</rp></ruby>／ <ruby>前<rp> (</rp><rt>まえ</rt><rp>)</rp></ruby>／ <ruby>後<rp> (</rp><rt>うし</rt><rp>)</rp></ruby> ろ／ <ruby>隣<rp> (</rp><rt>となり</rt><rp>)</rp></ruby>／ <ruby>中<rp> (</rp><rt>なか</rt><rp>)</rp></ruby>／ <ruby>外<rp> (</rp><rt>そと</rt><rp>)</rp></ruby></p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><ruby>机<rp> (</rp><rt>つくえ</rt><rp>)</rp></ruby>　の　<ruby>上<rp> (</rp><rt>うえ</rt><rp>)</rp></ruby>　に　 <ruby>猫<rp> (</rp><rt>ねこ</rt><rp>)</rp></ruby> が　います。（桌子上有一只猫）</li>\n</ul>\n</div></details>\n<h4 id=\"ねné确认\"><a class=\"anchor\" href=\"#ねné确认\">#</a> <ruby>ね<rp> (</rp><rt>né</rt><rp>)</rp></ruby>「确认」</h4>\n<p>一般用于结尾，表示对某件事的确认形式的提问，或者想要征求某人同意。</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li>あのこに　 <ruby>犬<rp> (</rp><rt>いぬ</rt><rp>)</rp></ruby> が　います <code>ね</code> 。（那儿有一只狗啊。）</li>\n</ul>\n</div></details>\n<h4 id=\"疑问词も动否定\"><a class=\"anchor\" href=\"#疑问词も动否定\">#</a> 「疑问词」+ も＋「动」（否定）</h4>\n<p>表示全面否定</p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><ruby>教室<rp> (</rp><rt>きょうしつ</rt><rp>)</rp></ruby> に　 <code>だれ</code> も　 <code>いません</code> 。（教师里什么都没有）</li>\n</ul>\n</div></details>\n<h3 id=\"词语讲解-4\"><a class=\"anchor\" href=\"#词语讲解-4\">#</a> 词语讲解</h3>\n<h4 id=\"上うえ的范围\"><a class=\"anchor\" href=\"#上うえ的范围\">#</a> <ruby>上<rp> (</rp><rt>うえ</rt><rp>)</rp></ruby> 的范围</h4>\n<p>日语中 <ruby>上<rp> (</rp><rt>うえ</rt><rp>)</rp></ruby> 所表示的范围只有垂直上方，不包括其他位置关系。</p>\n<p>如果要表示墙上这种关系（墙表面），一般用  <code>に</code></p>\n<details class=\"info\"><summary>示例：</summary><div>\n<ul>\n<li><ruby>壁<rp> (</rp><rt>かべ</rt><rp>)</rp></ruby> に　スイッチが　あります。（墙上有开关）👍</li>\n<li><ruby>壁<rp> (</rp><rt>かべ</rt><rp>)</rp></ruby> の　<ruby>上<rp> (</rp><rt>うえ</rt><rp>)</rp></ruby> に　スイッチが　あります。👎</li>\n</ul>\n</div></details>\n<h4 id=\"ええと\"><a class=\"anchor\" href=\"#ええと\">#</a> ええと</h4>\n<p>意为：那个...。语气词，一般表示还没想好说啥的一种回应。</p>\n<h4 id=\"ご-家族かぞくご-兄弟きょうだいご-両親りょうしん礼貌用语\"><a class=\"anchor\" href=\"#ご-家族かぞくご-兄弟きょうだいご-両親りょうしん礼貌用语\">#</a> ご <ruby>家族<rp> (</rp><rt>かぞく</rt><rp>)</rp></ruby>／ご <ruby>兄弟<rp> (</rp><rt>きょうだい</rt><rp>)</rp></ruby>／ご <ruby>両親<rp> (</rp><rt>りょうしん</rt><rp>)</rp></ruby>「礼貌用语」</h4>\n<p>表示对别人的 「家人／兄弟／父母」 的一个尊称。加上  <code>ご</code>  显得更加礼貌</p>\n<h4 id=\"兄弟きょうだい\"><a class=\"anchor\" href=\"#兄弟きょうだい\">#</a> <ruby>兄弟<rp> (</rp><rt>きょうだい</rt><rp>)</rp></ruby></h4>\n<p>日语里的 <ruby>兄弟<rp> (</rp><rt>きょうだい</rt><rp>)</rp></ruby> 仅仅指代有亲缘关系的「兄弟／姐妹／兄妹／姐弟」</p>\n",
            "tags": [
                "日语",
                "学习笔记",
                "日语语法初级（上）",
                "日语语法"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/python/Python-HotFix/",
            "url": "https://allengx.gitee.io/computer-science/study/python/Python-HotFix/",
            "title": "Python HotFix 热更新",
            "date_published": "2020-10-21T11:05:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"hotfix-热更新\"><a class=\"anchor\" href=\"#hotfix-热更新\">#</a> HotFix 热更新</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念：</h2>\n<ul>\n<li>热更新是指在 Python 程序运行过程中，修改代码中的部分片段，并能够<strong>不需要重新启动程序</strong>，便能够在运行程序中生效。</li>\n<li>热更新一般都是基于  <code>module</code>  来进行的，所以热更新本质就是更新  <code>module</code></li>\n<li>为了能够保证热更之前创建的绝大多数对象是能够正常工作的，一般会尽量避免对对象直接进行替换，能修改的尽量不替换。</li>\n</ul>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍：</h2>\n<ul>\n<li>一个  <code>module</code>  里面包含的内容大致可以分为以下几种：\n<ul>\n<li><code>class</code>  ：类</li>\n<li><code>function</code>  ：方法</li>\n<li><code>global object</code>  ：全局对象</li>\n</ul>\n</li>\n</ul>\n<p>看上去只有三种类似的对象，其实更新的时候注意的点还挺多的：</p>\n<ul>\n<li>模块是新增或者类型发生了变更，可以直接替换。</li>\n<li>一般不对模块内建函数和内建全局对象做操作（大部分是不可修改的，还有一些平时也不会改，没有热更必要）。</li>\n<li>除此以外的就是对三种类型的分别更新了。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">reload_module</span><span class=\"token punctuation\">(</span>module_name<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    热更模块(module):</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ①: 更新新增成员</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        ②: 跳过 builtins 模块</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ③: 处理类型不同的成员</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ④: 更新类成员</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ⑤: 更新函数成员</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ⑥: 更新成员变量</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\"># 该模块之前没有被加载，不允许热更新</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    old_module <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>module_name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> old_module<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>module_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is not import can't reload\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\"># Python3.7 的机制，如果不 pop 掉旧的模块， import_module 操作只会从 moduels 取出旧的缓存数据，不会重新构建</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>module_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    new_module <span class=\"token operator\">=</span> importlib<span class=\"token punctuation\">.</span>import_module<span class=\"token punctuation\">(</span>module_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> inspect<span class=\"token punctuation\">.</span>ismodule<span class=\"token punctuation\">(</span>new_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>new_module<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is not a module\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> new_member <span class=\"token keyword\">in</span> inspect<span class=\"token punctuation\">.</span>getmembers<span class=\"token punctuation\">(</span>new_module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\"># 模块名称和 member 的 key 可能不一致 例如 import xxx as x</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        member_name <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>new_member<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__name__\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        old_member <span class=\"token operator\">=</span> old_module<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\"># 模块内的成员模块 和 built-in 函数不做处理</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> inspect<span class=\"token punctuation\">.</span>ismodule<span class=\"token punctuation\">(</span>new_member<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> \\</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            inspect<span class=\"token punctuation\">.</span>isbuiltin<span class=\"token punctuation\">(</span>new_member<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> \\</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            member_name <span class=\"token keyword\">in</span> builtins<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\"># 原模块没有的内容或者类型不同直接换</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">elif</span> <span class=\"token keyword\">not</span> old_member <span class=\"token keyword\">or</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>old_member<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>new_member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_module<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> new_member<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\"># 类，走类自己的热更</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">elif</span> inspect<span class=\"token punctuation\">.</span>isclass<span class=\"token punctuation\">(</span>new_member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\"># 枚举类型强制替换，因为枚举定义后无法被修改，这里只能替换类的定义。</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">issubclass</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>old_member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> enum<span class=\"token punctuation\">.</span>EnumMeta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_module<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> new_member<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                reload_class<span class=\"token punctuation\">(</span>old_member<span class=\"token punctuation\">,</span> new_member<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\"># 函数，热更之</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">elif</span> inspect<span class=\"token punctuation\">.</span>isfunction<span class=\"token punctuation\">(</span>new_member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\"># 热更失败直接换，失败的原因可能是函数本身的闭包参数变更:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\"># 也不是说热更失败，只是这种情况下，热更也没办法兼容旧的逻辑，毫无意义，徒增烦恼</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\"># \t@装饰器\t\t\t\t------>\t\t@装饰器</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\"># \tdef func(arg1, arg2)\t\t\t  def func(arg1)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> reload_func<span class=\"token punctuation\">(</span>old_member<span class=\"token punctuation\">,</span> new_member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_module<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> new_member<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_module<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> new_member<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span>module_name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> old_module</pre></td></tr></table></figure><p>下面就来介绍一下  <code>class</code>   、 <code>function</code> 、 <code>global variable</code>   的热更新问题。</p>\n<h3 id=\"热更-class\"><a class=\"anchor\" href=\"#热更-class\">#</a> 热更 Class：</h3>\n<p>热更新类的一些注意事项：</p>\n<ul>\n<li>\n<p>类的更新一般不进行替换，而是把新的类中的内容更新到旧的类里面，为了兼容一些已经创建的类实体。</p>\n</li>\n<li>\n<p>对于以前的旧类中存在而新类不存在的内容，根据自身需求选择是否保留（这里删掉了）。</p>\n</li>\n<li>\n<p>类中包含部分不能直接修改的对象，跳过它们的更新：</p>\n<ul>\n<li><code>'__dict__', '__doc__', '__self__', '__func__'</code>  这些都是不可修改的。</li>\n</ul>\n</li>\n<li>\n<p>和模块一样，把新增的内容和类型不一致的内容更新到旧的类里面。</p>\n</li>\n<li>\n<p>和模块一样，跳过内建函数。</p>\n</li>\n<li>\n<p><code>staticmethod、classmethod</code>  函数由于无法修改，只能单独热更  <code>__func__</code>  字段。</p>\n</li>\n<li>\n<p><code>property</code>  修饰的函数直接替换即可。</p>\n</li>\n<li>\n<p>类函数则走函数的正常更新流程。</p>\n</li>\n<li>\n<p>类中定义的类依旧走类的更新。</p>\n</li>\n<li>\n<p>其他内容直接覆盖即可。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">reload_class</span><span class=\"token punctuation\">(</span>old_class<span class=\"token punctuation\">:</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">,</span> new_class<span class=\"token punctuation\">:</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    热更类(class):</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ①: 新增成员直接加</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        ②: builtins 成员不处理</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ③: methoddescriptor 成员不处理</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ④: 类型不同直接替换</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ⑤: staticmethod,classmethod,property,method 直接更新</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ⑥: function 直接更新</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ⑦: class 递归更新</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ⑧: class 属性成员直接更新</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 删除新类不存在的旧类成员</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> attr <span class=\"token keyword\">in</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>old_class<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> name <span class=\"token keyword\">in</span> new_class<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> inspect<span class=\"token punctuation\">.</span>isfunction<span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token builtin\">type</span><span class=\"token punctuation\">.</span>__delattr__<span class=\"token punctuation\">(</span>old_class<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    ignore_attr_lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"__dict__\"</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\"># attribute objects is not writable</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__self__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__func__'</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\"># can't set attributes of built-in/extension</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> new_attr <span class=\"token keyword\">in</span> new_class<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> name <span class=\"token keyword\">in</span> ignore_attr_lst<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        old_attr <span class=\"token operator\">=</span> old_class<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\"># 新增内容直接加</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> old_attr<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_class<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> new_attr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">elif</span> inspect<span class=\"token punctuation\">.</span>isbuiltin<span class=\"token punctuation\">(</span>new_attr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> name <span class=\"token keyword\">in</span> builtins<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\"># 类型不同直接换</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>old_attr<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>new_attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_class<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> new_attr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>new_attr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">staticmethod</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">classmethod</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> reload_func<span class=\"token punctuation\">(</span>old_attr<span class=\"token punctuation\">.</span>__func__<span class=\"token punctuation\">,</span> new_attr<span class=\"token punctuation\">.</span>__func__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_class<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> new_attr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>new_attr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">property</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_class<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> new_attr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">elif</span> inspect<span class=\"token punctuation\">.</span>isfunction<span class=\"token punctuation\">(</span>new_attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> reload_func<span class=\"token punctuation\">(</span>old_attr<span class=\"token punctuation\">,</span> new_attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_class<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> new_attr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">elif</span> inspect<span class=\"token punctuation\">.</span>isclass<span class=\"token punctuation\">(</span>new_attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            reload_class<span class=\"token punctuation\">(</span>old_attr<span class=\"token punctuation\">,</span> new_attr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_class<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> new_attr<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"热更-function\"><a class=\"anchor\" href=\"#热更-function\">#</a> 热更 Function：</h3>\n<p>函数的更新算是热更里面最核心的内容了，注意点也挺多：</p>\n<ul>\n<li>\n<p>函数的热更新一般也不对函数本身进行替换，直接修改即可，迫不得已情况下可以考虑换掉。</p>\n</li>\n<li>\n<p>函数本身因为没有涉及到过多的自定义内容，大部分都是逻辑，所以内置的东西粗略的看下来就几样：</p>\n<ul>\n<li><code>__closure__ </code> ：闭包的关联参数</li>\n<li><code>__code__</code> ：编译后的代码对象</li>\n<li><code>__defaults__</code> ：k-v 的默认值</li>\n<li><code>__dict__</code> ：命名空间支持的函数属性</li>\n<li><code>__globals__</code> ：全局变量字典</li>\n<li><code>__name__</code> ：函数名</li>\n<li><code>__qualname__</code> ：函数全名</li>\n<li><code>__annotations__</code> ：类型标注</li>\n<li><code>__kwdefaults__</code> ：关键字默认值字典</li>\n</ul>\n</li>\n<li>\n<p>把上述的几个替换一下即可，这里要注意一下，有部分字段也是不可修改的：</p>\n<ul>\n<li><code>__class__</code>    ：assignment only supported for heap types or ModuleType subclasses</li>\n<li><code>__closure__</code>   ：readonly attribute</li>\n<li><code>__globals__</code>   ：readonly attribute</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>\n<p>除此以外，还需要注意检验函数的闭包变量是否发生变更，如果变更了也要进行更新：</p>\n<ul>\n<li>对于带有 super () 调用的函数，其闭包内会存储自身的引用，这个不需要更新：</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">c_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c_1<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">.</span>__code__<span class=\"token punctuation\">.</span>co_freevars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>__class__</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c_1<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">.</span>__closure__<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cell_contents<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.c_1'</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>闭包参数数量不一致的情况下，直接替换，更新意义不大。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">reload_func</span><span class=\"token punctuation\">(</span>old_func<span class=\"token punctuation\">:</span>types<span class=\"token punctuation\">.</span>FunctionType<span class=\"token punctuation\">,</span> new_func<span class=\"token punctuation\">:</span>types<span class=\"token punctuation\">.</span>FunctionType<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    热更函数(func):</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ①: 更新旧函数里面的属性，详细内容见下方定义</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        ②: 部分属性不可写或无法修改的不做处理</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ③: 处理闭包 cellvar</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ④: 新增函数或变量直接添加</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ⑤: 类型变更直接替换</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ⑥: 其他情况也直接替换即可</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    函数基本定义:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    class FunctionType:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        __closure__: Optional[Tuple[_Cell, ...]]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        __code__: CodeType</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        __defaults__: Optional[Tuple[Any, ...]]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        __dict__: Dict[str, Any]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        __globals__: Dict[str, Any]</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        __name__: str</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        __qualname__: str</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        __annotations__: Dict[str, Any]</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        __kwdefaults__: Dict[str, Any]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        def __init__(self, code: CodeType, globals: Dict[str, Any], name: Optional[str] = ..., argdefs: Optional[Tuple[object, ...]] = ..., closure: Optional[Tuple[_Cell, ...]] = ...) -> None: ...</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        def __call__(self, *args: Any, **kwargs: Any) -> Any: ...</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        def __get__(self, obj: Optional[object], type: Optional[type]) -> MethodType: ...</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    闭包问题:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        - Python 函数调用时出现闭包参数不一致,热更后会导致报错</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            def out_func():</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                arg1 = 1</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                def inner_func():</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    print(arg1)</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                return inner_func</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            f = out_func # 热更前代码</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            f = out_func # 热更后代码</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            f() # 调用</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            # out: requires a code object with 1 free vars, not 0</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    闭包原理:</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        - out_func 在执行过程中，会把自身运行栈中内层函数引用的变量以 ob_ref 的形式绑定到 co_cellvars 的tuple当中(out_func.__closure__)。</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        - 在 inner_func 对象内，解开传递进来的 co_cellvars 的tuple并重新绑定到自己的 co_freevars 的tuple中</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        - 如果想要热更闭包内容，只需要替换掉 inner_func.__closure__ 里的内容</pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    部分不可变属性:</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        - \"__class__\"   assignment only supported for heap types or ModuleType subclasses</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        - \"__closure__\" readonly attribute</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        - \"__globals__\" readonly attribute</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> depth <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\"># 闭包参数不一致，无法更新</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    old_cell_var_num <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>old_func<span class=\"token punctuation\">.</span>__closure__<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> old_func<span class=\"token punctuation\">.</span>__closure__ <span class=\"token keyword\">else</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    new_cell_var_num <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>new_func<span class=\"token punctuation\">.</span>__closure__<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> new_func<span class=\"token punctuation\">.</span>__closure__ <span class=\"token keyword\">else</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">if</span> old_cell_var_num <span class=\"token operator\">!=</span> new_cell_var_num<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\"># 更新属性</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_func<span class=\"token punctuation\">,</span> <span class=\"token string\">'__code__'</span><span class=\"token punctuation\">,</span> new_func<span class=\"token punctuation\">.</span>__code__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_func<span class=\"token punctuation\">,</span> <span class=\"token string\">'__defaults__'</span><span class=\"token punctuation\">,</span> new_func<span class=\"token punctuation\">.</span>__defaults__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_func<span class=\"token punctuation\">,</span> <span class=\"token string\">'__dict__'</span><span class=\"token punctuation\">,</span> new_func<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_func<span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span> new_func<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_func<span class=\"token punctuation\">,</span> <span class=\"token string\">'__qualname__'</span><span class=\"token punctuation\">,</span> new_func<span class=\"token punctuation\">.</span>__qualname__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_func<span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> new_func<span class=\"token punctuation\">.</span>__annotations__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\"># 类型标注</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>old_func<span class=\"token punctuation\">,</span> <span class=\"token string\">'__kwdefaults__'</span><span class=\"token punctuation\">,</span> new_func<span class=\"token punctuation\">.</span>__kwdefaults__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\"># def m(cls,a=1,b=2,*kwarg,g=1,v=2): __kwdefaults__ = &#123;'g': 1, 'v': 2&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\"># 更新闭包参数</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">if</span> old_cell_var_num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        ignore_idx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> freevar <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>old_func<span class=\"token punctuation\">.</span>__code__<span class=\"token punctuation\">.</span>co_freevars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\"># super () 操作不改变其指向的父类 __class__</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">if</span> freevar <span class=\"token operator\">==</span> <span class=\"token string\">\"__class__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                ignore_idx<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> old_cellvar <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>old_func<span class=\"token punctuation\">.</span>__closure__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">if</span> idx <span class=\"token keyword\">in</span> ignore_idx<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            new_cellvar <span class=\"token operator\">=</span> new_func<span class=\"token punctuation\">.</span>__closure__<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\"># 闭包参数是函数的话递归更新</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">if</span> inspect<span class=\"token punctuation\">.</span>isfunction<span class=\"token punctuation\">(</span>old_cellvar<span class=\"token punctuation\">.</span>cell_contents<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> inspect<span class=\"token punctuation\">.</span>isfunction<span class=\"token punctuation\">(</span>new_cellvar<span class=\"token punctuation\">.</span>cell_contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> reload_func<span class=\"token punctuation\">(</span>old_cellvar<span class=\"token punctuation\">.</span>cell_contents<span class=\"token punctuation\">,</span> new_cellvar<span class=\"token punctuation\">.</span>cell_contents<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    old_cellvar<span class=\"token punctuation\">.</span>cell_contents <span class=\"token operator\">=</span> new_cellvar<span class=\"token punctuation\">.</span>cell_contents</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token comment\"># 其他情况都视作替换</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                old_cellvar<span class=\"token punctuation\">.</span>cell_contents <span class=\"token operator\">=</span> new_cellvar<span class=\"token punctuation\">.</span>cell_contents</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr></table></figure><h3 id=\"热更-global-object\"><a class=\"anchor\" href=\"#热更-global-object\">#</a> 热更 global object：</h3>\n<p>全局对象的更新就比较的简单，大致可以分为两种：</p>\n<ul>\n<li>能够获取到所有需要热更对象的引用，可以直接在对象上进行修改。</li>\n<li>不能获取的情况下，直接修改模块内的定义。缺点就是已经创建了的对象，内容还是旧的。</li>\n</ul>\n<h3 id=\"测试代码\"><a class=\"anchor\" href=\"#测试代码\">#</a> 测试代码：</h3>\n<ul>\n<li>修改前的代码：</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ccore</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> enum</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> functools</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> dataclasses</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> typing</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> collections</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 全局变量测试</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a_1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a_2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>a_3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a_4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a_5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>a_6 <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>a_7 <span class=\"token operator\">=</span> <span class=\"token builtin\">object</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a_8 <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a_9 <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span>partial<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">,</span> a_2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a_10 <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 函数测试</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_1</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    b_100 <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    b_200 <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> b_100<span class=\"token operator\">+</span>b_200</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_2</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> arg2</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_3</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> arg2 <span class=\"token operator\">+</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_4</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> arg2 <span class=\"token operator\">+</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_5</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> arg2 <span class=\"token operator\">+</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_6</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> arg2 <span class=\"token operator\">+</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_7</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@functools<span class=\"token punctuation\">.</span>wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> arg2 <span class=\"token operator\">+</span> func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> inner</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token decorator annotation punctuation\">@b_7</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_8</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">return</span> arg2 <span class=\"token operator\">+</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_9</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">wapper</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token decorator annotation punctuation\">@functools<span class=\"token punctuation\">.</span>wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> arg2 <span class=\"token operator\">+</span> func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> inner</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> wapper</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token decorator annotation punctuation\">@b_9</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_10</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">return</span> arg2 <span class=\"token operator\">+</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\"># 类测试</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">c_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    c_100 <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    c_200 <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">c_1000</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span> arg2 <span class=\"token operator\">+</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@property</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">C_100</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>c_100</pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">c_2000</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">return</span> arg2 <span class=\"token operator\">+</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@staticmethod</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">c_3000</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">return</span> arg2 <span class=\"token operator\">+</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">c_4000</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arg2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">wapper</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token decorator annotation punctuation\">@functools<span class=\"token punctuation\">.</span>wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">return</span> inner</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">return</span> wapper</pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclasses<span class=\"token punctuation\">.</span>dataclass</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">d_1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    d_100<span class=\"token punctuation\">:</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    d_200<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    d_300<span class=\"token punctuation\">:</span>typing<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dataclasses<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">(</span>default_factory<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    d_400<span class=\"token punctuation\">:</span>typing<span class=\"token punctuation\">.</span>Dict<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dataclasses<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">(</span>default_factory<span class=\"token operator\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>e_1 <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>namedtuple<span class=\"token punctuation\">(</span><span class=\"token string\">\"e_1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e_100 e_200 e_300 e_400\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">INFO</span><span class=\"token punctuation\">(</span>enum<span class=\"token punctuation\">.</span>IntEnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    m_1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    m_2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    m_3 <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><ul>\n<li>修改后的代码：</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> ccore</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> enum</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> functools</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> dataclasses</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> typing</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> collections</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 全局变量测试</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a_1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a_2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>a_3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>a_4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>a_5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>a_6 <span class=\"token operator\">=</span> <span class=\"token number\">2.1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>a_7 <span class=\"token operator\">=</span> <span class=\"token builtin\">object</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a_8 <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>a_9 <span class=\"token operator\">=</span> functools<span class=\"token punctuation\">.</span>partial<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">,</span> a_3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a_10 <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 函数测试</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_1</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    b_100 <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    b_200 <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> b_100<span class=\"token operator\">+</span>b_200</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_2</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> arg1</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_3</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_4</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_5</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_6</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_7</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@functools<span class=\"token punctuation\">.</span>wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">return</span> inner</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token decorator annotation punctuation\">@b_7</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_8</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_9</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">wapper</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token decorator annotation punctuation\">@functools<span class=\"token punctuation\">.</span>wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">return</span> arg1<span class=\"token operator\">+</span> func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> inner</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">return</span> wapper</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token decorator annotation punctuation\">@b_9</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">b_10</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\"># 类测试</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">c_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    c_100 <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    c_200 <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">c_1000</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@property</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">C_100</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>c_100</pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">c_2000</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@staticmethod</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">c_3000</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> arg3 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arg4 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">return</span> arg1 <span class=\"token operator\">+</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arg3 <span class=\"token operator\">+</span> arg4</pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">c_4000</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">wapper</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token decorator annotation punctuation\">@functools<span class=\"token punctuation\">.</span>wraps</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">return</span> inner</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">return</span> wapper</pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token decorator annotation punctuation\">@dataclasses<span class=\"token punctuation\">.</span>dataclass</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">d_1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    d_100<span class=\"token punctuation\">:</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    d_200<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    d_300<span class=\"token punctuation\">:</span><span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    d_400<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>e_1 <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>namedtuple<span class=\"token punctuation\">(</span><span class=\"token string\">\"e_1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"e_100 e_200 e_300\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">INFO</span><span class=\"token punctuation\">(</span>enum<span class=\"token punctuation\">.</span>IntEnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    m_1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    m_2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    m_3 <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><ul>\n<li>测试数据初始化（1 表示热更前，2 表示热更后）</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">init_data</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">import</span> collections</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    d <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    d<span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"a_1\"</span> <span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>a_1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"a_2\"</span> <span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>a_2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"a_3\"</span> <span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>a_3<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"a_4\"</span> <span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>a_4<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"a_5\"</span> <span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>a_5<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"a_6\"</span> <span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>a_6<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"a_7\"</span> <span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>a_7<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"a_8\"</span> <span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>a_8<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"a_9\"</span> <span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>a_9<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"a_10\"</span> <span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>a_10<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    d<span class=\"token punctuation\">[</span><span class=\"token string\">\"func\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string\">\"b_1\"</span><span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>b_1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string\">\"b_2\"</span><span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>b_2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string\">\"b_3\"</span><span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>b_3<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string\">\"b_4\"</span><span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>b_4<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string\">\"b_5\"</span><span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>b_5<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">\"b_6\"</span><span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>b_6<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token string\">\"b_7\"</span><span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>b_7<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token string\">\"b_8\"</span><span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>b_8<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token string\">\"b_9\"</span><span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>b_9<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token string\">\"b_10\"</span><span class=\"token punctuation\">:</span> fix_module<span class=\"token punctuation\">.</span>b_10<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        d<span class=\"token punctuation\">[</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token string\">\"c_1\"</span><span class=\"token punctuation\">:</span>fix_module<span class=\"token punctuation\">.</span>c_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token string\">\"d_1\"</span><span class=\"token punctuation\">:</span>fix_module<span class=\"token punctuation\">.</span>d_1<span class=\"token punctuation\">(</span>d_100<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>d_200<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>d_300<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>d_400<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token string\">\"e_1\"</span><span class=\"token punctuation\">:</span>fix_module<span class=\"token punctuation\">.</span>e_1<span class=\"token punctuation\">(</span>e_100 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>e_200 <span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>e_300 <span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>e_400 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        d<span class=\"token punctuation\">[</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token string\">\"c_1\"</span><span class=\"token punctuation\">:</span>fix_module<span class=\"token punctuation\">.</span>c_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token string\">\"d_1\"</span><span class=\"token punctuation\">:</span>fix_module<span class=\"token punctuation\">.</span>d_1<span class=\"token punctuation\">(</span>d_100<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>d_200<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>d_300<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>d_400<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token string\">\"e_1\"</span><span class=\"token punctuation\">:</span>fix_module<span class=\"token punctuation\">.</span>e_1<span class=\"token punctuation\">(</span>e_100 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>e_200 <span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>e_300 <span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> d</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Output</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\" name </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>k<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> val </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">\"func\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\" name </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>k<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> val </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        c_1 <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"c_1\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_100 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_100<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_200 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_200<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_1000(1,2) </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_1000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.C_100 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>C_100<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_2000(1,2) </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_2000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_3000(1,2) </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_3000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_4000(1,2) </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_4000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">\"func\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\" name </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>k<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> val </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        c_1 <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"c_1\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_100 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_100<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_200 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_200<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_1000(1) </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_1000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.C_100 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>C_100<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_2000(1) </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_2000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_3000(1) </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_3000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"c_1.c_4000(1) </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c_1<span class=\"token punctuation\">.</span>c_4000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    d_1 <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"d_1\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"d_1.d_100 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>d_1<span class=\"token punctuation\">.</span>d_100<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"d_1.d_200 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>d_1<span class=\"token punctuation\">.</span>d_200<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"d_1.d_300 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>d_1<span class=\"token punctuation\">.</span>d_300<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"d_1.d_400 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>d_1<span class=\"token punctuation\">.</span>d_400<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    e_1 <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"e_1\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"e_1.e_100 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e_1<span class=\"token punctuation\">.</span>e_100<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"e_1.e_200 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e_1<span class=\"token punctuation\">.</span>e_200<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"e_1.e_300 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e_1<span class=\"token punctuation\">.</span>e_300<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">if</span> flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"e_1.e_400 </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>e_1<span class=\"token punctuation\">.</span>e_400<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fix_module<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">.</span>m_1<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fix_module<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">.</span>m_2<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fix_module<span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">.</span>m_3<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>最终的输出结果</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#------------------------------------------------------- 旧模块热更前的输出：-------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>name a_1 val <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>name a_2 val <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>name a_3 val <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>name a_4 val <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span>: <span class=\"token number\">1</span>, <span class=\"token number\">2</span>: <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>name a_5 val <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>name a_6 val <span class=\"token number\">1.1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>name a_7 val <span class=\"token operator\">&lt;</span>class <span class=\"token string\">'object'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>name a_8 val <span class=\"token operator\">&lt;</span>built-in <span class=\"token keyword\">function</span> len<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>name a_9 val functools.partial<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>built-in <span class=\"token keyword\">function</span> len<span class=\"token operator\">></span>, <span class=\"token punctuation\">[</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>name a_10 val defaultdict<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>class <span class=\"token string\">'int'</span><span class=\"token operator\">></span>, <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>name b_1 val <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>name b_2 val <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>name b_3 val <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>name b_4 val <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>name b_5 val <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>name b_6 val <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>name b_7 val <span class=\"token operator\">&lt;</span>function b_7.<span class=\"token operator\">&lt;</span>locals<span class=\"token operator\">></span>.inner at 0x000002E77A99370<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>name b_8 val <span class=\"token number\">13</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>name b_9 val <span class=\"token operator\">&lt;</span>function b_9.<span class=\"token operator\">&lt;</span>locals<span class=\"token operator\">></span>.wapper at 0x000002E77A99370<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>name b_10 val <span class=\"token number\">13</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>c_1.c_100 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>c_1.c_200 <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>c_1.c_1000<span class=\"token punctuation\">(</span><span class=\"token number\">1,2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>c_1.C_100 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>c_1.c_2000<span class=\"token punctuation\">(</span><span class=\"token number\">1,2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>c_1.c_3000<span class=\"token punctuation\">(</span><span class=\"token number\">1,2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>c_1.c_4000<span class=\"token punctuation\">(</span><span class=\"token number\">1,2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>function c_1.c_4000.<span class=\"token operator\">&lt;</span>locals<span class=\"token operator\">></span>.wapper at 0x000002E77A99370<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>d_1.d_100 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>d_1.d_200 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>d_1.d_300 <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>d_1.d_400 <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span>: <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>e_1.e_100 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>e_1.e_200 <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>e_1.e_300 <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>e_1.e_400 <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">#------------------------------------------------------- 旧模块热更后的输出：-------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>name a_1 val <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>name a_2 val <span class=\"token punctuation\">[</span><span class=\"token number\">2</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>name a_3 val <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>name a_4 val <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span>: <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>name a_5 val <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>name a_6 val <span class=\"token number\">2.1</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>name a_7 val <span class=\"token operator\">&lt;</span>class <span class=\"token string\">'object'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>name a_8 val <span class=\"token operator\">&lt;</span>built-in <span class=\"token keyword\">function</span> len<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>name a_9 val functools.partial<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>built-in <span class=\"token keyword\">function</span> len<span class=\"token operator\">></span>, <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>name a_10 val defaultdict<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>class <span class=\"token string\">'str'</span><span class=\"token operator\">></span>, <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>name b_1 val <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>name b_2 val <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>name b_3 val <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>name b_4 val <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>name b_5 val <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>name b_6 val <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>name b_7 val <span class=\"token operator\">&lt;</span>function b_7.<span class=\"token operator\">&lt;</span>locals<span class=\"token operator\">></span>.inner at 0x000002E77A9905E<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>name b_8 val <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>name b_9 val <span class=\"token operator\">&lt;</span>function b_9.<span class=\"token operator\">&lt;</span>locals<span class=\"token operator\">></span>.wapper at 0x000002E77A9905E<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>name b_10 val <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>c_1.c_100 <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>c_1.c_200 <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>c_1.c_1000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>c_1.C_100 <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>c_1.c_2000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>c_1.c_3000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>c_1.c_4000<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>function c_1.c_4000.<span class=\"token operator\">&lt;</span>locals<span class=\"token operator\">></span>.wapper at 0x000002E77A9905E<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>d_1.d_100 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>d_1.d_200 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>d_1.d_300 <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>d_1.d_400 <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>e_1.e_100 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>e_1.e_200 <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>e_1.e_300 <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python",
                "Python",
                "热更新"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/python/Python-watchdog/",
            "url": "https://allengx.gitee.io/computer-science/study/python/Python-watchdog/",
            "title": "基于 watchdog 实现自动化更新",
            "date_published": "2020-10-17T07:36:15.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"基于-watchdog-实现自动化更新\"><a class=\"anchor\" href=\"#基于-watchdog-实现自动化更新\">#</a> 基于 watchdog 实现自动化更新</h1>\n<h2 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景：</h2>\n<p>每次修改 Python 后为了不重启服务器进行调试，需要手动执行一个指令来指定需要热更的文件，有时候会比较麻烦。为此写了一个自动识别文件修改的工具，可以实时监听文件的修改并自动执行热更操作。</p>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理：</h2>\n<ol>\n<li>基于 watchdog 监听某个文件下的文件</li>\n<li>发现文件修改后触发相应的 Event。</li>\n<li>根据 Event 内容生成热更指令，写入热更文件。</li>\n<li>热更程序定时读取文件，执行热更指令，并清空文件。</li>\n</ol>\n<h2 id=\"核心代码\"><a class=\"anchor\" href=\"#核心代码\">#</a> 核心代码：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># DATE: 2020/10/16 Fri</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> watchdog<span class=\"token punctuation\">.</span>observers <span class=\"token keyword\">import</span> Observer</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> watchdog<span class=\"token punctuation\">.</span>events <span class=\"token keyword\">import</span> LoggingEventHandler</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventHandler</span><span class=\"token punctuation\">(</span>LoggingEventHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">on_modified</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>event<span class=\"token punctuation\">.</span>src_path<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    event_handler <span class=\"token operator\">=</span> EventHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    observer <span class=\"token operator\">=</span> Observer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    observer<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span>event_handler<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span> recursive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    observer<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        observer<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    observer<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现：</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># DATE: 2020/10/16 Fri</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> enum</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> watchdog<span class=\"token punctuation\">.</span>observers <span class=\"token keyword\">import</span> Observer</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">from</span> watchdog<span class=\"token punctuation\">.</span>events <span class=\"token keyword\">import</span> FileSystemEventHandler</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">(</span>enum<span class=\"token punctuation\">.</span>IntEnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tUPDATE <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterPath</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_paths <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"listen_path\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> _path <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_paths<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> path<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FilterFile</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_files <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"listen_file_ext\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t_<span class=\"token punctuation\">,</span> ext <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> ext <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_files<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CmdConverter</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>root_path <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"converter_root\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_replaces <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"replace_char\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_cmd_format <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd_format\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event_type<span class=\"token punctuation\">:</span> EventType<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> path<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>root_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>root_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> _replace <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_replaces<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\tpath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>_replace<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> event_type <span class=\"token operator\">==</span> EventType<span class=\"token punctuation\">.</span>UPDATE<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_cmd_format<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>write_path <span class=\"token operator\">=</span> WatchDog<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"update_path\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">write_to_file</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>write_path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\tf<span class=\"token punctuation\">.</span>writelines<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoUpdateHandler</span><span class=\"token punctuation\">(</span>FileSystemEventHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_filters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>FilterPath<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FilterFile<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_converter <span class=\"token operator\">=</span> CmdConverter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_writer <span class=\"token operator\">=</span> FileWriter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">on_modified</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> _filter <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_filters<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> _filter<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>src_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\tcmd <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_converter<span class=\"token punctuation\">(</span>EventType<span class=\"token punctuation\">.</span>UPDATE<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>src_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\tself<span class=\"token punctuation\">.</span>_writer<span class=\"token punctuation\">.</span>write_to_file<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'cmd:</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>cmd<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">WatchDog</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tjson_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\tvalid_init <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> cls<span class=\"token punctuation\">.</span>valid_init<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./config.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t\tcls<span class=\"token punctuation\">.</span>json_info <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\tcls<span class=\"token punctuation\">.</span>valid_init <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token keyword\">except</span> Exception<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t<span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_json_info</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> cls<span class=\"token punctuation\">.</span>valid_init<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\tcls<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>json_info<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">def</span> <span class=\"token function\">listen_change</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\tobserver <span class=\"token operator\">=</span> Observer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\tobserver<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span>AutoUpdateHandler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span>cls<span class=\"token punctuation\">.</span>get_json_info<span class=\"token punctuation\">(</span><span class=\"token string\">\"root_path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> recursive<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\tobserver<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t\ttime<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\tobserver<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\tobserver<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\tWatchDog<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\tWatchDog<span class=\"token punctuation\">.</span>listen_change<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>部分路径参数抽离到了  <code>config.json</code>  文件内：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"root_path\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/root\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"listen_path\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"/root/xxxx\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 需要监听的文件目录，有些文件可以忽略修改，在这里进行定制</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"listen_file_ext\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\".py\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 监听文件后缀</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"update_path\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"需要写入的 update 文件，该文件会被热更程序定时读取\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">\"converter_root\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"用于转换更新指令的路径 例如监听路径是 /root/ 修改文件是 /root/code/Python/test.py 而热更指令可能是 update Python.test.py, 所以这里应该填 /root/code/ 用于进行路径转换\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"cmd_format\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"&#123;0&#125; &#123;1&#125;\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 热更指令，例如：update Python.test.py</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"replace_char\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"\\\\\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考内容：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvcmFraGFyZ29zaC93YXRjaGRvZw==\">watchdog github 源码</span></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python",
                "watchdog",
                "python"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/python/Python-C-extension/",
            "url": "https://allengx.gitee.io/computer-science/study/python/Python-C-extension/",
            "title": "编写Python的C扩展",
            "date_published": "2020-10-10T10:00:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"编写python的c扩展\"><a class=\"anchor\" href=\"#编写python的c扩展\">#</a> 编写 Python 的 C 扩展</h1>\n<h2 id=\"构建编译基础环境\"><a class=\"anchor\" href=\"#构建编译基础环境\">#</a> 构建编译基础环境</h2>\n<ul>\n<li>启动 visual studio installer</li>\n<li>安装相关插件和依赖库</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201009163830574.png\" alt=\"image-20201009163830574\" /></p>\n<h2 id=\"编写c扩展代码\"><a class=\"anchor\" href=\"#编写c扩展代码\">#</a> 编写 C 扩展代码</h2>\n<p>简单的 C 扩展大致结构图：</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201009182911183.png\" alt=\"image-20201009182911183\" /></p>\n<ul>\n<li>定义函数： PyMethodDef</li>\n<li>定义模块： PyModuleDef</li>\n<li>定义初始化模块函数：PyInit_module</li>\n</ul>\n<h3 id=\"定义函数\"><a class=\"anchor\" href=\"#定义函数\">#</a> 定义函数</h3>\n<ul>\n<li>\n<p>函数名： <code>模块名_函数名</code></p>\n</li>\n<li>\n<p>参数类型  <code>ml_flags</code>  ：</p>\n<ul>\n<li><strong>METH_VARARGS</strong> ：只包含元组参数  <code>def func(self, *args)</code></li>\n<li><strong>METH_VARARGS | METH_KEYWORDS</strong> ：包含元组及字典参数  <code>def func(self, *args, **kwargs)</code></li>\n<li><strong>METH_FASTCALL</strong> ：固定个数的元组参数。顾名思义，采用快速调用效率较高。  <code>def func(self, arg1, arg2, argN)</code></li>\n<li><strong>METH_FASTCALL | METH_KEYWORDS</strong> ：固定个数元组参数 + 字典参数。 <code>def func(self, arg1, arg2, argN, **kwargs)</code></li>\n<li><strong>METH_NOARGS</strong> ：无参函数。 <code>def func(self)</code></li>\n<li><strong>METH_O</strong> ：单个参数。 <code>def func(self, arg1)</code></li>\n<li><strong>METH_CLASS</strong> ：类函数。 <code>def func(cls)</code></li>\n<li><strong>METH_STATIC</strong> ：静态函数。 <code>def func()</code></li>\n</ul>\n</li>\n<li>\n<p>逻辑代码</p>\n<ul>\n<li>\n<p>参数解析（PyArg_Parse）：</p>\n<ul>\n<li>\n<p><strong>PyArg_ParseTuple</strong> ：解析位置参数。</p>\n<ul>\n<li><code>PyArg_ParseTuple(PyObject* args, const char* format, ...)</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">PyArg_ParseTuple</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span><span class=\"token string\">\"iis\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Python call:func(i:int, j:int, s:str)</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>PyArg_VaParse</strong>：用于解析可变数量参数，通过  <code>var_list</code>  承载。</p>\n<ul>\n<li><code>PyArg_VaParse(PyObject* args, const char* format, va_list  vargs)</code> 。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3Byb2dyYW1taW5nLmNvbS90dXRvcmlhbC9jL2xlc3NvbjE3Lmh0bWw=\">相关使用案例</span></li>\n</ul>\n</li>\n<li>\n<p><strong>PyArg_ParseTupleAndKeywords</strong>：解析位置和关键字参数。</p>\n<ul>\n<li><code>PyArg_ParseTupleAndKeywords(PyObject* args, PyObject* kw, const char* format, char* keywords[], ...)</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>foo <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bar <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>baz <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>keywords<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">PyArg_ParseTupleAndKeywords</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> kwargs<span class=\"token punctuation\">,</span><span class=\"token string\">\"ss|sss\"</span><span class=\"token punctuation\">,</span> keywords<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>foo<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bar<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>baz<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// Python call:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// func() // Fails, require a and b</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// func('a') // fails, requires b</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// func('a', 'b')</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// func('a', 'b', foo='foo', bar='bar', baz='baz) </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// func('a', 'b','foo', 'bar', 'baz')</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// func(a='a', b='b', foo='foo', bar='bar', baz='baz')</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>PyArg_VaParseTupleAndKeywords</strong> ：解析可变数量参数和关键字参数。</p>\n<ul>\n<li><code>PyArg_VaParseTupleAndKeywords(PyObject* args, PyObject* kw, const char* format, char* keywords[], va_list  vargs)</code></li>\n</ul>\n</li>\n<li>\n<p><strong>PyArg_ValidateKeywordArguments</strong> ：解析关键字参数，关键字必须为字符串</p>\n<ul>\n<li><code>PyArg_ValidateKeywordArguments(PyObject* kw)</code></li>\n</ul>\n</li>\n<li>\n<p><strong>PyArg_UnpackTuple</strong> ：解析特定长度范围的元组。</p>\n<ul>\n<li><code>PyArg_UnpackTuple(PyObject* args, const char* name, Py_ssize_t* min, Py_ssize_t* max, ...) </code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>返回值 ——  <code>Py_BuildValue</code>  ：</p>\n<ul>\n<li><code>PyObject *Py_BuildValue(const char *format, ...)</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>                        None</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>                  <span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iii\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">789</span><span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">,</span> <span class=\"token number\">789</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>              <span class=\"token string\">'hello'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>              b<span class=\"token string\">'hello'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ss\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>          <span class=\"token string\">'hell'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>          b<span class=\"token string\">'hell'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"()\"</span><span class=\"token punctuation\">)</span>                      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(i)\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>                <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(ii)\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span>          <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(i,i)\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span>         <span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[i,i]\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span>         <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;s:i,s:i&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'abc'</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'def'</span><span class=\"token operator\">:</span> <span class=\"token number\">456</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"((ii)(ii)) (ii)\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>format</code>  格式：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>s</code></td>\n<td>const char *</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td><code>s*</code></td>\n<td>Py_buffer</td>\n<td>生成的 C 字符串可能包含嵌入的 NULL 字节</td>\n</tr>\n<tr>\n<td><code>s#</code></td>\n<td>const char *，int</td>\n<td>拆解出两个对象，一个 str，一个 len</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>const char *</td>\n<td>字符串或者 None</td>\n</tr>\n<tr>\n<td><code>z*</code></td>\n<td>Py_buffer</td>\n<td>生成的 C 字符串可能包含嵌入的 NULL 字节或者 None</td>\n</tr>\n<tr>\n<td><code>z#</code></td>\n<td>const char *，int</td>\n<td>拆解出两个对象，一个 str 或者 None，一个 len</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>const char *</td>\n<td>只读字节对象</td>\n</tr>\n<tr>\n<td><code>S</code></td>\n<td>PyBytesObject *</td>\n<td>python 的 bytes 对象</td>\n</tr>\n<tr>\n<td><code>Y</code></td>\n<td>PyByteArrayObject *</td>\n<td>Python 的 bytearray 对象</td>\n</tr>\n<tr>\n<td><code>b</code></td>\n<td>int</td>\n<td>无符号整数</td>\n</tr>\n<tr>\n<td><code>B</code></td>\n<td>int</td>\n<td>无符号整数且不进行溢出检查</td>\n</tr>\n<tr>\n<td><code>h</code></td>\n<td>int</td>\n<td>短整型</td>\n</tr>\n<tr>\n<td><code>H</code></td>\n<td>int</td>\n<td>不进行溢出检查的短整型</td>\n</tr>\n<tr>\n<td><code>i</code></td>\n<td>int</td>\n<td>正常整数</td>\n</tr>\n<tr>\n<td><code>l</code></td>\n<td>long int</td>\n<td>C 的长整形</td>\n</tr>\n<tr>\n<td><code>c</code></td>\n<td>char</td>\n<td>字符</td>\n</tr>\n<tr>\n<td><code>d</code></td>\n<td>double</td>\n<td>双精度浮点</td>\n</tr>\n<tr>\n<td><code>f</code></td>\n<td>float</td>\n<td>单精度浮点</td>\n</tr>\n<tr>\n<td><code>p</code></td>\n<td>bool</td>\n<td>bool 类型本质上还是 int</td>\n</tr>\n<tr>\n<td><code>D</code></td>\n<td>Py_complex *</td>\n<td>复数</td>\n</tr>\n<tr>\n<td><code>(...)</code></td>\n<td>tuple</td>\n<td>序列</td>\n</tr>\n<tr>\n<td><code>[...]</code></td>\n<td>list</td>\n<td>列表</td>\n</tr>\n<tr>\n<td><code>&#123;...&#125;</code></td>\n<td>dict</td>\n<td>字典</td>\n</tr>\n<tr>\n<td><code>O</code></td>\n<td>PyObject*</td>\n<td>Python 对象，不修改其引用计数</td>\n</tr>\n<tr>\n<td><code>O&amp;</code></td>\n<td>convert+void*</td>\n<td>将 Python 对象转为 C。 <code>C-obj = converter(py-obj, O&amp;);</code></td>\n</tr>\n<tr>\n<td><code>\\|</code></td>\n<td></td>\n<td>表示后续参数是可选的 i|s :  <code>一个整数，一个字符串。字符串可选</code></td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td></td>\n<td>表示后续参数仅是关键字</td>\n</tr>\n<tr>\n<td><code>:</code></td>\n<td></td>\n<td>格式单位列表到此结束；在错误消息中使用冒号后的字符串作为函数名</td>\n</tr>\n<tr>\n<td><code>;</code></td>\n<td></td>\n<td>格式单位列表到此结束；分号后的字符串用作错误消息。 <code>:</code>  和 <code>;</code>  相互排斥。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"exmaple\"><a class=\"anchor\" href=\"#exmaple\">#</a> exmaple：</h4>\n<h5 id=\"定义python的c扩展\"><a class=\"anchor\" href=\"#定义python的c扩展\">#</a> 定义 Python 的 C 扩展</h5>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>ccore<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Python.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> PyObject<span class=\"token operator\">*</span> <span class=\"token function\">ccore_calc</span><span class=\"token punctuation\">(</span>PyObject<span class=\"token operator\">*</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">Py_BuildValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyMethodDef</span> module_methods<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>PyCFunction<span class=\"token punctuation\">)</span>ccore_calc<span class=\"token punctuation\">,</span> METH_NOARGS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"这是一个简单测测试\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyModuleDef</span> modulemethod <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  PyModuleDef_HEAD_INIT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token string\">\"ccore\"</span><span class=\"token punctuation\">,</span>           <span class=\"token comment\">/* name of module */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token string\">\"A sample module\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* Doc string (may be NULL) */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">/* Size of per-interpreter state or -1 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  module_methods       <span class=\"token comment\">/* Method table */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>PyMODINIT_FUNC <span class=\"token function\">PyInit_ccore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">PyModule_Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>modulemethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>setup<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> distutils<span class=\"token punctuation\">.</span>core <span class=\"token keyword\">import</span> setup</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> distutils<span class=\"token punctuation\">.</span>extension <span class=\"token keyword\">import</span> Extension</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>setup<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Py_ccore'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      version<span class=\"token operator\">=</span><span class=\"token string\">'1.0'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      ext_modules<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>Extension<span class=\"token punctuation\">(</span><span class=\"token string\">'ccore'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ccore.c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"构建指令\"><a class=\"anchor\" href=\"#构建指令\">#</a> 构建指令</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python setup.py <span class=\"token function\">install</span></pre></td></tr></table></figure><h5 id=\"调用python的c扩展\"><a class=\"anchor\" href=\"#调用python的c扩展\">#</a> 调用 Python 的 C 扩展</h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ccore</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ccore<span class=\"token punctuation\">.</span>calc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Out<span class=\"token punctuation\">:</span><span class=\"token number\">100</span></pre></td></tr></table></figure><h3 id=\"定义-pymethoddef\"><a class=\"anchor\" href=\"#定义-pymethoddef\">#</a> 定义 PyMethodDef</h3>\n<ul>\n<li>C 层的定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyMethodDef</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ml_name<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   PyCFunction ml_meth<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">int</span> ml_flags<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ml_doc<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>ml_name</code></td>\n<td style=\"text-align:left\">const char *</td>\n<td style=\"text-align:left\">函数名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ml_meth</code></td>\n<td style=\"text-align:left\">PyCFunction</td>\n<td style=\"text-align:left\">函数指针</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ml_flags</code></td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">参数类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ml_doc</code></td>\n<td style=\"text-align:left\">const char *</td>\n<td style=\"text-align:left\">函数说明</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"c-层的使用\"><a class=\"anchor\" href=\"#c-层的使用\">#</a> C 层的使用：</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyMethodDef</span> module_methods<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>PyCFunction<span class=\"token punctuation\">)</span>ccore_calc<span class=\"token punctuation\">,</span> METH_NOARGS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"func.__doc__\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    # <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>等价于定义了一个如下结构的函数，不包含实现和返回值</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"func.__doc__\"\"\"</span>\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h3 id=\"定义-pymoduledef\"><a class=\"anchor\" href=\"#定义-pymoduledef\">#</a> 定义 PyModuleDef</h3>\n<ul>\n<li>C 层的定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyModuleDef</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyModuleDef_HEAD_INIT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   \t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>m_name<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>m_doc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   \tPy_ssize_t m_size<span class=\"token punctuation\">;</span> <span class=\"token comment\">//。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   \tPyMethodDef <span class=\"token operator\">*</span> m_methods<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>m_base</code></td>\n<td style=\"text-align:left\">PyModuleDef_Base</td>\n<td style=\"text-align:left\">始终将此成员初始化为 <code>PyModuleDef_HEAD_INIT</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>m_name</code></td>\n<td style=\"text-align:left\">const char *</td>\n<td style=\"text-align:left\">模块名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>m_doc</code></td>\n<td style=\"text-align:left\">const char *</td>\n<td style=\"text-align:left\">模块说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>m_size</code></td>\n<td style=\"text-align:left\">Py_ssize_t</td>\n<td style=\"text-align:left\">设置存储模块， -1 表示全局状态，不支持子解释器。<br />更多详细信息，请参见<a href=\"https://www.python.org/dev/peps/pep-3121\"><strong> PEP 3121</strong></a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>m_methods</code></td>\n<td style=\"text-align:left\">PyMethodDef *</td>\n<td style=\"text-align:left\">函数列表指针</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"c-层的使用-2\"><a class=\"anchor\" href=\"#c-层的使用-2\">#</a> C 层的使用：</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyModuleDef</span> modulemethod <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  PyModuleDef_HEAD_INIT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token string\">\"ccore\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token string\">\"A sample module\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>     </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  module_methods       </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>等价于定义了一个如下结构的模块</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>ccore<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"A sample module\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"func.__doc__\"\"\"</span>\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h3 id=\"定义初始化模块函数\"><a class=\"anchor\" href=\"#定义初始化模块函数\">#</a> 定义初始化模块函数</h3>\n<p>如下代码定义模块的创建</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PyMODINIT_FUNC <span class=\"token function\">PyInit_ccore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// PyInit_模块名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">PyModule_Create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>modulemethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// modulemethod is PyModuleDef obj</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考资料：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9jLWFwaS9zdHJ1Y3R1cmVzLmh0bWw/aGlnaGxpZ2h0PW1ldGhfI01FVEhfTk9BUkdT\">Python 官方手册</span></p>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/task-list/plan-table/",
            "url": "https://allengx.gitee.io/computer-science/task-list/plan-table/",
            "title": "计划表",
            "date_published": "2020-10-08T07:10:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>个人计划，希望能够顺利完成 /(ㄒ o ㄒ)/ <s>咕咕咕</s></p>\n</div>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> 阅读《python 源码剖析》</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\" /><label for=\"cbx_1\"> 阅读《微服务架构与实践》</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\"> python「工匠」</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\" /><label for=\"cbx_3\"> go-mrico 代码研读</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_4\"> 了解 Python 热更新机制</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_5\"> 掌握 Python 的 C 扩展编写</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\" /><label for=\"cbx_6\"> 完成基于 Pyside2 的导表工具</label></li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "任务清单"
            ]
        },
        {
            "id": "https://allengx.gitee.io/computer-science/study/python/Python2-Source-Code/",
            "url": "https://allengx.gitee.io/computer-science/study/python/Python2-Source-Code/",
            "title": "python2源码剖析",
            "date_published": "2020-10-08T06:49:00.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为个人学习笔记整理</p>\n</div>\n<h1 id=\"python源码阅读\"><a class=\"anchor\" href=\"#python源码阅读\">#</a> python 源码阅读</h1>\n<h2 id=\"数据类型分析\"><a class=\"anchor\" href=\"#数据类型分析\">#</a> 数据类型分析</h2>\n<h3 id=\"pyintobjectpython中的int类型\"><a class=\"anchor\" href=\"#pyintobjectpython中的int类型\">#</a> PyIntObject——python 中的 int 类型</h3>\n<ul>\n<li>python 计算两个整数 ()\n<ul>\n<li>出现溢出后会转换成 long 类型（无限大整数）。</li>\n</ul>\n</li>\n<li>python 整数缓存\n<ul>\n<li><code>[-5~256]</code>  的整数。</li>\n<li>提供多个缓存块，每个能够存放 <code>(100/8)</code>  数量的 int 类型。</li>\n<li>控制这些块的结构是一个单向链表（指向每个块中第一个违背使用的内存块）。</li>\n<li>申请新的缓存块采用头插法。</li>\n<li>空闲地址指针 (free_list) 会串起所有缓存块的地址空间 (单链表)。</li>\n<li>对象释放后会以头插的形式再次加入到 (free_list)。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>隐患：py2.5 之前的版本（之后的不清楚），malloc 出来的缓存块没有一个回收机制，即：创建足够多的对象（malloc 足够多的缓存块）会导致另一种意义上的内存被榨干。</p>\n</blockquote>\n<h3 id=\"pystringobjectpython中的string类型\"><a class=\"anchor\" href=\"#pystringobjectpython中的string类型\">#</a> PyStringObject——python 中的 string 类型</h3>\n<ul>\n<li>字符串的 hash\n<ul>\n<li>初始为 -1。</li>\n<li>字符串 hash 采用的算法不够理想，性能消耗较大，会对每个字符进行  <code>乘</code>  操作。</li>\n</ul>\n</li>\n<li>字符串的特性\n<ul>\n<li>长度不能超过  <code>(2**32)/2</code> ，大概是 21 亿多位，2GB 左右大小。超过则不会创建。</li>\n</ul>\n</li>\n<li>intern 内存共享\n<ul>\n<li>针对相同字符串，<s>不重复创建</s>（其实还是会创建，再销毁），它们共享同一块数据。</li>\n<li>只会生效在  <code>PyStringObject</code>  对象，其子类不会生效。</li>\n<li>创建新对象时会判断是否已经存在，如果已经存在了，会删除原来创建的对象，然后修改其指针指向。</li>\n</ul>\n</li>\n<li>字符缓冲区\n<ul>\n<li>针对单个字符进行缓存，功能类似整数缓存，长度为 (2**8)——256 个字符。</li>\n<li>初始阶段为空，每次创键新的字符，且不再缓存区内时，进行 intern 操作后，加入进去。</li>\n<li><code>+</code>  操作在 string 中执行效率非常低下（string 对象本身是不可变长类型），推荐使用 <code>join</code>  来一次处理多个。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"pylistobjectpython中的list类型\"><a class=\"anchor\" href=\"#pylistobjectpython中的list类型\">#</a> PyListObject——python 中的 list 类型</h3>\n<ul>\n<li>形如 c++ 的 vector，本质还是一个数组，分配空间时，多分配一部分，用于动态扩充。</li>\n<li>管理 list 的指针同样也有一块缓存区，可存储数量是 80 个。如果已经全部占用，则会通过 <code>GC_NEW</code>  的方式创建新的。</li>\n<li>容量调整。在容量不在限制范围内（1/2 容量～容量上限之间）。会进行（扩容 / 缩容）操作，调整方法为： <code>newsize/8 + (newsize &lt;9 ? 3:6) + newsize</code></li>\n<li>负值索引的秘诀就在，获取下标的时候针对负数执行  <code>+size</code>  操作</li>\n<li>insert 对于 list 来说性能消耗要比 append 高，因为需要后移 insert 之后的元素。</li>\n<li>对象销毁后会尝试加入缓存区，如果缓冲区满了则释放掉。但是对象管理的内存会被归还。</li>\n<li>销毁后放回缓冲区的对象会替换原来正在被使用的缓存对象，但是这并不影响。因为被剔除的对象正在被其他对象使用，所以不会被释放。只是不被缓存区管理了。</li>\n</ul>\n<h3 id=\"pydictobjectpython中的dict类型\"><a class=\"anchor\" href=\"#pydictobjectpython中的dict类型\">#</a> PyDictObject——python 中的 dict 类型</h3>\n<ul>\n<li>数据结构是 hashtable，采用开放定址法进行冲突解决（二次探测）。</li>\n<li>伪删除，字典 key 和 value 被删除时，会暂时保留 key，并且赋值为 dummy，保证能够继续通过探测链找到后续节点。但是也可以对处于 dummy 的 key 进行赋值。相当于占着坑位。</li>\n<li>dict 的 entry 的三种状态\n<ul>\n<li>active（key，val 都不为 null）</li>\n<li>dummy（key 为 dummy，val 为 null）</li>\n<li>unused（key，val 都是 null）</li>\n</ul>\n</li>\n<li>hashtable 的最初大小为 <code>8</code> ，dict 对象的创建同样使用了缓冲池，方式等同于 List。缓存 80 个。</li>\n<li>hashtable 的映射函数是直接用某个对象的 hash 值和 dict 的大小做 <code>与</code> 操作保证结果小于等于 dict 大小。</li>\n<li>判断 key 是否存在需要判断 key 的地址是否相同，不相同再去判断 值的 hash 是否相同，相同再去进行对应的比较。</li>\n<li>hash 匹配失败后的再次 hash 策略：\n<ul>\n<li>上一个 entry 的 hash 与上容器大小为  <code>i</code></li>\n<li>第一个 entry 的 hash 为  <code>k</code></li>\n<li>冲突次数  <code>s</code></li>\n<li>dict 容器大小为  <code>m</code></li>\n<li>下一个地址公式： <code>（i * 4 + i + k / （4 * s * 常量） + 1） &amp; m</code></li>\n</ul>\n</li>\n<li>变更容量操作：\n<ul>\n<li>装载率： <code>active和dummy的数量 / 总容量</code></li>\n<li>当执行插入操作时，有 Unused 或者 Dummy 对象被填充，并且插入后装载率≥2/3 会进行扩容。</li>\n<li>变容方式 当前  <code>active的节点数*(active的节点数 &gt; 50000 ? 2 : 4)</code> ，如果大于 50000 变容为原来 active 节点的 2 倍。否则变容为 4 倍。</li>\n<li>上面的规则只是期望的变容值，实际结果还需要再次计算，计算方式为 8 的指数增长≥期望变容值。例如期望变容 20，那么最终扩容值会是  <code>8*2*2 = 32</code></li>\n<li>判断变容后和之前容量是否为 8，是则不需要变容。否则，分配新内存，把原来的 active 数据插入到新的内存中。释放原有内存。</li>\n<li>触发缩容的情况：在 active 节点较少，dummy 节点较多，进行插入操作，使得变容条件成立时，触发缩容。python2.7 可能不生效，3.7 可以。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"python的编译细节\"><a class=\"anchor\" href=\"#python的编译细节\">#</a> python 的编译细节</h2>\n<h3 id=\"pyc文件\"><a class=\"anchor\" href=\"#pyc文件\">#</a> pyc 文件</h3>\n<ul>\n<li>运行时的 python 中，字节码会被存储在 PyCodeObject 中。如果一个代码块被其他模块引用（import），python 会首先去寻找对应的 pyc 文件或者 dll 文件，如果没有则会把字节码内容编译到 pyc 内，再 import，pyc 文件。本质上 pyc 文件是 python 运行时对 PyCodeObject 的一个承载。</li>\n<li>pyc 文件保存的内容都是以二进制的形式。记录内容：\n<ul>\n<li>magic number 用于版本控制</li>\n<li>time 时间戳</li>\n<li>PyCodeObject 对象</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"pyframeobject对象\"><a class=\"anchor\" href=\"#pyframeobject对象\">#</a> PyFrameObject 对象</h3>\n<ul>\n<li>运行时的 python 内部对象。可以理解为 python 中一段 code block 所生成的对象。</li>\n<li>维护了当前 code block 的全部内容：\n<ul>\n<li>loacl: 本地变量。</li>\n<li>global: 全局变量。</li>\n<li>builtin: 内建变量。</li>\n<li>f_back: 用于返回上一层的指针。</li>\n</ul>\n</li>\n<li>维护 PyFrameObject 的「栈」空间:\n<ul>\n<li>f_valuestack: 指向栈的顶部。</li>\n<li>f_stacktop: 指向当前栈顶。</li>\n<li>f_localsplus: 栈起始空间（栈顶等于栈起始空间 + extras）</li>\n<li>extras: 一些指针等额外的空间。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"python控制流\"><a class=\"anchor\" href=\"#python控制流\">#</a> python 控制流</h2>\n<ul>\n<li>\n<p><code>if</code>  控制流 ——compare 操作</p>\n<ul>\n<li>if 控制流的跳转操作只能向前。</li>\n<li>原理：通过  <code>JUMP_IF_FALSE</code>  和  <code>JUMP_IF_TRUE</code>  和  <code>JUMP_FORWARD</code>  在不同代码片段实现跳转。</li>\n<li>if 控制流通常涉及到比较操作。python 的比较分为  <code>quick_compare</code>  和  <code>slow_compare</code> ，两者速度相差甚远\n<ul>\n<li>快比较适用于两个都是整数类型</li>\n<li>其他情况下会执行慢比较</li>\n</ul>\n</li>\n<li>常见的比较类型：\n<ul>\n<li><code>&lt;</code></li>\n<li><code>&gt;</code></li>\n<li><code>==( is)</code></li>\n<li><code>!=</code></li>\n<li><code>&gt;=</code></li>\n<li><code>&lt;=</code></li>\n<li><code>in</code></li>\n</ul>\n</li>\n<li>慢比较时，如果两个对象类型相同，且不是自定义对象，那么 python 会使用  <code>tp_richcompare</code>  比较器进行比较，如果没有定义  <code>tp_richcompare</code>  或者不满足前面的条件，则会使用用户自定义的  <code>tp_compare</code>  进行比较。如果上述两个比较器均未实现，python 还会尝试调用  <code>do_richcmp</code>  进行最后的垂死挣扎，这也是慢比较低下的原因。</li>\n<li>goto 指令：\n<ul>\n<li>JUMP_FORWARD：跳转到  <code>if else</code>  语句的最终结尾</li>\n<li>JUMP_IF_FALSE：跳转到对应 false 的逻辑处</li>\n<li>JUMP_IF_TRUE：跳转到对应 true 的逻辑处</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>for</code>  控制流</p>\n<ul>\n<li>for 控制流的跳转操作可以向前也可以回退。</li>\n<li>原理：for 语句会把全部对象顺序压入栈中，并把对象的迭代器设置为栈顶，然后通过 SET_TOP 跳转到栈顶，根据迭代器的 tp_iternext 找到对应的元素，进行迭代。</li>\n<li>goto 指令：\n<ul>\n<li>JUMP_ABSOLUTE：回到 FOR_ITER 指令位置，重新开始迭代下一个对象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>switch case</code>  控制流</p>\n<ul>\n<li>没有了</li>\n</ul>\n</li>\n<li>\n<p><code>while</code>  控制流</p>\n<ul>\n<li>while 和 for 控制流类似。</li>\n</ul>\n</li>\n<li>\n<p><code>exception</code>  控制流</p>\n<ul>\n<li>异常控制流主要是处理 python 程序在执行过程中如何抛出和捕获异常的控制流。</li>\n<li>原理：程序执行过程中会构建一个调用栈，当执行到某个函数触发了异常，程序将通过  <code>PyEval_ExalFrameEx</code>  函数进行处理，如果没有检测到 except 时， 函数的状态会从  <code>WHY_NOT</code>  转变为  <code>WHY_EXCEPTION</code> ，并返回 NULL，同时调整栈指针指向上一层。</li>\n<li>异常控制流程图：</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200927160601568.png\" alt=\"image-20200927160601568\" /></p>\n<ul>\n<li><code>PyEval_ExalFrameEx</code>  函数伪代码：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PyObject<span class=\"token operator\">*</span> <span class=\"token function\">PyEval_EvalFrameEx</span><span class=\"token punctuation\">(</span>PyFrameObject <span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 非正常执行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>why <span class=\"token operator\">!=</span> WHY_NOT <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token operator\">-></span>f_iblock <span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            PyTryBlock <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token function\">PyFrame_BlockPop</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 有 finally 或者 except 语句</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>b_type <span class=\"token operator\">==</span> SETUP_FINALLY <span class=\"token operator\">||</span> b<span class=\"token operator\">-></span>b_type <span class=\"token operator\">==</span> SETUP_EXCEPT <span class=\"token operator\">&amp;&amp;</span> why <span class=\"token operator\">==</span> WHY_EXCEPTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                 <span class=\"token comment\">// 出现异常，先把异常信息取出来，如果后续没有 except，需要保留现场信息并返回给上一级。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>why <span class=\"token operator\">==</span> WHY_EXCEPTION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    PyObject <span class=\"token operator\">*</span>exc<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>val<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token function\">PyErr_Fetch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>exc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token function\">PUSH</span><span class=\"token punctuation\">(</span>tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token function\">PUSH</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token function\">PUSH</span><span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 设置为正常运转，并调用 except 或 finally</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">//except 执行后会继续在当前栈帧运行（异常被解决）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 无 except 的情况下，finally 执行后会展开到上一层（异常未被解决）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                why <span class=\"token operator\">=</span> WHY_NOT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">JUMPTO</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>b_handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>why <span class=\"token operator\">!=</span> WHY_NOT<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 不存在异常处理，展开堆栈，抛给上一层</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>why <span class=\"token operator\">!=</span> WHY_RETURN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        retval <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 通知前一栈帧有异常</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>    </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token comment\">// 设置活动栈帧为当前栈帧的上一个，完成栈帧回退</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   tstate<span class=\"token operator\">-></span>frame <span class=\"token operator\">=</span> f<span class=\"token operator\">-></span>f_back<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token keyword\">return</span> retval</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 示例 h () -> g () ->f () -> 1/0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    g<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>h<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200927145147290.png\" alt=\"image-20200927145147290\" /></p>\n<ul>\n<li><code>try catch</code>  控制流</li>\n</ul>\n<h2 id=\"python函数机制\"><a class=\"anchor\" href=\"#python函数机制\">#</a> python 函数机制</h2>\n<h3 id=\"pyfunctionobject\"><a class=\"anchor\" href=\"#pyfunctionobject\">#</a> PyFunctionObject</h3>\n<p>PyFunctionObject 对象创建后，随之而来的会创建 PyFrameObject（栈帧） 对象，并为其开辟一块内存空间用于存放函数内用到的各种变量。PyCodeObject 对象则是 PyFunctionObject 对象的静态形式，不保留函数运行时的上下文，只存储基本的信息，而 PyFunctionObject 对象则在程序运行时产生。基本结构如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_code<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 对应函数编译后的 PyCodeObject 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_globals<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 函数运行时 global 名字空间</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_defaults<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 默认参数（tuple 或 NULL）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_closure<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// NULL or tuple of cell objects, 用于实现 closure（闭包）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_doc<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 函数文档</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_name<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 函数名称，函数的 __name__属性</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_dict<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 函数的 __dict__ 属性</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_weakreflist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func_module<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 函数的 __module__, 可以是任何对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> PyFunctionObject<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>快速通道：python 为函数的执行提供了一个快速通道，常规的函数  <code>def func(arg1,arg2)</code>  可以通过快速通道执行，而 pythonic 形式的函数  <code>def func(*args,**kwargs)</code>  则无法通过快速通道执行。\n<ul>\n<li>一般位置参数：（√）</li>\n<li>其他：（×）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数参数实现\"><a class=\"anchor\" href=\"#函数参数实现\">#</a> 函数参数实现</h3>\n<h4 id=\"参数类别\"><a class=\"anchor\" href=\"#参数类别\">#</a> 参数类别</h4>\n<ul>\n<li>位置参数：\n<ul>\n<li>一般位置参数： <code>def func(arg1,arg2)</code></li>\n<li>默认位置参数： <code>def func(arg1=1,arg2=2)</code></li>\n</ul>\n</li>\n<li>键参数： <code>func(arg1=1,arg2=2)</code></li>\n<li>扩展位置参数： <code>func(*args)</code></li>\n<li>扩展键参数： <code>func(**kwargs)</code></li>\n</ul>\n<h4 id=\"参数数量\"><a class=\"anchor\" href=\"#参数数量\">#</a> 参数数量</h4>\n<ul>\n<li>CALL_FUNCTION：通过 2 个字节标识参数数量，高字节表示键参数数量，低字节表示位置参数数量。所以函数最多可以有 256 个位置参数和 256 个键参数。值得注意，该问题在 python3.7 之后已经没有了。唯一限制数量的因素：\n<ul>\n<li><code>list</code> ， <code>tuple</code>  和  <code>dict</code>  仅受限于  <code>sys.maxsize</code></li>\n<li><code>*args</code>  和  <code>**kwargs</code>  仅受限于  <code>sys.maxint</code></li>\n<li><code>*args</code>  和  <code>**kwargs</code>   都只占用一个参数数量，在编译时会被处理成  <code>PyListObject</code>  和  <code>PyDictObject</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"参数位置\"><a class=\"anchor\" href=\"#参数位置\">#</a> 参数位置</h4>\n<p>函数参数和运行时栈的空间，在逻辑上是分离的，参数会被存放在  <code>f_localsplus</code>  中。而 PyFrameObject 则保存了  <code>f_localsplus</code>  的栈顶指针。</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200928174020983.png\" alt=\"image-20200928174020983\" /></p>\n<h4 id=\"扩展参数\"><a class=\"anchor\" href=\"#扩展参数\">#</a> 扩展参数</h4>\n<p>扩展参数申明后，会提供一个标记，用于函数读取参数时区分是否需要处理扩展参数：</p>\n<ul>\n<li>扩展位置参数：CO_VARARGS</li>\n<li>扩展键参数：CO_VARKEYWORDS</li>\n</ul>\n<h3 id=\"函数内变量\"><a class=\"anchor\" href=\"#函数内变量\">#</a> 函数内变量</h3>\n<p>函数内的变量和函数参数类似，都是存放在  <code>f_localsplus</code>   中运行时栈前面的一段内存空间中</p>\n<h3 id=\"嵌套-闭包-装饰器\"><a class=\"anchor\" href=\"#嵌套-闭包-装饰器\">#</a> 嵌套、闭包、装饰器</h3>\n<h4 id=\"嵌套函数\"><a class=\"anchor\" href=\"#嵌套函数\">#</a> 嵌套函数</h4>\n<ul>\n<li>co_cellvars：通常是一个 tuple，保存嵌套作用域中使用到的变量名集合，存放在  <code>f_localsplus</code>   的  <code>内嵌对象</code>  中。</li>\n<li>co_freevars：通常是一个 tuple，保存了使用外层作用域的变量名集合，存放在  <code>f_localsplus</code>   的  <code>外引对象</code>  中。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">in</span></pre></td></tr></table></figure><p>该嵌套函数中  <code>out</code>  函数中的  <code>co_cellvars</code>  内会保存  <code>i</code>  变量，同理  <code>in</code>  函数中的  <code>co_freevars</code>  内也会保存  <code>i</code>  变量。</p>\n<h4 id=\"闭包closure\"><a class=\"anchor\" href=\"#闭包closure\">#</a> 闭包（closure）</h4>\n<p>当内层函数使用外层函数的变量的这种形式被称之为闭包，闭包的实现原理大致可以理解为：</p>\n<ul>\n<li>外层函数在执行过程中，会把自身运行栈中的变量以  <code>ob_ref</code>  的形式绑定到  <code>co_cellvars</code>  的 tuple 当中。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200928212157054.png\" alt=\"image-20200928212157054\" /></li>\n<li>在需要向内层传递时，首先会创建一个内层函数的对象，存储在局部变量上 inner_func，并把  <code>co_cellvars</code>  的 tuple 链接到  inner_func 对象的 tuple 上。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200928212220150.png\" alt=\"image-20200928212220150\" /></p>\n<ul>\n<li>最终，在 inner_func 对象内，解开传递进来的  <code>co_cellvars</code>  的 tuple 并重新绑定到自己的  <code>co_freevars</code>  的 tuple 中，便完成了整个闭包的参数传递过程</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200928213023716.png\" alt=\"image-20200928213023716\" /></p>\n<h4 id=\"装饰器decorator\"><a class=\"anchor\" href=\"#装饰器decorator\">#</a> 装饰器（decorator）</h4>\n<p>装饰器本质上就是闭包的一个包装方式，原理和 closure 类似。</p>\n<h2 id=\"python类机制\"><a class=\"anchor\" href=\"#python类机制\">#</a> python 类机制</h2>\n<ul>\n<li>\n<p>Python 中，任何对象都有一个  <code>type</code> ，可以通过  <code>__class__</code>  属性获得，任何一个  <code>instance</code>  对象的  <code>type</code>  都是一个  <code>class</code>  对象。任何一个  <code>class</code>  对象的 type 都是一个 metaclass 对象。大多数情况下  <code>metaclass</code>  对象通常是 <code>&lt;type 'type'&gt;</code> 。</p>\n</li>\n<li>\n<p>Python 中，任何 class 对象都直接或间接与  <code>&lt;type 'object'&gt;</code>  存在  <code>is-kind-of</code> （基类与子类） 关系，包括 <code>&lt;type 'type'&gt;</code> 。</p>\n</li>\n</ul>\n<h3 id=\"从-type-对象到-class-对象\"><a class=\"anchor\" href=\"#从-type-对象到-class-对象\">#</a> 从 type 对象到 class 对象</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInt</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__add__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>__add__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201005115151224.png\" alt=\"image-20201005115151224\" /></p>\n<h4 id=\"可调用性callable\"><a class=\"anchor\" href=\"#可调用性callable\">#</a> 可调用性（callable)</h4>\n<p>只要一个对象实现了  <code>__call__</code>  操作，本质是是 Python 内部的 PyTypeObject 中的  <code>tp_call</code>  不为空，那就其就是一个可调用对象</p>\n<h4 id=\"step1-处理基类class__base__和-type-信息\"><a class=\"anchor\" href=\"#step1-处理基类class__base__和-type-信息\">#</a> Step.1 处理基类 ( <code>class.__base__</code> ) 和 Type 信息</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>PyTypObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>dict <span class=\"token operator\">*</span>bases<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PyTypeObject <span class=\"token operator\">*</span>base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Py_ssize_t i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//「1」：尝试获得 type 的 tp_base 中的指定基类。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    base <span class=\"token operator\">=</span> type <span class=\"token operator\">-></span>tp_base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> type <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>PyBaseObject_Type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        base <span class=\"token operator\">=</span> type<span class=\"token operator\">-></span>tp_base <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>PyBaseObject_Type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//「2」：没有初始化基类的话，初始化基类</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">&amp;&amp;</span> base<span class=\"token operator\">-></span>tp_dict <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//「3」：设置 type 信息</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">-></span>ob_type <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> base <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        type<span class=\"token operator\">-></span>ob_type <span class=\"token operator\">=</span> base<span class=\"token operator\">-></span>ob_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>部分内置函数的 tp_base 信息，NULL 的话则默认为  <code>&lt;type 'object'&gt;(PyBaseObject_Type)</code></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>class 对象</th>\n<th>基类信息</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PyType_Type</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>PyInt_Type</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>PyBool_Type</td>\n<td>&amp;PyInt_Type</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"step2-处理基类列表class-__bases__\"><a class=\"anchor\" href=\"#step2-处理基类列表class-__bases__\">#</a> Step.2 处理基类列表 ( <code>class .__bases__</code> )</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>PyTypObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token comment\">//「4」： 处理基类列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    bases <span class=\"token operator\">=</span> type<span class=\"token operator\">-></span>tp_bases<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bases <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            bases <span class=\"token operator\">=</span> <span class=\"token function\">PyTuple_New</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            bases <span class=\"token operator\">=</span> <span class=\"token function\">PyTuple_Pack</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        type<span class=\"token operator\">-></span>tp_bases <span class=\"token operator\">=</span> bases<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"step3-填充-tp_dictclass-__dict__\"><a class=\"anchor\" href=\"#step3-填充-tp_dictclass-__dict__\">#</a> Step.3 填充 tp_dict ( <code>class .__dict__</code> )</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>PyTypObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token comment\">//「5」： 设定 tp_dict</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dict <span class=\"token operator\">=</span> type<span class=\"token operator\">-></span>tp_dict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dict <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        dict <span class=\"token operator\">=</span> <span class=\"token function\">PyDict_New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        type<span class=\"token operator\">-></span>tp_dict <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//「6」： 将与 type 相关的 descriptor 加入到 tp_dict 中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">add_operation</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">-></span>tp_methods <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">add_methods</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> type<span class=\"token operator\">-></span>tp_methods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">-></span>tp_members <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">add_members</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> type<span class=\"token operator\">-></span>tp_members<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">-></span>tp_getset <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">add_getset</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> type<span class=\"token operator\">-></span>tp_getset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"step4-对-slot-排序并关联到-descriptor\"><a class=\"anchor\" href=\"#step4-对-slot-排序并关联到-descriptor\">#</a> Step.4 对 slot 排序并关联到 descriptor</h4>\n<ul>\n<li>\n<p>每个  <code>descriptor</code>  对应与一个  <code>slot</code> 。一个  <code>slot</code>  对应一个  <code>func</code> 。而每个函数又通过函数名和  <code>descriptor</code>  指针被关联在  <code>PyTypeObject</code>  对象中的  <code>tp_dict</code>  内。</p>\n</li>\n<li>\n<p>如果出现一个函数名对应多个  <code>slot</code>  的情况下时。 <code>slot</code>  排序可以解决最终调用哪个的问题。排序规则则是根据  <code>offset</code>  大小来决定的，  <code>offset</code>  小的优先级更高。 例如两个同名函数，一个在  <code>PyHeadObject</code>  的  <code>PyNumberMethods</code>  结构中，另一个则在  <code>PyMappingMethods</code>  中，那么  <code>PyNumberMethods</code>  中的将被调用。</p>\n</li>\n<li>\n<p>调用函数时，会先在  <code>PyTypeObject</code>  的  <code>tp_dict</code>  内进行查找，根据函数名找到对应的  <code>descriptor</code>  ，并调用  <code>descriptor</code>  的  <code>wrapperdescr_call</code>  调用  <code>slot</code>   所关联的  <code>func</code></p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201005144210081.png\" alt=\"image-20201005144210081\" /></p>\n<blockquote>\n<p>slot 结构</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">slotdef</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相对于 PyHeadObject 的偏移量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>function<span class=\"token punctuation\">;</span> <span class=\"token comment\">//slot 的 function</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    wrapperfunc wrapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>doc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>name_strobj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>descriptor  结构</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyWrapperDescrObject</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyObject_HEAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PyTypeObject <span class=\"token operator\">*</span>d_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>d_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">slotdef</span> <span class=\"token operator\">*</span>d_base<span class=\"token punctuation\">;</span> <span class=\"token comment\">//slot 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>d_wrapped<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关联的函数指针</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>PyHeadTypeObject 结构</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyHeadObject</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyTypeObject ht_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PyNumberMethods as_number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PyMappingMethods as_mapping<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PySequenceMethods as_sequence<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PyBufferProcs as_buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>ht_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ht_slots<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"step5-确定mro列表\"><a class=\"anchor\" href=\"#step5-确定mro列表\">#</a> Step.5 确定 mro 列表</h3>\n<p>mro 的 C3 超类线性化算法：<br />\n算法思想：</p>\n<ul>\n<li>对象父类的集合  <code>「L(自己)」</code>  可以视作 <code>「自己」</code>  + 每个 <code>「L(父类)」</code>  +  <code>「父类集合」</code></li>\n<li>在存在多个父类合并的情况下，优先提取出第一个集合中的第一个元素与其他集合进行比对，如果其同时出现在其他集合的 <code>非第一的位置</code> 则跳至下一个集合重复上述操作。否则则把该元素添加至父类列表，并从其余所有集合中移除，完成后再次从第一个集合提取第一个元素重复上述内容。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(16).png\" alt=\"773d44c1b5451bd76a106d69574a2fdf.png\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>L<span class=\"token punctuation\">(</span>O<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>L<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>L<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>L<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>L<span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>L<span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">]</span>      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>L<span class=\"token punctuation\">(</span>K2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K2<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>L<span class=\"token punctuation\">(</span>K3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>K3<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token operator\">+</span>L<span class=\"token punctuation\">(</span>K1<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>K3<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token operator\">+</span> L<span class=\"token punctuation\">(</span>K2<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K2<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K3<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">,</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">,</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>O<span class=\"token punctuation\">]</span>       </pre></td></tr><tr><td data-num=\"42\"></td><td><pre> L<span class=\"token punctuation\">(</span>Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">,</span>K1<span class=\"token punctuation\">,</span>K2<span class=\"token punctuation\">,</span>K3<span class=\"token punctuation\">,</span>C<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">,</span>D<span class=\"token punctuation\">,</span>E<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"step6-继承基类操作\"><a class=\"anchor\" href=\"#step6-继承基类操作\">#</a> Step.6 继承基类操作</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>PyTypObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//「7」： 拷贝基类操作到子类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    bases <span class=\"token operator\">=</span> type<span class=\"token operator\">-></span>tp_mro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token function\">PyTuple_GET_SIZE</span><span class=\"token punctuation\">(</span>bases<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        PyObject <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span><span class=\"token function\">PyTuple_GET_ITEM</span><span class=\"token punctuation\">(</span>bases<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">inherit_slots</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PyTypeObject <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拷贝</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"step7-填充子类列表class__subclasses__\"><a class=\"anchor\" href=\"#step7-填充子类列表class__subclasses__\">#</a> Step.7 填充子类列表（ <code>class.__subclasses__()</code> ）</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">PyType_Ready</span><span class=\"token punctuation\">(</span>PyTypObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//「8」： 填充子类列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    bases <span class=\"token operator\">=</span> type<span class=\"token operator\">-></span>tp_mro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    n <span class=\"token operator\">=</span> <span class=\"token function\">PyTuple_GET_SIZE</span><span class=\"token punctuation\">(</span>bases<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        PyObject <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span><span class=\"token function\">PyTuple_GET_ITEM</span><span class=\"token punctuation\">(</span>bases<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">add_subclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PyTypeObject <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 填充</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"自定义-class\"><a class=\"anchor\" href=\"#自定义-class\">#</a> 自定义 class</h3>\n<ul>\n<li>\n<p>创建 class 对象</p>\n<ul>\n<li>获取动态元信息 ——class 的动态属性（属性，函数）</li>\n<li>获取静态元信息 ——class 的类型，空间大小（通过查看  <code>_metaclass__</code>  属性来获取静态元信息，默认情况下是获取  <code>&lt;type 'type'&gt;</code>  的静态元信息）<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201005153723438.png\" alt=\"image-20201005153723438\" /></li>\n<li>用户自定义 class 对象和内置 class 对象的区别在于：\n<ul>\n<li>用户自定义对象的内存排列是<strong>连续</strong>的</li>\n<li>内置 class 对象的内存排列是<strong>分散</strong>的<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201005154812793.png\" alt=\"image-20201005154812793\" /></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>创建 class 对象的 instance</p>\n<ul>\n<li><code>instance = class.__new__(class, args, kwds)</code></li>\n<li><code>class.__init__(instance, args, kwds)</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"descriptor介绍\"><a class=\"anchor\" href=\"#descriptor介绍\">#</a> descriptor 介绍</h4>\n<p><code>descriptor</code>  像是一个连接属性名称和属性值的一个接口。提供一套访问属性的方法。外部通过  <code>descriptor</code>  来对属性进行访问。</p>\n<ul>\n<li>实现了  <code>__get__</code> 、 <code>__set__</code> 、 <code>__delete__</code>  函数的 obj 被称之为  <code>descriptor</code></li>\n<li><code>descriptor</code>  影响着  <code>class</code>  和  <code>instance</code>  对于属性的获取规则\n<ul>\n<li>有  <code>__get__</code>  和  <code>__set__</code>  的被称为  <code>data descriptor</code></li>\n<li>有  <code>__get__</code>  无  <code>__set__</code>  的被称为  <code>no data descriptor</code></li>\n</ul>\n</li>\n<li>属性选择的规则：\n<ul>\n<li>先  <code>instance</code>  的属性，后  <code>class</code>  的属性。</li>\n<li>如果  <code>instance</code>  和  <code>class</code>  中有同名属性，且  <code>class</code>  的属性是  <code>data descriptor</code>  ，那么会选择使用  <code>class</code>  的属性。</li>\n<li>当获取到的属性是一个  <code>descriptor</code>  的时候，如果其存在于  <code>class</code>   的  <code>tp_dict</code>  中会调用其  <code>__get__</code>  函数获取对应的属性值，如果其存在于  <code>instance</code>  的  <code>tp_dict</code>  中则不会调用其  <code>__get__</code>  属性。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"bound-method-和-unbound-method\"><a class=\"anchor\" href=\"#bound-method-和-unbound-method\">#</a> Bound Method 和 Unbound Method</h4>\n<p>两者的本质区别是一个函数的调用是否有默认参数 self。如果有，则在每次函数调用过程中，虚拟机会自动执行一次函数绑定，把 instance 和 self 进行关联。否则，需要程序自己手动传参。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 自动绑定</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>A<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 手动传参</span></pre></td></tr></table></figure><blockquote>\n<p>减少函数绑定的次数可以提高程序的执行效率</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>func <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>test <span class=\"token comment\">#绑定 1 次</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    a<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#绑定 1000 次</span></pre></td></tr></table></figure><h2 id=\"python运行环境初始化\"><a class=\"anchor\" href=\"#python运行环境初始化\">#</a> python 运行环境初始化</h2>\n<h3 id=\"初始化线程环境\"><a class=\"anchor\" href=\"#初始化线程环境\">#</a> 初始化线程环境</h3>\n<ul>\n<li>初始化 python 多进程</li>\n<li>初始化 python 多线程</li>\n</ul>\n<h4 id=\"进程结构\"><a class=\"anchor\" href=\"#进程结构\">#</a> 进程结构：</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 进程对象结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PyInterpreterState</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_is</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_ts</span> <span class=\"token operator\">*</span>tstate_head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟线程集合</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>modules<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PyObject <span class=\"token operator\">*</span> sysdict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>builtins<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"线程结构\"><a class=\"anchor\" href=\"#线程结构\">#</a> 线程结构：</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 线程对象结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PythreadState</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_ts</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PyInterpreterState <span class=\"token operator\">*</span>interp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_frame</span> <span class=\"token operator\">*</span>frame<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟函数调用栈</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> recursion_depth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>dict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">long</span> thread_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201007145711667.png\" alt=\"image-20201007145711667\" title=\"Python 运行时整体环境\" /></p>\n<h3 id=\"加载系统module\"><a class=\"anchor\" href=\"#加载系统module\">#</a> 加载系统 module</h3>\n<h4 id=\"创建__builtin__-module\"><a class=\"anchor\" href=\"#创建__builtin__-module\">#</a> 创建 <code>__builtin__</code>  module</h4>\n<p>一个进程内的全部线程共享一个  <code>&lt;module __builtin__&gt;</code></p>\n<ul>\n<li>创建 module 对象</li>\n<li>设置 module 对象</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201007151250252.png\" alt=\"image-20201007151250252\" title=\"初始化完成的 __builtin__ module\" /></p>\n<h4 id=\"创建-sys-module\"><a class=\"anchor\" href=\"#创建-sys-module\">#</a> 创建 sys module</h4>\n<ul>\n<li>创建 sys module 并备份</li>\n<li>设置 moduel 搜索路径</li>\n<li>创建  <code>__main__</code>  module</li>\n<li>设置 site-specific 的 module 搜索路径（第三方库）\n<ul>\n<li>核心实现在 <span class=\"exturl\" data-url=\"aHR0cDovL3NpdGUucHk=\">site.py</span> 中：\n<ul>\n<li>site 会将 site-packages 加入到 sys.path</li>\n<li>把 site-packages 下的所有 .pth 文件加入到 sys.path 中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201007154617538.png\" alt=\"image-20201007154617538\" title=\"完成初始化后的环境\" /></p>\n<blockquote>\n<p>extensions 用于缓存模块，再次加载的时候可以提高效率。</p>\n</blockquote>\n<h3 id=\"激活虚拟机\"><a class=\"anchor\" href=\"#激活虚拟机\">#</a> 激活虚拟机</h3>\n<h4 id=\"交互式运行方式\"><a class=\"anchor\" href=\"#交互式运行方式\">#</a> 交互式运行方式</h4>\n<ul>\n<li>把用户输入构造成 python 的 AST 语法树</li>\n<li>执行 run_mode 运行语法树</li>\n</ul>\n<h4 id=\"脚本文件运行方式\"><a class=\"anchor\" href=\"#脚本文件运行方式\">#</a> 脚本文件运行方式</h4>\n<ul>\n<li>编译脚本文件</li>\n<li>执行 run_mode 运行编译后的脚本文件</li>\n</ul>\n<h4 id=\"启动虚拟机\"><a class=\"anchor\" href=\"#启动虚拟机\">#</a> 启动虚拟机</h4>\n<ul>\n<li>run_mode 内会启动 Python 字节码虚拟机。之后循环往复的执行字节码。</li>\n</ul>\n<h4 id=\"名字空间\"><a class=\"anchor\" href=\"#名字空间\">#</a> 名字空间</h4>\n<ul>\n<li>local、global、bulitin 的设置。</li>\n<li>交互环境下 local 名字空间内不会有  <code>__file__</code>  属性</li>\n<li>Python 所有的线程都共享同样的 builtin 名字空间</li>\n</ul>\n<h2 id=\"python模块动态加载机制\"><a class=\"anchor\" href=\"#python模块动态加载机制\">#</a> python 模块动态加载机制</h2>\n<h3 id=\"import-机制\"><a class=\"anchor\" href=\"#import-机制\">#</a> import 机制</h3>\n<ul>\n<li><code>import module/package</code>  ： <code> import</code>   操作会先在全局模块池（ <code> sys.module</code>  ）中搜索  <code> module</code>   或  <code> package</code>  。如果以及存在，则直接加入当前  <code> module</code>    的  <code> local</code>   名字空间，否则就添加到  <code> sys.module</code>   和  <code> local</code>   。</li>\n<li><code> import package.module</code>  ：和  <code>import module/package</code>   类似，不过会额外把  <code> package</code>   加入到  <code> sys.module</code>   中。但不会加入  <code> local</code>   名字空间。</li>\n<li><code> import package.module as xx</code>  ：和  <code> import package.module</code>   类似。这里会对  <code> package.module</code>   在  <code> local</code>   名字空间做一个映射，实际的  <code> sys.module</code>   中引入的还是  <code> package.module</code>  。但是在  <code> local</code>   中其表示为  <code> xx</code>  。</li>\n<li><code> from package.module import xx</code>  ：和  <code> import package.module as xx</code>  类似。会在  <code> sys.module</code>   引入  <code> package</code>   和  <code> package.module</code>  ，同时在  <code> local</code>   引入  <code> xx</code>  。</li>\n<li>嵌套的  <code> import</code>   ：一个模块 import 另一个模块的情况下。每个模块的 import 都会影响  <code> sys.module</code>   和自身的  <code> local</code>   名字空间。但不会影响其他模块的  <code> local</code>  。</li>\n</ul>\n<h3 id=\"模块销毁与重载\"><a class=\"anchor\" href=\"#模块销毁与重载\">#</a> 模块销毁与重载</h3>\n<h4 id=\"销毁\"><a class=\"anchor\" href=\"#销毁\">#</a> 销毁</h4>\n<p>Python 提供了  <code> del module/package</code>   操作用于销毁模块。但是销毁的只是当前  <code> local</code>   名字空间内的， <code> sys.module</code>   中依旧保存了其缓存。所以单纯的  <code> del module</code>  ，再  <code> import module</code>   并不能实现热更新。</p>\n<h4 id=\"重载\"><a class=\"anchor\" href=\"#重载\">#</a> 重载</h4>\n<p>Python 提供了  <code> reload module</code>   操作用于重载模块。   <code>reload</code>   操作可以更新   <code>sys.module</code>   中的模块信息，把一些新增和修改的内容加入到  <code>module</code>   中，但是对于需要删除的内容，则无能为力，依旧会缓存在  <code>module</code>   内。</p>\n<h3 id=\"import-实现机制\"><a class=\"anchor\" href=\"#import-实现机制\">#</a> import 实现机制</h3>\n<p>import 的实现核心是依靠其   <code>builtin</code>   模块内的   <code>__import__</code>   操作。即：  <code>builtin__import__</code>   函数。</p>\n<ul>\n<li>调用  <code>builtin__import__</code>   函数，解析传递进来的参数。</li>\n<li>上锁。避免不同线程同时操作一个    <code>module  </code>  。</li>\n<li>解析    <code>module/package  </code>  树状结构。\n<ul>\n<li>Python 的所有搜索操作（   <code>import xxx/from xxx import xxx  </code> ）都是基于某一个   <code>package  </code>  来的。换句话说，所有查找的根目录（ <code>__main__</code> ) 都是一致的。即：某个   <code>package  </code>  的路径。</li>\n<li>Python 的搜索操作是不能搜索根目录之上的模块，例如：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 如果是基于 Package——A，那么可以访问到所有模块。根路径:/A = __main__.path</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 如果是基于 Package——B，那么无法访问 C 模块和 A 模块下的内容。根路径:/A/B = __main__.path</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 如果是基于 Package——C，那么无法访问 B 模块和 A 模块下的内容。根路径:/A/C = __main__.path</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>A</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span>——__init__<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span>——B</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——__init__<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——test1<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——test2<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span>——C</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——__init__<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——test3<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>——test4<span class=\"token punctuation\">.</span>py</pre></td></tr></table></figure><ul>\n<li>加载 <code>module/package</code>\n<ul>\n<li>\n<p>先在  <code>sys.module</code>  中搜索是否依旧有加载过该模块留下的缓存了。</p>\n</li>\n<li>\n<p>尝试加载  <code>source module</code> 。如果没有则对  <code>.py</code>  文件进行编译，生成所需的  <code>PyCodeObject</code> 。</p>\n</li>\n<li>\n<p>如果需要加载内建 module。则会先去内建 module 备份列表中确认是否以及加载过了。再执行加载操作。</p>\n</li>\n<li>\n<p>加载 C 扩展的 module。</p>\n<ul>\n<li>window：dll 文件</li>\n<li>linux：so 文件</li>\n<li>不论哪种平台，都需要遵循 Python 执行的一套导入规则，格式大致如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 申明一个 PyMethodObject 对象所需的参数信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> PyMethodDef test_methods<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> Hello<span class=\"token punctuation\">,</span> METH_VARARGS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"say hello\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 对应下方图片内红框内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 告知 Python 初始化模块：模块名 模块信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>EXPORT <span class=\"token keyword\">int</span> <span class=\"token function\">initest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">Py_InitModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> test_methods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>细心的同学可以发现，这和内建模块的导入规则几乎一致</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201007210412440.png\" alt=\"image-20201007210412440\" title=\"完成初始化后的环境\" /></p>\n<ul>\n<li><code>from xxx import m,n</code> ：该操作会判断 xxx 模块中是否存在 m 和 n，而判断的依据就是通过  <code>__all__</code>  来实现的。如果没有申明  <code>__all__</code>  ，那么则会使用 Python 默认的  <code>PyObject_GetAttrString</code>  函数来获取模块下的所有内容。否则，则会以 <code>__all__</code>  列表里的内容为准。</li>\n</ul>\n<h3 id=\"legb-规则\"><a class=\"anchor\" href=\"#legb-规则\">#</a> LEGB 规则</h3>\n<blockquote>\n<p>Local -&gt; Enclosed -&gt; Global -&gt; Built-in</p>\n</blockquote>\n<ul>\n<li><code>Local </code>  ：可能是在一个函数或者类方法内部。</li>\n<li><code>Enclosed </code>  ： 可能是嵌套函数内，比如说 一个函数包裹在另一个函数内部。</li>\n<li><code>Global </code>   ：代表的是执行脚本自身的最高层次。</li>\n<li><code>Built-in </code>   ：是 Python 为自身保留的特殊名称。</li>\n</ul>\n<h3 id=\"最内嵌作用域-规则\"><a class=\"anchor\" href=\"#最内嵌作用域-规则\">#</a> 最内嵌作用域 规则</h3>\n<p>由一个赋值语句引进的名字在这个赋值语句所在的作用域里是可见（起作用）的，而且在其内部嵌套的每个作用域里也可见。</p>\n<blockquote>\n<p>除非它被嵌套于内部的，引进同样名字的另一条赋值语句所遮蔽 / 覆盖。</p>\n</blockquote>\n<ul>\n<li>eg：</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>module2<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">50</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>module1<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> module2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\"># module1 申明的 a 在 module2 中是可见的</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>module2<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#执行过程中 module2 里的 a 覆盖了 global 作用域中 module1 里的 a</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Out<span class=\"token punctuation\">:</span><span class=\"token number\">50</span></pre></td></tr></table></figure><h2 id=\"python多线程机制\"><a class=\"anchor\" href=\"#python多线程机制\">#</a> python 多线程机制</h2>\n<h3 id=\"gil全局解释器锁和线程调度\"><a class=\"anchor\" href=\"#gil全局解释器锁和线程调度\">#</a> GIL (全局解释器锁) 和线程调度</h3>\n<p>在 Python 多线程中，不同线程之间会访问一些共享的资源，例如对象的引用计数和对象的释放。如果同时有两个线程修改一个对象的引用计数，导致对象被释放，那么可能会出现对象释放多次的问题。这时  <code>GIL</code>  就应运而生了。</p>\n<ul>\n<li><code>GIL</code>  ：本质上是一个解释器，只有当线程拥有该解释器的访问权限时，才能够执行指令。 <code>GIL</code>  间接的把多处理器的多线程模型转变为了单处理器的多线程模型。虽然其看上去对于锁的粒度较大，但在实际使用中效果却意外的好用。</li>\n<li>线程调度：\n<ul>\n<li>中断机制：Python 的中断机制和操作系统类似，都是模拟 <code>时钟中断</code> 。会根据执行的指令数目来控制线程中断，在 Python 2.5 中，默认执行 100 条指令后，会触发线程的中断，切换到其他线程。</li>\n<li>唤醒机制：对于需要唤醒哪个线程，Python 层面没有过多的干涉，而是把该任务交给了操作系统。</li>\n<li>Python 提供的两个多线程工具：\n<ul>\n<li>thread：C 实现的 builtin module。</li>\n<li>threading：Python 实现的标准库 module。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"python线程的创建\"><a class=\"anchor\" href=\"#python线程的创建\">#</a> Python 线程的创建</h3>\n<p>Python 虚拟机默认情况下是不支持多线程的，即：用户如果没有手动调用  <code>thread.start_new_thread</code>  接口，Python 则不会创建多线程相关的对象，也不会触发线程调度。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> PyObject<span class=\"token operator\">*</span> <span class=\"token function\">thread_PyThread_start_new_thread</span><span class=\"token punctuation\">(</span>PyObject <span class=\"token operator\">*</span>self<span class=\"token punctuation\">,</span> PyObject <span class=\"token operator\">*</span>fargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PyObject <span class=\"token operator\">*</span>func<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>keyw <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">bootstate</span> <span class=\"token operator\">*</span>boot<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">long</span> ident<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">PyArg_UnpackTuple</span><span class=\"token punctuation\">(</span>fargs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"start_new_thread\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>func<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>keyw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 「1」: 创建 bootstate 结构</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    boot <span class=\"token operator\">=</span> <span class=\"token function\">PyMem_NEW</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">bootstate</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    boot<span class=\"token operator\">-></span>interp <span class=\"token operator\">=</span> <span class=\"token function\">PyThreadState_GET</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>interp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    boot<span class=\"token operator\">-></span>func <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    boot<span class=\"token operator\">-></span>args <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    boot<span class=\"token operator\">-></span>keyw <span class=\"token operator\">=</span> keyw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 「2」: 初始化多线程环境</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">PyEval_InitThreads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 「3」: 创建子线程</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ident <span class=\"token operator\">=</span> <span class=\"token function\">PyThread_start_new_thread</span><span class=\"token punctuation\">(</span>t_bootstrap<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> boot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">PyInt_FromLong</span><span class=\"token punctuation\">(</span>ident<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建线程主要分为三个步骤：</p>\n<ul>\n<li>创建并初始化 bootstate 结构 boot，boot 中保存了线程的过程和过程的参数。</li>\n<li>初始化 Python 的多线程环境。</li>\n<li>以 boot 为参数，创建操作系统的原生线程。</li>\n</ul>\n<h4 id=\"建立多线程环境\"><a class=\"anchor\" href=\"#建立多线程环境\">#</a> 建立多线程环境</h4>\n<ul>\n<li>创建 GIL，以下是 GIL 的结构</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">NRMUTEX</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    LONG owned<span class=\"token punctuation\">;</span> <span class=\"token comment\">//GIL 是否可获得，或是被占用 -1: 可用 0: 被占用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD thread_id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 线程 id</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    HANDLE hevent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 操作系统的 Event 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>线程每次需要执行前，必须获取 GIL，通过  <code>PyThread_acquire_lock</code>  函数。  <code>PyThread_acquire_lock</code>   有两种工作方式：\n<ul>\n<li>当无法获得 GIL 时，挂起自身。</li>\n<li>无法获得 GIL 时，不挂起。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"子线程的创建步骤\"><a class=\"anchor\" href=\"#子线程的创建步骤\">#</a> 子线程的创建步骤</h5>\n<ol>\n<li>创建 bootstate 结构。</li>\n<li>初始化多线程环境（主线程获得 GIL 控制权）。</li>\n<li>创建子线程，同时挂起主线程，子线程开始完成 bootstrap 线程过程。<strong>这里的主线程挂起，子线程执行线程过程的操作不在 Python 中断的范畴，而是利用了操作系统本身的中断机制。所以子线程不需要获取 GIL 的控制权</strong>。</li>\n<li>完成之后获得 thread_id，并设置 Semaphore，返回 thread_id ，挂起自身，并唤醒主线程。</li>\n<li>主线程获得子线程的 thread_id，并开始和子线程争夺 GIL 的控制权（通过 <code>时钟中断</code> ）。<strong>此时，主线程和子线程的中断才完全依赖 GIL 的控制权控制。</strong></li>\n<li>当子线程获得 GIL 控制权，主线程请求 GIL 被占用时，主线程挂起自身，子线程开始执行，当子线程执行完全部内容后，将被释放。到此，子线程的生命周期就已经结束。</li>\n</ol>\n<blockquote>\n<p>在子线程没有完全的创建完毕前（第 4 步没有执行完毕），中断机制不受 GIL 控制。</p>\n<p>线程自身的挂起状态，不是在归还 GIL 控制权后发生，而是在请求 GIL 无果后发生。</p>\n</blockquote>\n<h5 id=\"线程状态保护机制\"><a class=\"anchor\" href=\"#线程状态保护机制\">#</a> 线程状态保护机制</h5>\n<p>为了能够快速访问线程的状态，获取每个线程的信息，Python 为线程状态链表单独实现了一套锁机制，并且线程状态链表的访问不受 GIL 控制。</p>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20201008133920825.png\" alt=\"image-20201008133920825\" title=\"线程状态对象链表\" /></p>\n<h3 id=\"python线程调度\"><a class=\"anchor\" href=\"#python线程调度\">#</a> Python 线程调度</h3>\n<h4 id=\"标准调度\"><a class=\"anchor\" href=\"#标准调度\">#</a> 标准调度</h4>\n<p>通过字节码计数来触发中断，默认情况下线程每执行 100 条字节码指令，就会触发一次中断。但在 Python 程序中，某些指令的执行不会计算字节码执行次数。</p>\n<h4 id=\"阻塞调度\"><a class=\"anchor\" href=\"#阻塞调度\">#</a> 阻塞调度</h4>\n<p>阻塞调度和标准调度有所不同，标准调度的中断触发是被动的，而阻塞调度的中断触发则是主动的，即：线程主动归还 GIL 的控制权。且诸塞调度完成后不会把字节码指令数重置成 100。</p>\n<p>此外相比于标准调度在切换线程时的连续性，阻塞调度在主动归还 GIL 到下次某个线程获得 GIL 的中间段，是会有一个空窗期的，这段时间内，线程将脱离 GIL 的控制，不过好在这段时间内，没有涉及到 Python 的 C API 调用，所以是线程安全的。</p>\n<h3 id=\"python子线程的销毁\"><a class=\"anchor\" href=\"#python子线程的销毁\">#</a> Python 子线程的销毁</h3>\n<p>线程的销毁会释放其占用的 GIL 以及一些线程资源和维护的线程状态链表对象。</p>\n<p>此外，主线程的销毁同时也会销毁 Python 的运行时环境，而子线程则不会。</p>\n<h3 id=\"python线程的用户级互斥与同步\"><a class=\"anchor\" href=\"#python线程的用户级互斥与同步\">#</a> Python 线程的用户级互斥与同步</h3>\n<h4 id=\"lock-对象\"><a class=\"anchor\" href=\"#lock-对象\">#</a> Lock 对象</h4>\n<p>Python 的 Lock 分为系统级的 Lock——GIL 和 用户级 Lock。</p>\n<p>当线程被唤醒时，首先会获得系统级的 Lock (GIL) 的控制权，之后会尝试获取用户级 lock，如果用户级 lock 被占用，则线程会归还系统级控制权，避免死锁。</p>\n<h4 id=\"高级线程库threading\"><a class=\"anchor\" href=\"#高级线程库threading\">#</a> 高级线程库 ——threading</h4>\n<h4 id=\"threading-module-概述\"><a class=\"anchor\" href=\"#threading-module-概述\">#</a> Threading Module 概述</h4>\n<p>threading module 维护了两个 dict 和一个 lock：</p>\n<ul>\n<li>准备创建的线程字典： <code>_limbo[thread] = thread</code></li>\n<li>已经创建的线程字典： <code>_active[thread_id] = thread</code></li>\n<li>访问线程状态链表的锁： <code>_active_limbo_lock</code></li>\n</ul>\n<h4 id=\"threading-的线程同步工具\"><a class=\"anchor\" href=\"#threading-的线程同步工具\">#</a> Threading 的线程同步工具</h4>\n<ul>\n<li>\n<p><code>RLock</code> ：正常的 lock 一个 acquire 对应于 一个 release，如果同时执行两个 acquire 而不 release，则会出现死锁。RLock 则提供了可用多次 acquire 后再多次 release 操作的机制。不必每次借钱之前都得把上次欠的还清，可以先借多次，再还多次。</p>\n</li>\n<li>\n<p><code>Condition</code> ：本质上时一个  <code>Lock</code>  对象，默认情况下是  <code>RLock</code> ，提供了  <code>wait</code>  和  <code>notify</code>  操作，可用在别的线程中主动唤醒其他线程。</p>\n<ul>\n<li><code>ConditionA.wait</code> ：A 线程调用时，释放  <code>ConditonA</code>  中的  <code>Lock</code>  并挂起线程 A。</li>\n<li><code>ConditionA.notify</code> ：其他线程调用时，获得  <code>ConditonA</code>  中的  <code>Lock</code>  并唤醒线程 A。</li>\n</ul>\n</li>\n<li>\n<p><code>Semaphore</code> ：类似信号量，实现机制也是基于  <code>Lock</code> ，内部维护一个  <code>Conidtion</code>  对象，但与 Lock 的互斥不同，其可以支持多个线程获得资源。资源池的概念。</p>\n</li>\n<li>\n<p><code>Event</code> ：和 Semaphore 类型，提供  <code>set</code>  和  <code>wait</code>  语义。</p>\n</li>\n</ul>\n<h2 id=\"python的垃圾回收gc\"><a class=\"anchor\" href=\"#python的垃圾回收gc\">#</a> python 的垃圾回收 GC</h2>\n<h3 id=\"block\"><a class=\"anchor\" href=\"#block\">#</a> block</h3>\n<ul>\n<li>用于存放对象的最小单位。</li>\n<li>针对不同 size 的数据进行分类存储的块。数据大小为 8 的整数倍，最大为 256 字节。</li>\n<li>如果内存大小≤256，则 python 会通过 PyObject_Malloc 去分配。如果 &gt; 256 字节，则会使用 malloc 来分配内存。</li>\n<li>size 有 32 种（0~31）之后的版本扩充到了 63（512 字节）。</li>\n<li>给对象分配的空间一般会超过原本大小，向上取 8 的整数倍。</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(68).png\" alt=\"c87bfa632b2c7e3254911863fbe36e55.png\" /></p>\n<h3 id=\"pool\"><a class=\"anchor\" href=\"#pool\">#</a> pool</h3>\n<ul>\n<li>\n<p>同一个 pool 中的 block 大小必须统一。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(69).png\" alt=\"7b94ea10747352b5100ca504cdf76571.png\" /></p>\n</li>\n<li>\n<p>pool 的大小一般为 4kb。</p>\n</li>\n<li>\n<p>管理 block 的指针分为四种：</p>\n<ul>\n<li>bp 指针：指向当前使用 block。</li>\n<li>free 指针：指向下一个可用 block，free 是一个链表，每个节点内的值为 Null 或者是下一个空闲的 block 地址。</li>\n<li>next 指针：指向 free 的下一个空闲 block，一般是在当 free 内的值为 Null 的情况下，系统申请新空闲 block 后，给 free 作定位用的。</li>\n<li>maxnext 指针：指向 block 的最后一个 block 的首地址。用于判断 block 是否已经全部分配完毕。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/Image(70).png\" alt=\"ba149b720cee23ad2d08f6d95bb29524.png\" /></li>\n</ul>\n</li>\n<li>\n<p>pool 的结构是由一个 pool_header 和一堆 block 组成的数组。它们是一个整体。</p>\n</li>\n<li>\n<p>pool 的状态：</p>\n<ul>\n<li>used 状态。pool 中即存在被使用的 block，也存在未被使用的 block。</li>\n<li>full 状态。pool 中所有 block 都在被使用。</li>\n<li>empty 状态。pool 中所有 block 都未被使用。</li>\n</ul>\n</li>\n<li>\n<p>usedpools。所有正在被使用的 pool 的双向链表头。本身是一个 pool_header * 组成的数组，通过一点取巧的方式把每个指针和其前面 2 个位置的指针一起视为一个 pool_header 对象从而构成一个空的双向链表。</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154449909.png\" alt=\"image-20200919154449909\" /></p>\n<h3 id=\"arena\"><a class=\"anchor\" href=\"#arena\">#</a> arena</h3>\n<ul>\n<li>\n<p>多个 pool 的管理者，每个 arena 的 pool 可以存在多个不同的 <code>size class index</code> 。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154538226.png\" alt=\"image-20200919154538226\" /></p>\n</li>\n<li>\n<p>一个 arena 的大小为 256k，可容纳 64 个 pool。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154553555.png\" alt=\"image-20200919154553555\" /></p>\n</li>\n<li>\n<p>arena 的结构是由一个 arena_object 指针和一堆 pool 组成的数组构成。不像 pool 一样，arena 的指针和内存是分离的。</p>\n</li>\n<li>\n<p>arena 有两种状态</p>\n<ul>\n<li>未使用状态：arena_object 指针没有指向对应的 pool 组成的数组块。</li>\n<li>使用状态：arena_object 指针已经指向对应的 pool 组成的数组块。</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154614444.png\" alt=\"image-20200919154614444\" /><br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154634438.png\" alt=\"image-20200919154634438\" /></p>\n<h3 id=\"arenas\"><a class=\"anchor\" href=\"#arenas\">#</a> arenas</h3>\n<ul>\n<li>管理多个 arena 的对象指针的数组。</li>\n<li>把 arena 分为两种状态：\n<ul>\n<li>未使用状态：通过 arenas 的 unused_arena_objects 指针作为表头的单向链表所连接</li>\n<li>使用状态：通过 arenas 的 used_arena_objects 指针作为表头的双向链表所连接</li>\n</ul>\n</li>\n<li>多个 arenas 通过名为 nextarena 和 prevatrena 的指针所联系在一起。</li>\n<li>初始化时创建的 arena 的数量为 16 个。之后如果未使用的 arena 不足时，会进行二倍的扩容。</li>\n<li>扩容操作只会创建 arena 的指针，只有在 arena 将要被使用时，才会去分配一个 256k 的大小。</li>\n<li>当前管理的 arena 的总数是由一个 int 类型的变量控制。每次扩容左移一位。当发生溢出（超过 2**32 或者分配的空间不足一个 arenas 的大小）时停止扩容操作。<br />\n<img data-src=\"https://gitee.com/allengx/pic_bed/raw/master/img/image-20200919154653554.png\" alt=\"image-20200919154653554\" /></li>\n</ul>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL3drbGtlbi5tZS9wb3N0cy8yMDE1LzA4LzI5L3B5dGhvbi1zb3VyY2UtbWVtb3J5LTEuaHRtbA==\">http://wklken.me/posts/2015/08/29/python-source-memory-1.html</span></p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL3drbGtlbi5tZS9wb3N0cy8yMDE1LzA4LzI5L3B5dGhvbi1zb3VyY2UtbWVtb3J5LTIuaHRtbA==\">http://wklken.me/posts/2015/08/29/python-source-memory-2.html</span></p>\n<h3 id=\"垃圾回收gc\"><a class=\"anchor\" href=\"#垃圾回收gc\">#</a> 垃圾回收（GC）</h3>\n<h4 id=\"1-标记清除marksweep\"><a class=\"anchor\" href=\"#1-标记清除marksweep\">#</a> 1、标记清除（Mark——Sweep）</h4>\n<ul>\n<li>寻找根对象集合\n<ul>\n<li>采用双向链表存储所有 container 对象</li>\n<li>为此每个 container 对象头部都存在一个 PyGC_Head 的数据块（在 PyObject_Head 之前）</li>\n</ul>\n</li>\n<li>寻找可达对象和不可达对象</li>\n<li>广度探测</li>\n<li>对于非 container 对象不进行检查\n<ul>\n<li>一个对象如果不能存储其他对象的引用则被视为非 container 对象</li>\n</ul>\n</li>\n<li>对于可达对象进行保留，不可达对象进行回收。</li>\n</ul>\n<h4 id=\"2-分代的垃圾收集python的解决办法\"><a class=\"anchor\" href=\"#2-分代的垃圾收集python的解决办法\">#</a> 2、分代的垃圾收集 ——python 的解决办法</h4>\n<ul>\n<li>\n<p>核心思想：</p>\n<ul>\n<li>根据内存的创建时间划分为不同的「代」</li>\n<li>时间越「长」的对象其被回收的概率就「小」。</li>\n<li>经过多次垃圾回收「存活」下来的对象则会被分配到回收周期更「长」的代中。</li>\n<li>每个「代」在 python 中对应的是一个「链表」，python 总共把代分为三个。</li>\n<li>第「0」个代的链表长度超过 700 时会触发垃圾回收（第一、二代都是 10）。python 还会借此机会清理其他的代。</li>\n<li>python 对代的清理是通过把第 2 代到第 0 代的三个链表（也可能不足三个）进行 merge。最终链接到第 2 代的链表后，一口气执行垃圾回收，打上回收标记。</li>\n<li>打上不可回收标记。通过有效引用计数，把计数不为「0」的对象打上不可回收标记。</li>\n<li>把不可回收对象单独存放在一个集合内。并把这些对象中所引用的对象（并且这些引用对象打上了可回收标记），也加入这个集合（双向链表）。</li>\n<li>对于定义了「 <code>__del__</code> 」的对象（finalizer 对象）需要单独用一个 PyListObject 来存放，在删除 finalizer 对象的时候先扣除该对象所引用的对象的引用计数，并清理引用列表，待到引用计数为 0 时再进行垃圾回收，保证回收对象已经不被任何对象引用。</li>\n<li>三种存储回收对象的链表：\n<ul>\n<li>reachable：保存每次需要回收的所有对象。</li>\n<li>unreachable：保存双向引用的回收对象。</li>\n<li>uncollectable：保存带有「 <code>__del__</code> 」函数的双向引用对象。</li>\n</ul>\n</li>\n<li>正常情况下的对象会在计数为 0 的时候就被销毁，所以存在于 <code>root object</code>  的对象都是双向引用或者被系统引用的对象。后者一般不会被回收。</li>\n</ul>\n</li>\n<li>\n<p>有效引用计数（解决垃圾回收时环引用）：</p>\n<ul>\n<li>遍历所有需要回收的对象（在 root object 集合中）。根据对象类型，判断每个对象内的引用 是否也是需要回收的对象，如果是，则对他的引用计数「副本」进行「 <code>--</code> 」操作，最终引用计数副本为「0」的对象将被视为可能需要回收。</li>\n</ul>\n</li>\n<li>\n<p>注意事项：</p>\n<ul>\n<li>python 在回收垃圾的时候没办法保证顺序，尽量避免在「 <code>__del__</code> 」中引用其他对象。</li>\n<li>python2.7 和 python3.+ 对于执行垃圾回收时，在「 <code>__del__</code> 」中引用其他对象这一操作所给出的解决方案有所不同。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "学习笔记",
                "Python",
                "Python",
                "源码"
            ]
        }
    ]
}